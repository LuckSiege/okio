{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Okio Okio is a library that complements java.io and java.nio to make it much easier to access, store, and process your data. It started as a component of OkHttp , the capable HTTP client included in Android. It s well-exercised and ready to solve new problems. ByteStrings and Buffers Okio is built around two types that pack a lot of capability into a straightforward API: ByteString is an immutable sequence of bytes. For character data, String is fundamental. ByteString is String s long-lost brother, making it easy to treat binary data as a value. This class is ergonomic: it knows how to encode and decode itself as hex, base64, and UTF-8. Buffer is a mutable sequence of bytes. Like ArrayList , you don t need to size your buffer in advance. You read and write buffers as a queue: write data to the end and read it from the front. There s no obligation to manage positions, limits, or capacities. Internally, ByteString and Buffer do some clever things to save CPU and memory. If you encode a UTF-8 string as a ByteString , it caches a reference to that string so that if you decode it later, there s no work to do. Buffer is implemented as a linked list of segments. When you move data from one buffer to another, it reassigns ownership of the segments rather than copying the data across. This approach is particularly helpful for multithreaded programs: a thread that talks to the network can exchange data with a worker thread without any copying or ceremony. Sources and Sinks An elegant part of the java.io design is how streams can be layered for transformations like encryption and compression. Okio includes its own stream types called Source and Sink that work like InputStream and OutputStream , but with some key differences: Timeouts. The streams provide access to the timeouts of the underlying I/O mechanism. Unlike the java.io socket streams, both read() and write() calls honor timeouts. Easy to implement. Source declares three methods: read() , close() , and timeout() . There are no hazards like available() or single-byte reads that cause correctness and performance surprises. Easy to use. Although implementations of Source and Sink have only three methods to write, callers are given a rich API with the BufferedSource and BufferedSink interfaces. These interfaces give you everything you need in one place. No artificial distinction between byte streams and char streams. It s all data. Read and write it as bytes, UTF-8 strings, big-endian 32-bit integers, little-endian shorts; whatever you want. No more InputStreamReader ! Easy to test. The Buffer class implements both BufferedSource and BufferedSink so your test code is simple and clear. Sources and sinks interoperate with InputStream and OutputStream . You can view any Source as an InputStream , and you can view any InputStream as a Source . Similarly for Sink and OutputStream . Presentations A Few \u201cOk\u201d Libraries ( slides ): An introduction to Okio and three libraries written with it. Decoding the Secrets of Binary Data ( slides ): How data encoding works and how Okio does it. Ok Multiplatform! ( slides ): How we changed Okio\u2019s implementation language from Java to Kotlin. Recipes We ve written some recipes that demonstrate how to solve common problems with Okio. Read through them to learn about how everything works together. Cut-and-paste these examples freely; that s what they re for. Read a text file line-by-line Use Okio.source(File) to open a source stream to read a file. The returned Source interface is very small and has limited uses. Instead we wrap the source with a buffer. This has two benefits: It makes the API more powerful. Instead of the basic methods offered by Source , BufferedSource has dozens of methods to address most common problems concisely. It makes your program run faster. Buffering allows Okio to get more done with fewer I/O operations. Each Source that is opened needs to be closed. The code that opens the stream is responsible for making sure it is closed. Here we use Java s try blocks to close our sources automatically. public void readLines ( File file ) throws IOException { try ( Source fileSource = Okio . source ( file ); BufferedSource bufferedSource = Okio . buffer ( fileSource )) { while ( true ) { String line = bufferedSource . readUtf8Line (); if ( line == null ) break ; if ( line . contains ( square )) { System . out . println ( line ); } } } } The readUtf8Line() API reads all of the data until the next line delimiter \u2013 either \\n , \\r\\n , or the end of the file. It returns that data as a string, omitting the delimiter at the end. When it encounters empty lines the method will return an empty string. If there isn\u2019t any more data to read it will return null. The above program can be written more compactly by inlining the fileSource variable and by using a fancy for loop instead of a while : public void readLines ( File file ) throws IOException { try ( BufferedSource source = Okio . buffer ( Okio . source ( file ))) { for ( String line ; ( line = source . readUtf8Line ()) != null ; ) { if ( line . contains ( square )) { System . out . println ( line ); } } } } The readUtf8Line() method is suitable for parsing most files. For certain use-cases you may also consider readUtf8LineStrict() . It is similar but it requires that each line is terminated by \\n or \\r\\n . If it encounters the end of the file before that it will throw an EOFException . The strict variant also permits a byte limit to defend against malformed input. public void readLines ( File file ) throws IOException { try ( BufferedSource source = Okio . buffer ( Okio . source ( file ))) { while ( ! source . exhausted ()) { String line = source . readUtf8LineStrict ( 1024L ); if ( line . contains ( square )) { System . out . println ( line ); } } } } Write a text file Above we used a Source and a BufferedSource to read a file. To write, we use a Sink and a BufferedSink . The advantages of buffering are the same: a more capable API and better performance. public void writeEnv ( File file ) throws IOException { try ( Sink fileSink = Okio . sink ( file ); BufferedSink bufferedSink = Okio . buffer ( fileSink )) { for ( Map . Entry String , String entry : System . getenv (). entrySet ()) { bufferedSink . writeUtf8 ( entry . getKey ()); bufferedSink . writeUtf8 ( = ); bufferedSink . writeUtf8 ( entry . getValue ()); bufferedSink . writeUtf8 ( \\n ); } } } There isn\u2019t an API to write a line of input; instead we manually insert our own newline character. Most programs should hardcode \"\\n\" as the newline character. In rare situations you may use System.lineSeparator() instead of \"\\n\" : it returns \"\\r\\n\" on Windows and \"\\n\" everywhere else. We can write the above program more compactly by inlining the fileSink variable and by taking advantage of method chaining: public void writeEnv ( File file ) throws IOException { try ( BufferedSink sink = Okio . buffer ( Okio . sink ( file ))) { for ( Map . Entry String , String entry : System . getenv (). entrySet ()) { sink . writeUtf8 ( entry . getKey ()) . writeUtf8 ( = ) . writeUtf8 ( entry . getValue ()) . writeUtf8 ( \\n ); } } } In the above code we make four calls to writeUtf8() . Making four calls is more efficient than the code below because the VM doesn\u2019t have to create and garbage collect a temporary string. sink . writeUtf8 ( entry . getKey () + = + entry . getValue () + \\n ); // Slower! UTF-8 In the above APIs you can see that Okio really likes UTF-8. Early computer systems suffered many incompatible character encodings: ISO-8859-1, ShiftJIS, ASCII, EBCDIC, etc. Writing software to support multiple character sets was awful and we didn\u2019t even have emoji! Today we re lucky that the world has standardized on UTF-8 everywhere, with some rare uses of other charsets in legacy systems. If you need another character set, readString() and writeString() are there for you. These methods require that you specify a character set. Otherwise you may accidentally create data that is only readable by the local computer. Most programs should use the UTF-8 methods only. When encoding strings you need to be mindful of the different ways that strings are represented and encoded. When a glyph has an accent or another adornment it may be represented as a single complex code point ( \u00e9 ) or as a simple code point ( e ) followed by its modifiers ( \u00b4 ). When the entire glyph is a single code point that\u2019s called NFC ; when it\u2019s multiple it\u2019s NFD . Though we use UTF-8 whenever we read or write strings in I/O, when they are in memory Java Strings use an obsolete character encoding called UTF-16. It is a bad encoding because it uses a 16-bit char for most characters, but some don\u2019t fit. In particular, most emoji use two Java chars. This is problematic because String.length() returns a surprising result: the number of UTF-16 chars and not the natural number of glyphs. Caf\u00e9 \ud83c\udf69 Cafe\u0301 \ud83c\udf69 Form NFC NFD Code Points c a f \u00e9 \u2423 \ud83c\udf69 c a f e \u00b4 \u2423 \ud83c\udf69 UTF-8 bytes 43 61 66 c3a9 20 f09f8da9 43 61 66 65 cc81 20 f09f8da9 String.codePointCount 6 7 String.length 7 8 Utf8.size 10 11 For the most part Okio lets you ignore these problems and focus on your data. But when you need them, there are convenient APIs for dealing with low-level UTF-8 strings. Use Utf8.size() to count the number of bytes required to encode a string as UTF-8 without actually encoding it. This is handy in length-prefixed encodings like protocol buffers. Use BufferedSource.readUtf8CodePoint() to read a single variable-length code point, and BufferedSink.writeUtf8CodePoint() to write one. Golden Values Okio likes testing. The library itself is heavily tested, and it has features that are often helpful when testing application code. One pattern we\u2019ve found to be quite useful is \u201cgolden value\u201d testing. The goal of such tests is to confirm that data encoded with earlier versions of a program can safely be decoded by the current program. We\u2019ll illustrate this by encoding a value using Java Serialization. Though we must disclaim that Java Serialization is an awful encoding system and most programs should prefer other formats like JSON or protobuf! In any case, here\u2019s a method that takes an object, serializes it, and returns the result as a ByteString : private ByteString serialize ( Object o ) throws IOException { Buffer buffer = new Buffer (); try ( ObjectOutputStream objectOut = new ObjectOutputStream ( buffer . outputStream ())) { objectOut . writeObject ( o ); } return buffer . readByteString (); } There\u2019s a lot going on here. We create a buffer as a holding space for our serialized data. It\u2019s a convenient replacement for ByteArrayOutputStream . We ask the buffer for its output stream. Writes to a buffer or its output stream always append data to the end of the buffer. We create an ObjectOutputStream (the encoding API for Java serialization) and write our object. The try block takes care of closing the stream for us. Note that closing a buffer has no effect. Finally we read a byte string from the buffer. The readByteString() method allows us to specify how many bytes to read; here we don\u2019t specify a count in order to read the entire thing. Reads from a buffer always consume data from the front of the buffer. With our serialize() method handy we are ready to compute and print a golden value. Point point = new Point ( 8.0 , 15.0 ); ByteString pointBytes = serialize ( point ); System . out . println ( pointBytes . base64 ()); We print the ByteString as base64 because it\u2019s a compact format that\u2019s suitable for embedding in a test case. The program prints this: rO0ABXNyAB5va2lvLnNhbXBsZXMuR29sZGVuVmFsdWUkUG9pbnTdUW8rMji1IwIAAkQAAXhEAAF5eHBAIAAAAAAAAEAuAAAAAAAA That\u2019s our golden value! We can embed it in our test case using base64 again to convert it back into a ByteString : ByteString goldenBytes = ByteString . decodeBase64 ( rO0ABXNyAB5va2lvLnNhbXBsZ + XMuR29sZGVuVmFsdWUkUG9pbnTdUW8rMji1IwIAAkQAAXhEAAF5eHBAIAAAAAAAAEAuA + AAAAAAA ); The next step is to deserialize the ByteString back into our value class. This method reverses the serialize() method above: we append a byte string to a buffer then consume it using an ObjectInputStream : private Object deserialize ( ByteString byteString ) throws IOException , ClassNotFoundException { Buffer buffer = new Buffer (); buffer . write ( byteString ); try ( ObjectInputStream objectIn = new ObjectInputStream ( buffer . inputStream ())) { return objectIn . readObject (); } } Now we can test the decoder against the golden value: ByteString goldenBytes = ByteString . decodeBase64 ( rO0ABXNyAB5va2lvLnNhbXBsZ + XMuR29sZGVuVmFsdWUkUG9pbnTdUW8rMji1IwIAAkQAAXhEAAF5eHBAIAAAAAAAAEAuA + AAAAAAA ); Point decoded = ( Point ) deserialize ( goldenBytes ); assertEquals ( new Point ( 8.0 , 15.0 ), decoded ); With this test we can change the serialization of the Point class without breaking compatibility. Write a binary file Encoding a binary file is not unlike encoding a text file. Okio uses the same BufferedSink and BufferedSource bytes for both. This is handy for binary formats that include both byte and character data. Writing binary data is more hazardous than text because if you make a mistake it is often quite difficult to diagnose. Avoid such mistakes by being careful around these traps: The width of each field. This is the number of bytes used. Okio doesn t include a mechanism to emit partial bytes. If you need that, you\u2019ll need to do your own bit shifting and masking before writing. The endianness of each field. All fields that have more than one byte have endianness : whether the bytes are ordered most-significant to least (big endian) or least-significant to most (little endian). Okio uses the Le suffix for little-endian methods; methods without a suffix are big-endian. Signed vs. Unsigned. Java doesn\u2019t have unsigned primitive types (except for char !) so coping with this is often something that happens at the application layer. To make this a little easier Okio accepts int types for writeByte() and writeShort() . You can pass an \u201cunsigned\u201d byte like 255 and Okio will do the right thing. Method Width Endianness Value Encoded Value writeByte 1 3 03 writeShort 2 big 3 00 03 writeInt 4 big 3 00 00 00 03 writeLong 8 big 3 00 00 00 00 00 00 00 03 writeShortLe 2 little 3 03 00 writeIntLe 4 little 3 03 00 00 00 writeLongLe 8 little 3 03 00 00 00 00 00 00 00 writeByte 1 Byte.MAX_VALUE 7f writeShort 2 big Short.MAX_VALUE 7f ff writeInt 4 big Int.MAX_VALUE 7f ff ff ff writeLong 8 big Long.MAX_VALUE 7f ff ff ff ff ff ff ff writeShortLe 2 little Short.MAX_VALUE ff 7f writeIntLe 4 little Int.MAX_VALUE ff ff ff 7f writeLongLe 8 little Long.MAX_VALUE ff ff ff ff ff ff ff 7f This code encodes a bitmap following the BMP file format . void encode ( Bitmap bitmap , BufferedSink sink ) throws IOException { int height = bitmap . height (); int width = bitmap . width (); int bytesPerPixel = 3 ; int rowByteCountWithoutPadding = ( bytesPerPixel * width ); int rowByteCount = (( rowByteCountWithoutPadding + 3 ) / 4 ) * 4 ; int pixelDataSize = rowByteCount * height ; int bmpHeaderSize = 14 ; int dibHeaderSize = 40 ; // BMP Header sink . writeUtf8 ( BM ); // ID. sink . writeIntLe ( bmpHeaderSize + dibHeaderSize + pixelDataSize ); // File size. sink . writeShortLe ( 0 ); // Unused. sink . writeShortLe ( 0 ); // Unused. sink . writeIntLe ( bmpHeaderSize + dibHeaderSize ); // Offset of pixel data. // DIB Header sink . writeIntLe ( dibHeaderSize ); sink . writeIntLe ( width ); sink . writeIntLe ( height ); sink . writeShortLe ( 1 ); // Color plane count. sink . writeShortLe ( bytesPerPixel * Byte . SIZE ); sink . writeIntLe ( 0 ); // No compression. sink . writeIntLe ( 16 ); // Size of bitmap data including padding. sink . writeIntLe ( 2835 ); // Horizontal print resolution in pixels/meter. (72 dpi). sink . writeIntLe ( 2835 ); // Vertical print resolution in pixels/meter. (72 dpi). sink . writeIntLe ( 0 ); // Palette color count. sink . writeIntLe ( 0 ); // 0 important colors. // Pixel data. for ( int y = height - 1 ; y = 0 ; y -- ) { for ( int x = 0 ; x width ; x ++ ) { sink . writeByte ( bitmap . blue ( x , y )); sink . writeByte ( bitmap . green ( x , y )); sink . writeByte ( bitmap . red ( x , y )); } // Padding for 4-byte alignment. for ( int p = rowByteCountWithoutPadding ; p rowByteCount ; p ++ ) { sink . writeByte ( 0 ); } } } The trickiest part of this program is the format\u2019s required padding. The BMP format expects each row to begin on a 4-byte boundary so it is necessary to add zeros to maintain the alignment. Encoding other binary formats is usually quite similar. Some tips: Write tests with golden values! Confirming that your program emits the expected result can make debugging easier. Use Utf8.size() to compute the number of bytes of an encoded string. This is essential for length-prefixed formats. Use Float.floatToIntBits() and Double.doubleToLongBits() to encode floating point values. Communicate on a Socket Sending and receiving data over the network is a bit like writing and reading files. We use BufferedSink to encode output and BufferedSource to decode input. Like files, network protocols can be text, binary, or a mix of both. But there are also some substantial differences between the network and the filesystem. With a file you\u2019re either reading or writing but with the network you can do both! Some protocols handle this by taking turns: write a request, read a response, repeat. You can implement this kind of protocol with a single thread. In other protocols you may read and write simultaneously. Typically you\u2019ll want one dedicated thread for reading. For writing you can use either a dedicated thread or use synchronized so that multiple threads can share a sink. Okio\u2019s streams are not safe for concurrent use. Sinks buffer outbound data to minimize I/O operations. This is efficient but it means you must manually call flush() to transmit data. Typically message-oriented protocols flush after each message. Note that Okio will automatically flush when the buffered data exceeds some threshold. This is intended to save memory and you shouldn\u2019t rely on it for interactive protocols. Okio builds on java.io.Socket for connectivity. Create your socket as a server or as a client, then use Okio.source(Socket) to read and Okio.sink(Socket) to write. These APIs also work with SSLSocket . You should use SSL unless you have a very good reason not to! Cancel a socket from any thread by calling Socket.close() ; this will cause its sources and sinks to immediately fail with an IOException . You can also configure timeouts for all socket operations. You don\u2019t need a reference to the socket to adjust timeouts: Source and Sink expose timeouts directly. This API works even if the streams are decorated. As a complete example of networking with Okio we wrote a basic SOCKS proxy server. Some highlights: Socket fromSocket = ... BufferedSource fromSource = Okio . buffer ( Okio . source ( fromSocket )); BufferedSink fromSink = Okio . buffer ( Okio . sink ( fromSocket )); Creating sources and sinks for sockets is the same as creating them for files. Once you create a Source or Sink for a socket you must not use its InputStream or OutputStream , respectively. Buffer buffer = new Buffer (); for ( long byteCount ; ( byteCount = source . read ( buffer , 8192L )) != - 1 ; ) { sink . write ( buffer , byteCount ); sink . flush (); } The above loop copies data from the source to the sink, flushing after each read. If we didn\u2019t need the flushing we could replace this loop with a single call to BufferedSink.writeAll(Source) . The 8192 argument to read() is the maximum number of bytes to read before returning. We could have passed any value here, but we like 8 KiB because that\u2019s the largest value Okio can do in a single system call. Most of the time application code doesn\u2019t need to deal with such limits! int addressType = fromSource . readByte () 0xff ; int port = fromSource . readShort () 0xffff ; Okio uses signed types like byte and short , but often protocols want unsigned values. The bitwise operator is Java\u2019s preferred idiom to convert a signed value into an unsigned value. Here\u2019s a cheat sheet for bytes, shorts, and ints: Type Signed Range Unsigned Range Signed to Unsigned byte -128..127 0..255 int u = s 0xff; short -32,768..32,767 0..65,535 int u = s 0xffff; int -2,147,483,648..2,147,483,647 0..4,294,967,295 long u = s 0xffffffffL; Java has no primitive type that can represent unsigned longs. Hashing We\u2019re bombarded by hashing in our lives as Java programmers. Early on we re introduced to the hashCode() method, something we know we need to override otherwise unforeseen bad things happen. Later we\u2019re shown LinkedHashMap and its friends. These build on that hashCode() method to organize data for fast retrieval. Elsewhere we have cryptographic hash functions. These get used all over the place. HTTPS certificates, Git commits, BitTorrent integrity checking, and Blockchain blocks all use cryptographic hashes. Good use of hashes can improve the performance, privacy, security, and simplicity of an application. Each cryptographic hash function accepts a variable-length stream of input bytes and produces a fixed-length byte string value called the \u201chash\u201d. Hash functions have these important qualities: Deterministic: each input always produces the same output. Uniform: each output byte string is equally likely. It is very difficult to find or create pairs of different inputs that yield the same output. This is called a \u201ccollision\u201d. Non-reversible: knowing an output doesn t help you to find the input. Note that if you know some possible inputs you can hash them to see if their hashes match. Well-known: the hash is implemented everywhere and rigorously understood. Good hash functions are very cheap to compute (dozens of microseconds) and expensive to reverse (quintillions of millenia). Steady advances in computing and mathematics have caused once-great hash functions to become inexpensive to reverse. When choosing a hash function, beware that not all are created equal! Okio supports these well-known cryptographic hash functions: MD5 : a 128-bit (16 byte) cryptographic hash. It is both insecure and obsolete because it is inexpensive to reverse! This hash is offered because it is popular and convenient for use in legacy systems that are not security-sensitive. SHA-1 : a 160-bit (20 byte) cryptographic hash. It was recently demonstrated that it is feasible to create SHA-1 collisions. Consider upgrading from SHA-1 to SHA-256. SHA-256 : a 256-bit (32 byte) cryptographic hash. SHA-256 is widely understood and expensive to reverse. This is the hash most systems should use. SHA-512 : a 512-bit (64 byte) cryptographic hash. It is expensive to reverse. Each hash creates a ByteString of the specified length. Use hex() to get the conventional human-readable form. Or leave it as a ByteString because that\u2019s a convenient model type! Okio can produce cryptographic hashes from byte strings: ByteString byteString = readByteString(new File( README.md )); System.out.println( md5: + byteString.md5().hex()); System.out.println( sha1: + byteString.sha1().hex()); System.out.println( sha256: + byteString.sha256().hex()); System.out.println( sha512: + byteString.sha512().hex()); From buffers: Buffer buffer = readBuffer(new File( README.md )); System.out.println( md5: + buffer.md5().hex()); System.out.println( sha1: + buffer.sha1().hex()); System.out.println( sha256: + buffer.sha256().hex()); System.out.println( sha512: + buffer.sha512().hex()); While streaming from a source: try (HashingSink hashingSink = HashingSink.sha256(Okio.blackhole()); BufferedSource source = Okio.buffer(Okio.source(file))) { source.readAll(hashingSink); System.out.println( sha256: + hashingSink.hash().hex()); } While streaming to a sink: try (HashingSink hashingSink = HashingSink.sha256(Okio.blackhole()); BufferedSink sink = Okio.buffer(hashingSink); Source source = Okio.source(file)) { sink.writeAll(source); sink.close(); // Emit anything buffered. System.out.println( sha256: + hashingSink.hash().hex()); } Okio also supports HMAC (Hash Message Authentication Code) which combines a secret and a hash. Applications use HMAC for data integrity and authentication. ByteString secret = ByteString.decodeHex( 7065616e7574627574746572 ); System.out.println( hmacSha256: + byteString.hmacSha256(secret).hex()); As with hashing, you can generate an HMAC from a ByteString , Buffer , HashingSource , and HashingSink . Note that Okio doesn\u2019t implement HMAC for MD5. Okio uses Java\u2019s java.security.MessageDigest for cryptographic hashes and javax.crypto.Mac for HMAC. Releases Our change log has release history. implementation ( com.squareup.okio:okio:2.5.0 ) Snapshot builds are also available repositories { maven { url = uri ( https://oss.sonatype.org/content/repositories/snapshots/ ) } } dependencies { implementation ( com.squareup.okio:okio:2.5.0 ) } R8 / ProGuard If you are using R8 or ProGuard add the options from this file . License Copyright 2013 Square, Inc. Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#okio","text":"Okio is a library that complements java.io and java.nio to make it much easier to access, store, and process your data. It started as a component of OkHttp , the capable HTTP client included in Android. It s well-exercised and ready to solve new problems.","title":"Okio"},{"location":"#bytestrings-and-buffers","text":"Okio is built around two types that pack a lot of capability into a straightforward API: ByteString is an immutable sequence of bytes. For character data, String is fundamental. ByteString is String s long-lost brother, making it easy to treat binary data as a value. This class is ergonomic: it knows how to encode and decode itself as hex, base64, and UTF-8. Buffer is a mutable sequence of bytes. Like ArrayList , you don t need to size your buffer in advance. You read and write buffers as a queue: write data to the end and read it from the front. There s no obligation to manage positions, limits, or capacities. Internally, ByteString and Buffer do some clever things to save CPU and memory. If you encode a UTF-8 string as a ByteString , it caches a reference to that string so that if you decode it later, there s no work to do. Buffer is implemented as a linked list of segments. When you move data from one buffer to another, it reassigns ownership of the segments rather than copying the data across. This approach is particularly helpful for multithreaded programs: a thread that talks to the network can exchange data with a worker thread without any copying or ceremony.","title":"ByteStrings and Buffers"},{"location":"#sources-and-sinks","text":"An elegant part of the java.io design is how streams can be layered for transformations like encryption and compression. Okio includes its own stream types called Source and Sink that work like InputStream and OutputStream , but with some key differences: Timeouts. The streams provide access to the timeouts of the underlying I/O mechanism. Unlike the java.io socket streams, both read() and write() calls honor timeouts. Easy to implement. Source declares three methods: read() , close() , and timeout() . There are no hazards like available() or single-byte reads that cause correctness and performance surprises. Easy to use. Although implementations of Source and Sink have only three methods to write, callers are given a rich API with the BufferedSource and BufferedSink interfaces. These interfaces give you everything you need in one place. No artificial distinction between byte streams and char streams. It s all data. Read and write it as bytes, UTF-8 strings, big-endian 32-bit integers, little-endian shorts; whatever you want. No more InputStreamReader ! Easy to test. The Buffer class implements both BufferedSource and BufferedSink so your test code is simple and clear. Sources and sinks interoperate with InputStream and OutputStream . You can view any Source as an InputStream , and you can view any InputStream as a Source . Similarly for Sink and OutputStream .","title":"Sources and Sinks"},{"location":"#presentations","text":"A Few \u201cOk\u201d Libraries ( slides ): An introduction to Okio and three libraries written with it. Decoding the Secrets of Binary Data ( slides ): How data encoding works and how Okio does it. Ok Multiplatform! ( slides ): How we changed Okio\u2019s implementation language from Java to Kotlin.","title":"Presentations"},{"location":"#recipes","text":"We ve written some recipes that demonstrate how to solve common problems with Okio. Read through them to learn about how everything works together. Cut-and-paste these examples freely; that s what they re for.","title":"Recipes"},{"location":"#read-a-text-file-line-by-line","text":"Use Okio.source(File) to open a source stream to read a file. The returned Source interface is very small and has limited uses. Instead we wrap the source with a buffer. This has two benefits: It makes the API more powerful. Instead of the basic methods offered by Source , BufferedSource has dozens of methods to address most common problems concisely. It makes your program run faster. Buffering allows Okio to get more done with fewer I/O operations. Each Source that is opened needs to be closed. The code that opens the stream is responsible for making sure it is closed. Here we use Java s try blocks to close our sources automatically. public void readLines ( File file ) throws IOException { try ( Source fileSource = Okio . source ( file ); BufferedSource bufferedSource = Okio . buffer ( fileSource )) { while ( true ) { String line = bufferedSource . readUtf8Line (); if ( line == null ) break ; if ( line . contains ( square )) { System . out . println ( line ); } } } } The readUtf8Line() API reads all of the data until the next line delimiter \u2013 either \\n , \\r\\n , or the end of the file. It returns that data as a string, omitting the delimiter at the end. When it encounters empty lines the method will return an empty string. If there isn\u2019t any more data to read it will return null. The above program can be written more compactly by inlining the fileSource variable and by using a fancy for loop instead of a while : public void readLines ( File file ) throws IOException { try ( BufferedSource source = Okio . buffer ( Okio . source ( file ))) { for ( String line ; ( line = source . readUtf8Line ()) != null ; ) { if ( line . contains ( square )) { System . out . println ( line ); } } } } The readUtf8Line() method is suitable for parsing most files. For certain use-cases you may also consider readUtf8LineStrict() . It is similar but it requires that each line is terminated by \\n or \\r\\n . If it encounters the end of the file before that it will throw an EOFException . The strict variant also permits a byte limit to defend against malformed input. public void readLines ( File file ) throws IOException { try ( BufferedSource source = Okio . buffer ( Okio . source ( file ))) { while ( ! source . exhausted ()) { String line = source . readUtf8LineStrict ( 1024L ); if ( line . contains ( square )) { System . out . println ( line ); } } } }","title":"Read a text file line-by-line"},{"location":"#write-a-text-file","text":"Above we used a Source and a BufferedSource to read a file. To write, we use a Sink and a BufferedSink . The advantages of buffering are the same: a more capable API and better performance. public void writeEnv ( File file ) throws IOException { try ( Sink fileSink = Okio . sink ( file ); BufferedSink bufferedSink = Okio . buffer ( fileSink )) { for ( Map . Entry String , String entry : System . getenv (). entrySet ()) { bufferedSink . writeUtf8 ( entry . getKey ()); bufferedSink . writeUtf8 ( = ); bufferedSink . writeUtf8 ( entry . getValue ()); bufferedSink . writeUtf8 ( \\n ); } } } There isn\u2019t an API to write a line of input; instead we manually insert our own newline character. Most programs should hardcode \"\\n\" as the newline character. In rare situations you may use System.lineSeparator() instead of \"\\n\" : it returns \"\\r\\n\" on Windows and \"\\n\" everywhere else. We can write the above program more compactly by inlining the fileSink variable and by taking advantage of method chaining: public void writeEnv ( File file ) throws IOException { try ( BufferedSink sink = Okio . buffer ( Okio . sink ( file ))) { for ( Map . Entry String , String entry : System . getenv (). entrySet ()) { sink . writeUtf8 ( entry . getKey ()) . writeUtf8 ( = ) . writeUtf8 ( entry . getValue ()) . writeUtf8 ( \\n ); } } } In the above code we make four calls to writeUtf8() . Making four calls is more efficient than the code below because the VM doesn\u2019t have to create and garbage collect a temporary string. sink . writeUtf8 ( entry . getKey () + = + entry . getValue () + \\n ); // Slower!","title":"Write a text file"},{"location":"#utf-8","text":"In the above APIs you can see that Okio really likes UTF-8. Early computer systems suffered many incompatible character encodings: ISO-8859-1, ShiftJIS, ASCII, EBCDIC, etc. Writing software to support multiple character sets was awful and we didn\u2019t even have emoji! Today we re lucky that the world has standardized on UTF-8 everywhere, with some rare uses of other charsets in legacy systems. If you need another character set, readString() and writeString() are there for you. These methods require that you specify a character set. Otherwise you may accidentally create data that is only readable by the local computer. Most programs should use the UTF-8 methods only. When encoding strings you need to be mindful of the different ways that strings are represented and encoded. When a glyph has an accent or another adornment it may be represented as a single complex code point ( \u00e9 ) or as a simple code point ( e ) followed by its modifiers ( \u00b4 ). When the entire glyph is a single code point that\u2019s called NFC ; when it\u2019s multiple it\u2019s NFD . Though we use UTF-8 whenever we read or write strings in I/O, when they are in memory Java Strings use an obsolete character encoding called UTF-16. It is a bad encoding because it uses a 16-bit char for most characters, but some don\u2019t fit. In particular, most emoji use two Java chars. This is problematic because String.length() returns a surprising result: the number of UTF-16 chars and not the natural number of glyphs. Caf\u00e9 \ud83c\udf69 Cafe\u0301 \ud83c\udf69 Form NFC NFD Code Points c a f \u00e9 \u2423 \ud83c\udf69 c a f e \u00b4 \u2423 \ud83c\udf69 UTF-8 bytes 43 61 66 c3a9 20 f09f8da9 43 61 66 65 cc81 20 f09f8da9 String.codePointCount 6 7 String.length 7 8 Utf8.size 10 11 For the most part Okio lets you ignore these problems and focus on your data. But when you need them, there are convenient APIs for dealing with low-level UTF-8 strings. Use Utf8.size() to count the number of bytes required to encode a string as UTF-8 without actually encoding it. This is handy in length-prefixed encodings like protocol buffers. Use BufferedSource.readUtf8CodePoint() to read a single variable-length code point, and BufferedSink.writeUtf8CodePoint() to write one.","title":"UTF-8"},{"location":"#golden-values","text":"Okio likes testing. The library itself is heavily tested, and it has features that are often helpful when testing application code. One pattern we\u2019ve found to be quite useful is \u201cgolden value\u201d testing. The goal of such tests is to confirm that data encoded with earlier versions of a program can safely be decoded by the current program. We\u2019ll illustrate this by encoding a value using Java Serialization. Though we must disclaim that Java Serialization is an awful encoding system and most programs should prefer other formats like JSON or protobuf! In any case, here\u2019s a method that takes an object, serializes it, and returns the result as a ByteString : private ByteString serialize ( Object o ) throws IOException { Buffer buffer = new Buffer (); try ( ObjectOutputStream objectOut = new ObjectOutputStream ( buffer . outputStream ())) { objectOut . writeObject ( o ); } return buffer . readByteString (); } There\u2019s a lot going on here. We create a buffer as a holding space for our serialized data. It\u2019s a convenient replacement for ByteArrayOutputStream . We ask the buffer for its output stream. Writes to a buffer or its output stream always append data to the end of the buffer. We create an ObjectOutputStream (the encoding API for Java serialization) and write our object. The try block takes care of closing the stream for us. Note that closing a buffer has no effect. Finally we read a byte string from the buffer. The readByteString() method allows us to specify how many bytes to read; here we don\u2019t specify a count in order to read the entire thing. Reads from a buffer always consume data from the front of the buffer. With our serialize() method handy we are ready to compute and print a golden value. Point point = new Point ( 8.0 , 15.0 ); ByteString pointBytes = serialize ( point ); System . out . println ( pointBytes . base64 ()); We print the ByteString as base64 because it\u2019s a compact format that\u2019s suitable for embedding in a test case. The program prints this: rO0ABXNyAB5va2lvLnNhbXBsZXMuR29sZGVuVmFsdWUkUG9pbnTdUW8rMji1IwIAAkQAAXhEAAF5eHBAIAAAAAAAAEAuAAAAAAAA That\u2019s our golden value! We can embed it in our test case using base64 again to convert it back into a ByteString : ByteString goldenBytes = ByteString . decodeBase64 ( rO0ABXNyAB5va2lvLnNhbXBsZ + XMuR29sZGVuVmFsdWUkUG9pbnTdUW8rMji1IwIAAkQAAXhEAAF5eHBAIAAAAAAAAEAuA + AAAAAAA ); The next step is to deserialize the ByteString back into our value class. This method reverses the serialize() method above: we append a byte string to a buffer then consume it using an ObjectInputStream : private Object deserialize ( ByteString byteString ) throws IOException , ClassNotFoundException { Buffer buffer = new Buffer (); buffer . write ( byteString ); try ( ObjectInputStream objectIn = new ObjectInputStream ( buffer . inputStream ())) { return objectIn . readObject (); } } Now we can test the decoder against the golden value: ByteString goldenBytes = ByteString . decodeBase64 ( rO0ABXNyAB5va2lvLnNhbXBsZ + XMuR29sZGVuVmFsdWUkUG9pbnTdUW8rMji1IwIAAkQAAXhEAAF5eHBAIAAAAAAAAEAuA + AAAAAAA ); Point decoded = ( Point ) deserialize ( goldenBytes ); assertEquals ( new Point ( 8.0 , 15.0 ), decoded ); With this test we can change the serialization of the Point class without breaking compatibility.","title":"Golden Values"},{"location":"#write-a-binary-file","text":"Encoding a binary file is not unlike encoding a text file. Okio uses the same BufferedSink and BufferedSource bytes for both. This is handy for binary formats that include both byte and character data. Writing binary data is more hazardous than text because if you make a mistake it is often quite difficult to diagnose. Avoid such mistakes by being careful around these traps: The width of each field. This is the number of bytes used. Okio doesn t include a mechanism to emit partial bytes. If you need that, you\u2019ll need to do your own bit shifting and masking before writing. The endianness of each field. All fields that have more than one byte have endianness : whether the bytes are ordered most-significant to least (big endian) or least-significant to most (little endian). Okio uses the Le suffix for little-endian methods; methods without a suffix are big-endian. Signed vs. Unsigned. Java doesn\u2019t have unsigned primitive types (except for char !) so coping with this is often something that happens at the application layer. To make this a little easier Okio accepts int types for writeByte() and writeShort() . You can pass an \u201cunsigned\u201d byte like 255 and Okio will do the right thing. Method Width Endianness Value Encoded Value writeByte 1 3 03 writeShort 2 big 3 00 03 writeInt 4 big 3 00 00 00 03 writeLong 8 big 3 00 00 00 00 00 00 00 03 writeShortLe 2 little 3 03 00 writeIntLe 4 little 3 03 00 00 00 writeLongLe 8 little 3 03 00 00 00 00 00 00 00 writeByte 1 Byte.MAX_VALUE 7f writeShort 2 big Short.MAX_VALUE 7f ff writeInt 4 big Int.MAX_VALUE 7f ff ff ff writeLong 8 big Long.MAX_VALUE 7f ff ff ff ff ff ff ff writeShortLe 2 little Short.MAX_VALUE ff 7f writeIntLe 4 little Int.MAX_VALUE ff ff ff 7f writeLongLe 8 little Long.MAX_VALUE ff ff ff ff ff ff ff 7f This code encodes a bitmap following the BMP file format . void encode ( Bitmap bitmap , BufferedSink sink ) throws IOException { int height = bitmap . height (); int width = bitmap . width (); int bytesPerPixel = 3 ; int rowByteCountWithoutPadding = ( bytesPerPixel * width ); int rowByteCount = (( rowByteCountWithoutPadding + 3 ) / 4 ) * 4 ; int pixelDataSize = rowByteCount * height ; int bmpHeaderSize = 14 ; int dibHeaderSize = 40 ; // BMP Header sink . writeUtf8 ( BM ); // ID. sink . writeIntLe ( bmpHeaderSize + dibHeaderSize + pixelDataSize ); // File size. sink . writeShortLe ( 0 ); // Unused. sink . writeShortLe ( 0 ); // Unused. sink . writeIntLe ( bmpHeaderSize + dibHeaderSize ); // Offset of pixel data. // DIB Header sink . writeIntLe ( dibHeaderSize ); sink . writeIntLe ( width ); sink . writeIntLe ( height ); sink . writeShortLe ( 1 ); // Color plane count. sink . writeShortLe ( bytesPerPixel * Byte . SIZE ); sink . writeIntLe ( 0 ); // No compression. sink . writeIntLe ( 16 ); // Size of bitmap data including padding. sink . writeIntLe ( 2835 ); // Horizontal print resolution in pixels/meter. (72 dpi). sink . writeIntLe ( 2835 ); // Vertical print resolution in pixels/meter. (72 dpi). sink . writeIntLe ( 0 ); // Palette color count. sink . writeIntLe ( 0 ); // 0 important colors. // Pixel data. for ( int y = height - 1 ; y = 0 ; y -- ) { for ( int x = 0 ; x width ; x ++ ) { sink . writeByte ( bitmap . blue ( x , y )); sink . writeByte ( bitmap . green ( x , y )); sink . writeByte ( bitmap . red ( x , y )); } // Padding for 4-byte alignment. for ( int p = rowByteCountWithoutPadding ; p rowByteCount ; p ++ ) { sink . writeByte ( 0 ); } } } The trickiest part of this program is the format\u2019s required padding. The BMP format expects each row to begin on a 4-byte boundary so it is necessary to add zeros to maintain the alignment. Encoding other binary formats is usually quite similar. Some tips: Write tests with golden values! Confirming that your program emits the expected result can make debugging easier. Use Utf8.size() to compute the number of bytes of an encoded string. This is essential for length-prefixed formats. Use Float.floatToIntBits() and Double.doubleToLongBits() to encode floating point values.","title":"Write a binary file"},{"location":"#communicate-on-a-socket","text":"Sending and receiving data over the network is a bit like writing and reading files. We use BufferedSink to encode output and BufferedSource to decode input. Like files, network protocols can be text, binary, or a mix of both. But there are also some substantial differences between the network and the filesystem. With a file you\u2019re either reading or writing but with the network you can do both! Some protocols handle this by taking turns: write a request, read a response, repeat. You can implement this kind of protocol with a single thread. In other protocols you may read and write simultaneously. Typically you\u2019ll want one dedicated thread for reading. For writing you can use either a dedicated thread or use synchronized so that multiple threads can share a sink. Okio\u2019s streams are not safe for concurrent use. Sinks buffer outbound data to minimize I/O operations. This is efficient but it means you must manually call flush() to transmit data. Typically message-oriented protocols flush after each message. Note that Okio will automatically flush when the buffered data exceeds some threshold. This is intended to save memory and you shouldn\u2019t rely on it for interactive protocols. Okio builds on java.io.Socket for connectivity. Create your socket as a server or as a client, then use Okio.source(Socket) to read and Okio.sink(Socket) to write. These APIs also work with SSLSocket . You should use SSL unless you have a very good reason not to! Cancel a socket from any thread by calling Socket.close() ; this will cause its sources and sinks to immediately fail with an IOException . You can also configure timeouts for all socket operations. You don\u2019t need a reference to the socket to adjust timeouts: Source and Sink expose timeouts directly. This API works even if the streams are decorated. As a complete example of networking with Okio we wrote a basic SOCKS proxy server. Some highlights: Socket fromSocket = ... BufferedSource fromSource = Okio . buffer ( Okio . source ( fromSocket )); BufferedSink fromSink = Okio . buffer ( Okio . sink ( fromSocket )); Creating sources and sinks for sockets is the same as creating them for files. Once you create a Source or Sink for a socket you must not use its InputStream or OutputStream , respectively. Buffer buffer = new Buffer (); for ( long byteCount ; ( byteCount = source . read ( buffer , 8192L )) != - 1 ; ) { sink . write ( buffer , byteCount ); sink . flush (); } The above loop copies data from the source to the sink, flushing after each read. If we didn\u2019t need the flushing we could replace this loop with a single call to BufferedSink.writeAll(Source) . The 8192 argument to read() is the maximum number of bytes to read before returning. We could have passed any value here, but we like 8 KiB because that\u2019s the largest value Okio can do in a single system call. Most of the time application code doesn\u2019t need to deal with such limits! int addressType = fromSource . readByte () 0xff ; int port = fromSource . readShort () 0xffff ; Okio uses signed types like byte and short , but often protocols want unsigned values. The bitwise operator is Java\u2019s preferred idiom to convert a signed value into an unsigned value. Here\u2019s a cheat sheet for bytes, shorts, and ints: Type Signed Range Unsigned Range Signed to Unsigned byte -128..127 0..255 int u = s 0xff; short -32,768..32,767 0..65,535 int u = s 0xffff; int -2,147,483,648..2,147,483,647 0..4,294,967,295 long u = s 0xffffffffL; Java has no primitive type that can represent unsigned longs.","title":"Communicate on a Socket"},{"location":"#hashing","text":"We\u2019re bombarded by hashing in our lives as Java programmers. Early on we re introduced to the hashCode() method, something we know we need to override otherwise unforeseen bad things happen. Later we\u2019re shown LinkedHashMap and its friends. These build on that hashCode() method to organize data for fast retrieval. Elsewhere we have cryptographic hash functions. These get used all over the place. HTTPS certificates, Git commits, BitTorrent integrity checking, and Blockchain blocks all use cryptographic hashes. Good use of hashes can improve the performance, privacy, security, and simplicity of an application. Each cryptographic hash function accepts a variable-length stream of input bytes and produces a fixed-length byte string value called the \u201chash\u201d. Hash functions have these important qualities: Deterministic: each input always produces the same output. Uniform: each output byte string is equally likely. It is very difficult to find or create pairs of different inputs that yield the same output. This is called a \u201ccollision\u201d. Non-reversible: knowing an output doesn t help you to find the input. Note that if you know some possible inputs you can hash them to see if their hashes match. Well-known: the hash is implemented everywhere and rigorously understood. Good hash functions are very cheap to compute (dozens of microseconds) and expensive to reverse (quintillions of millenia). Steady advances in computing and mathematics have caused once-great hash functions to become inexpensive to reverse. When choosing a hash function, beware that not all are created equal! Okio supports these well-known cryptographic hash functions: MD5 : a 128-bit (16 byte) cryptographic hash. It is both insecure and obsolete because it is inexpensive to reverse! This hash is offered because it is popular and convenient for use in legacy systems that are not security-sensitive. SHA-1 : a 160-bit (20 byte) cryptographic hash. It was recently demonstrated that it is feasible to create SHA-1 collisions. Consider upgrading from SHA-1 to SHA-256. SHA-256 : a 256-bit (32 byte) cryptographic hash. SHA-256 is widely understood and expensive to reverse. This is the hash most systems should use. SHA-512 : a 512-bit (64 byte) cryptographic hash. It is expensive to reverse. Each hash creates a ByteString of the specified length. Use hex() to get the conventional human-readable form. Or leave it as a ByteString because that\u2019s a convenient model type! Okio can produce cryptographic hashes from byte strings: ByteString byteString = readByteString(new File( README.md )); System.out.println( md5: + byteString.md5().hex()); System.out.println( sha1: + byteString.sha1().hex()); System.out.println( sha256: + byteString.sha256().hex()); System.out.println( sha512: + byteString.sha512().hex()); From buffers: Buffer buffer = readBuffer(new File( README.md )); System.out.println( md5: + buffer.md5().hex()); System.out.println( sha1: + buffer.sha1().hex()); System.out.println( sha256: + buffer.sha256().hex()); System.out.println( sha512: + buffer.sha512().hex()); While streaming from a source: try (HashingSink hashingSink = HashingSink.sha256(Okio.blackhole()); BufferedSource source = Okio.buffer(Okio.source(file))) { source.readAll(hashingSink); System.out.println( sha256: + hashingSink.hash().hex()); } While streaming to a sink: try (HashingSink hashingSink = HashingSink.sha256(Okio.blackhole()); BufferedSink sink = Okio.buffer(hashingSink); Source source = Okio.source(file)) { sink.writeAll(source); sink.close(); // Emit anything buffered. System.out.println( sha256: + hashingSink.hash().hex()); } Okio also supports HMAC (Hash Message Authentication Code) which combines a secret and a hash. Applications use HMAC for data integrity and authentication. ByteString secret = ByteString.decodeHex( 7065616e7574627574746572 ); System.out.println( hmacSha256: + byteString.hmacSha256(secret).hex()); As with hashing, you can generate an HMAC from a ByteString , Buffer , HashingSource , and HashingSink . Note that Okio doesn\u2019t implement HMAC for MD5. Okio uses Java\u2019s java.security.MessageDigest for cryptographic hashes and javax.crypto.Mac for HMAC.","title":"Hashing"},{"location":"#releases","text":"Our change log has release history. implementation ( com.squareup.okio:okio:2.5.0 ) Snapshot builds are also available repositories { maven { url = uri ( https://oss.sonatype.org/content/repositories/snapshots/ ) } } dependencies { implementation ( com.squareup.okio:okio:2.5.0 ) }","title":"Releases"},{"location":"#r8-proguard","text":"If you are using R8 or ProGuard add the options from this file .","title":"R8 / ProGuard"},{"location":"#license","text":"Copyright 2013 Square, Inc. Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log Version 2.5.0 2020-03-20 New: Upgrade to Kotlin 1.3.70. Version 2.4.3 2019-12-20 New: Upgrade to Kotlin 1.3.61. Version 2.4.2 2019-12-11 Fix: Don t crash when an InputStream source is exhausted exactly at a buffer segment boundary. We had a bug where a sequence of reads could violate a buffer s invariants, and this could result in a crash when subsequent reads encountered an unexpected empty segment. Version 1.17.5 2019-12-11 Fix: Don t crash when an InputStream source is exhausted exactly at a buffer segment boundary. We had a bug where a sequence of reads could violate a buffer s invariants, and this could result in a crash when subsequent reads encountered an unexpected empty segment. Version 2.4.1 2019-10-04 Fix: Don t cache hash code and UTF-8 string in ByteString on Kotlin/Native which prevented freezing. Version 2.4.0 2019-08-26 New: Upgrade to Kotlin 1.3.50. Version 2.3.0 2019-07-29 This release changes our build from Kotlin-JVM to Kotlin-multiplatform (which includes JVM). Both native and JavaScript platforms are unstable preview releases and subject to backwards-incompatible changes in forthcoming releases. To try Okio in a multiplatform project use this Maven coordinate: api ( com . squareup . okio : okio - multiplatform : 2.3 . 0 ) You\u2019ll also need to enable Gradle metadata in your project s settings. The artifact name for JVM projects has not changed. New: Upgrade to Kotlin 1.3.40. Fix: Use Gradle api instead of implementation for the kotlin-stdlib dependency. Fix: Don t block unless strictly necessary in BufferedSource.peek() . Version 1.17.4 2019-04-29 Fix: Don t block unless strictly necessary in BufferedSource.peek() . Version 2.2.2 2019-01-28 Fix: Make Pipe.fold() close the underlying sink when necessary. Version 1.17.3 2019-01-28 Fix: Make Pipe.fold() close the underlying sink when necessary. Version 1.17.2 2019-01-17 Fix: Make Pipe.fold() flush the underlying sink. Version 2.2.1 2019-01-17 Fix: Make Pipe.fold() flush the underlying sink. Version 2.2.0 2019-01-16 New: Throttler limits sources and sinks to a maximum desired throughput. Multiple sources and sinks can be attached to the same throttler and their combined throughput will not exceed the desired throughput. Multiple throttlers can also be used on the same source or sink and they will all be honored. New: Pipe.fold() replaces the actively-readable Source with a passively-writable Sink . This can be used to forward one sink to a target that is initially undetermined. New: Optimize performance of ByteStrings created with Buffer.snapshot() . Version 1.17.1 2019-01-16 Fix: Make the newly-backported Pipe.fold() public. Version 1.17.0 2019-01-16 New: Backport Pipe.fold() to Okio 1.x. Version 1.16.0 2018-10-08 New: Backport BufferedSource.peek() and BufferedSource.getBuffer() to Okio 1.x. Fix: Enforce timeouts when closing AsyncTimeout sources. Version 2.1.0 2018-09-22 New: BufferedSource.peek() returns another BufferedSource that reads ahead on the current source. Use this to process the same data multiple times. New: Deprecate BufferedSource.buffer() , replacing it with either BufferedSource.getBuffer() (in Java) or BufferedSource.buffer (in Kotlin). We have done likewise for BufferedSink . When we introduced the new extension method Source.buffer() in Okio 2.0 we inadvertently collided with an existing method. This fixes that. New: Improve performance of Buffer.writeUtf8() . This comes alongside initial implementation of UTF-8 encoding and decoding in JavaScript which uses XOR masks for great performance. Version 2.0.0 2018-08-27 This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x. We ve also added APIs to ease migration for Kotlin users. They use Kotlin s @Deprecated annotation to help you change call sites from the 1.x style to the 2.x style. Version 2.0.0-RC1 2018-07-26 Okio 2 is a major release that upgrades the library s implementation language from Java to Kotlin. Okio 2.x is binary-compatible with Okio 1.x and does not change any behavior. Classes and .jar files compiled against 1.x can be used with 2.x without recompiling. Okio 2.x is .java source compatible with Okio 1.x in all but one corner case. In Okio 1.x Buffer would throw an unchecked IllegalStateException when attempting to read more bytes than available. Okio 2.x now throws a checked EOFException in this case. This is now consistent with the behavior of its BufferedSource interface. Java callers that don t already catch IOException will now need to. Okio 2.x is .kt source-incompatible with Okio 1.x. This release adopts Kotlin idioms where they are available. Java Kotlin Idiom Buffer.getByte() operator fun Buffer.get() operator function Buffer.size() val Buffer.size val ByteString.decodeBase64(String) fun String.decodeBase64() extension function ByteString.decodeHex(String) fun String.decodeHex() extension function ByteString.encodeString(String, Charset) fun String.encode(Charset) extension function ByteString.encodeUtf8(String) fun String.encodeUtf8() extension function ByteString.getByte() operator fun ByteString.get() operator function ByteString.of(ByteBuffer) fun ByteBuffer.toByteString() extension function ByteString.of(byte[], int, int) fun ByteArray.toByteString() extension function ByteString.read(InputStream, int) fun InputStream.readByteString(Int) extension function ByteString.size() val ByteString.size val DeflaterSink(Sink) fun Sink.deflater() extension function ForwardingSink.delegate() val ForwardingSink.delegate val ForwardingSource.delegate() val ForwardingSource.delegate val GzipSink(Sink, Deflater) fun Sink.gzip() extension function GzipSink.deflater() val GzipSink.deflater val GzipSource(Source) fun Source.gzip() extension function HashingSink.hash() val HashingSink.hash val HashingSource.hash() val HashingSource.hash val InflaterSink(Source) fun Source.inflater() extension function Okio.appendingSink(File) fun File.appendingSink() extension function Okio.blackhole() fun blackholeSink() top level function Okio.buffer(Sink) fun Sink.buffer() extension function Okio.buffer(Source) fun Source.buffer() extension function Okio.sink(File) fun File.sink() extension function Okio.sink(OutputStream) fun OutputStream.sink() extension function Okio.sink(Path) fun Path.sink() extension function Okio.sink(Socket) fun Socket.sink() extension function Okio.source(File) fun File.source() extension function Okio.source(InputStream) fun InputStream.source() extension function Okio.source(Path) fun Path.source() extension function Okio.source(Socket) fun Socket.source() extension function Pipe.sink() val Pipe.sink val Pipe.source() val Pipe.source val Utf8.size(String) fun String.utf8Size() extension function Okio 2.x has similar performance to Okio 1.x. We benchmarked both versions to find potential performance regressions. We found one regression and fixed it: we were using == instead of === . Other changes in this release: New: Add a dependency on kotlin-stdlib. Okio s transitive dependencies grow from none in 1.x to three in 2.x. These are kotlin-stdlib (939 KiB), kotlin-stdlib-common (104 KiB), and JetBrains annotations (17 KiB). New: Change Okio to build with Gradle instead of Maven. Version 1.15.0 2018-07-18 New: Trie-based Buffer.select() . This improves performance when selecting among large lists of options. Fix: Retain interrupted state when throwing InterruptedIOException . Version 1.14.0 2018-02-11 New: Buffer.UnsafeCursor provides direct access to Okio internals. This API is like Okio s version of Java reflection: it s a very powerful API that can be used for great things and dangerous things alike. The documentation is extensive and anyone using it should review it carefully before proceeding! New: Change BufferedSource to implement java.nio.ReadableByteChannel and BufferedSink to implement java.nio.WritableByteChannel . Now it s a little easier to interop between Okio and NIO. New: Automatic module name of okio for use with the Java Platform Module System. New: Optimize Buffer.getByte() to search backwards when doing so will be more efficient. Fix: Honor the requested byte count in InflaterSource . Previously this class could return more bytes than requested. Fix: Improve a performance bug in AsyncTimeout.sink().write() . Version 1.13.0 2017-05-12 Okio now uses @Nullable to annotate all possibly-null values. We ve added a compile-time dependency on the JSR 305 annotations. This is a provided dependency and does not need to be included in your build configuration, .jar file, or .apk . We use @ParametersAreNonnullByDefault and all parameters and return types are never null unless explicitly annotated @Nullable . Warning: this release is source-incompatible for Kotlin users. Nullability was previously ambiguous and lenient but now the compiler will enforce strict null checks. Version 1.12.0 2017-04-11 Fix: Change Pipe s sink.flush() to not block. Previously closing a pipe s sink would block until the source had been exhausted. In practice this blocked the caller for no benefit. Fix: Change writeUtf8CodePoint() to emit ? for partial surrogates. The previous behavior was inconsistent: given a malformed string with a partial surrogate, writeUtf8() emitted ? but writeUtf8CodePoint() threw an IllegalArgumentException . Most applications will never encounter partial surrogates, but for those that do this behavior was unexpected. New: Allow length of readUtf8LineStrict() to be limited. New: Utf8.size() method to get the number of bytes required to encode a string as UTF-8. This may be useful for length-prefixed encodings. New: SHA-512 hash and HMAC APIs. Version 1.11.0 2016-10-11 Fix: The four-argument overload of Buffer.writeString() had a major bug where it didn t respect offsets if the specified charset was UTF-8. This was because our short-circuit optimization omitted necessary offset parameters. New: HMAC support in HashingSource , HashingSink , ByteString , and Buffer . This makes it easy to create a keyed-hash message authentication code (HMAC) wherever your data is. Unlike the other hashes, HMAC uses a ByteString secret key for authentication. New: ByteString.of(ByteBuffer) makes it easier to mix NIO with Okio. Version 1.10.0 2016-08-28 Fix: Support reading files larger than 2 GiB with GzipSource . Previously attempting to decompress such files would fail due to an overflow when validating the total length. Fix: Exit the watchdog thread after being idle for 60 seconds. This should make it possible for class unloaders to fully unload Okio. New: Okio.blackhole() returns a sink where all bytes written are discarded. This is Okio s equivalent of /dev/null . New: Encode a string with any charset using ByteString.encodeString() and decode strings in any charset using ByteString.string() . Most applications should prefer ByteString.encodeUtf8() and ByteString.utf8() unless it s necessary to support a legacy charset. New: GzipSink.deflater() makes it possible to configure the compression level. Version 1.9.0 2016-07-01 New: Pipe makes it easy to connect a producer thread to a consumer thread. Reads block until data is available to read. Writes block if the pipe s is full. Both sources and sinks support timeouts. New: BufferedSource.rangeEquals() makes it easy to compare a range in a stream to an expected value. This does the right thing: it blocks to load the data required return a definitive result. But it won t block unnecessarily. New: Timeout.waitUntilNotified() makes it possible to use nice timeout abstractions on Java s built-in wait/notify primitives. Fix: Don t return incorrect results when HashingSource does large reads. There was a bug where it wasn t traversing through the segments of the buffer being hashed. This means that HashingSource was returning incorrect answers for any writes that spanned multiple segment boundaries. Version 1.8.0 2016-05-02 New: BufferedSource.select(Options) API for reading one of a set of expected values. New: Make ByteString.toString() and Buffer.toString() friendlier. These methods return text if the byte string is valid UTF-8. New: APIs to match byte strings: indexOf() , startsWith() , and endsWith() . Version 1.7.0 2016-04-10 New: Change the segment size to 8 KiB. This has been reported to dramatically improve performance in some applications. New: md5() , sha1() , and sha256() methods on Buffer . Also add a sha1() method on ByteString for symmetry. New: HashingSource and HashingSink . These classes are Okio\u2019s equivalent to the JDK\u2019s DigestInputStream and DigestOutputStream . They offer convenient md5() , sha1() , and sha256() factory methods to avoid an impossible NoSuchAlgorithmException . New: ByteString.asByteBuffer() . Fix: Limit snapshot byte strings to requested size. Fix: Change write timeouts to have a maximum write size. Previously large writes could easly suffer timeouts because the entire write was subject to a single timeout. Fix: Recover from EBADF failures, which could be triggered by asynchronously closing a stream on older versions of Android. Fix: Don t share segments if doing so only saves a small copy. This should improve performance for all applications. Fix: Optimize BufferedSource.indexOfElement() and indexOf(ByteString) . Previously this method had a bug that caused it to be very slow on large buffers. Version 1.6.0 2015-08-25 New: BufferedSource.indexOf(ByteString) searches a source for the next occurrence of a byte string. Fix: Recover from unexpected AssertionError thrown on Android 4.2.2 and earlier when asynchronously closing a socket. Version 1.5.0 2015-06-19 Sockets streams now throw SocketTimeoutException . This builds on new extension point in AsyncTimeout to customize the exception when a timeout occurs. New: ByteString now implements Comparable . The comparison sorts bytes as unsigned: {@code ff} sorts after {@code 00}. Version 1.4.0 2015-05-16 Timeout exception changed. Previously Timeout.throwIfReached() would throw InterruptedIOException on thread interruption, and IOException if the deadline was reached. Now it throws InterruptedIOException in both cases. Fix: throw EOFException when attempting to read digits from an empty source. Previously this would crash with an unchecked exception. New: APIs to read and write UTF-8 code points without allocating strings. New: BufferedSink can now write substrings directly, potentially saving an allocation for some callers. New: ForwardingTimeout class. Version 1.3.0 2015-03-16 New: Read and write signed decimal and unsigned hexadecimal values in BufferedSource and BufferedSink . Unlike the alternatives, these methods don\u2019t do any memory allocations! New: Segment sharing. This improves the runtime of operations like Buffer.clone() and Buffer.copyTo() by sharing underlying segments between buffers. New: Buffer.snapshot() returns an immutable snapshot of a buffer as a ByteString . This builds on segment sharing so that snapshots are shallow, immutable copies. New: ByteString.rangeEquals() . New: ByteString.md5() and ByteString.sha256() . New: ByteString.base64Url() returns URL-safe Base64. The existing decoding method has been extended to support URL-safe Base64 input. New: ByteString.substring() returns a prefix, infix, or suffix. New: Sink now implements java.io.Flushable . Fix: Buffer.write(Source, long) now always writes fully. The previous behavior would return as soon as any data had been written; this was inconsistent with all other write() methods in the API. Fix: don t leak empty segments in DeflaterSink and InflaterSource. (This was unlikely to cause problems in practice.) Version 1.2.0 2014-12-30 Fix: Okio.buffer() always buffers for better predictability. Fix: Provide context when readUtf8LineStrict() throws. Fix: Buffers do not call through the Source on zero-byte writes. Version 1.1.0 2014-12-11 Do UTF-8 encoding natively for a performance increase, particularly on Android. New APIs: BufferedSink.emit() , BufferedSource.request() and BufferedSink.indexOfElement() . Fixed a performance bug in Buffer.indexOf() Version 1.0.1 2014-08-08 Added read(byte[]) , read(byte[], offset, byteCount) , and void readFully(byte[]) to BufferedSource . Refined declared checked exceptions on Buffer methods. Version 1.0.0 2014-05-23 Bumped release version. No other changes! Version 0.9.0 2014-05-03 Use 0 as a sentinel for no timeout. Make AsyncTimeout public. Remove checked exception from Buffer.readByteArray. Version 0.8.0 2014-04-24 Eagerly verify preconditions on public APIs. Quick return on Buffer instance equivalence. Add delegate types for Sink and Source. Small changes to the way deadlines are managed. Add append variant of Okio.sink for File. Methods to exhaust BufferedSource to byte[] and ByteString. Version 0.7.0 2014-04-18 Don t use getters in timeout. Use the watchdog to interrupt sockets that have reached deadlines. Add java.io and java.nio file source/sink helpers. Version 0.6.1 2014-04-17 Methods to read a buffered source fully in UTF-8 or supplied charset. API to read a byte[] directly. New methods to move all data from a source to a sink. Fix a bug on input stream exhaustion. Version 0.6.0 2014-04-15 Make ByteString serializable. New API: ByteString.of(byte[] data, int offset, int byteCount) New API: stream-based copy, write, and read helpers. Version 0.5.0 2014-04-08 Initial public release. Imported from OkHttp.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-250","text":"2020-03-20 New: Upgrade to Kotlin 1.3.70.","title":"Version 2.5.0"},{"location":"changelog/#version-243","text":"2019-12-20 New: Upgrade to Kotlin 1.3.61.","title":"Version 2.4.3"},{"location":"changelog/#version-242","text":"2019-12-11 Fix: Don t crash when an InputStream source is exhausted exactly at a buffer segment boundary. We had a bug where a sequence of reads could violate a buffer s invariants, and this could result in a crash when subsequent reads encountered an unexpected empty segment.","title":"Version 2.4.2"},{"location":"changelog/#version-1175","text":"2019-12-11 Fix: Don t crash when an InputStream source is exhausted exactly at a buffer segment boundary. We had a bug where a sequence of reads could violate a buffer s invariants, and this could result in a crash when subsequent reads encountered an unexpected empty segment.","title":"Version 1.17.5"},{"location":"changelog/#version-241","text":"2019-10-04 Fix: Don t cache hash code and UTF-8 string in ByteString on Kotlin/Native which prevented freezing.","title":"Version 2.4.1"},{"location":"changelog/#version-240","text":"2019-08-26 New: Upgrade to Kotlin 1.3.50.","title":"Version 2.4.0"},{"location":"changelog/#version-230","text":"2019-07-29 This release changes our build from Kotlin-JVM to Kotlin-multiplatform (which includes JVM). Both native and JavaScript platforms are unstable preview releases and subject to backwards-incompatible changes in forthcoming releases. To try Okio in a multiplatform project use this Maven coordinate: api ( com . squareup . okio : okio - multiplatform : 2.3 . 0 ) You\u2019ll also need to enable Gradle metadata in your project s settings. The artifact name for JVM projects has not changed. New: Upgrade to Kotlin 1.3.40. Fix: Use Gradle api instead of implementation for the kotlin-stdlib dependency. Fix: Don t block unless strictly necessary in BufferedSource.peek() .","title":"Version 2.3.0"},{"location":"changelog/#version-1174","text":"2019-04-29 Fix: Don t block unless strictly necessary in BufferedSource.peek() .","title":"Version 1.17.4"},{"location":"changelog/#version-222","text":"2019-01-28 Fix: Make Pipe.fold() close the underlying sink when necessary.","title":"Version 2.2.2"},{"location":"changelog/#version-1173","text":"2019-01-28 Fix: Make Pipe.fold() close the underlying sink when necessary.","title":"Version 1.17.3"},{"location":"changelog/#version-1172","text":"2019-01-17 Fix: Make Pipe.fold() flush the underlying sink.","title":"Version 1.17.2"},{"location":"changelog/#version-221","text":"2019-01-17 Fix: Make Pipe.fold() flush the underlying sink.","title":"Version 2.2.1"},{"location":"changelog/#version-220","text":"2019-01-16 New: Throttler limits sources and sinks to a maximum desired throughput. Multiple sources and sinks can be attached to the same throttler and their combined throughput will not exceed the desired throughput. Multiple throttlers can also be used on the same source or sink and they will all be honored. New: Pipe.fold() replaces the actively-readable Source with a passively-writable Sink . This can be used to forward one sink to a target that is initially undetermined. New: Optimize performance of ByteStrings created with Buffer.snapshot() .","title":"Version 2.2.0"},{"location":"changelog/#version-1171","text":"2019-01-16 Fix: Make the newly-backported Pipe.fold() public.","title":"Version 1.17.1"},{"location":"changelog/#version-1170","text":"2019-01-16 New: Backport Pipe.fold() to Okio 1.x.","title":"Version 1.17.0"},{"location":"changelog/#version-1160","text":"2018-10-08 New: Backport BufferedSource.peek() and BufferedSource.getBuffer() to Okio 1.x. Fix: Enforce timeouts when closing AsyncTimeout sources.","title":"Version 1.16.0"},{"location":"changelog/#version-210","text":"2018-09-22 New: BufferedSource.peek() returns another BufferedSource that reads ahead on the current source. Use this to process the same data multiple times. New: Deprecate BufferedSource.buffer() , replacing it with either BufferedSource.getBuffer() (in Java) or BufferedSource.buffer (in Kotlin). We have done likewise for BufferedSink . When we introduced the new extension method Source.buffer() in Okio 2.0 we inadvertently collided with an existing method. This fixes that. New: Improve performance of Buffer.writeUtf8() . This comes alongside initial implementation of UTF-8 encoding and decoding in JavaScript which uses XOR masks for great performance.","title":"Version 2.1.0"},{"location":"changelog/#version-200","text":"2018-08-27 This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice on upgrading from 1.x to 2.x. We ve also added APIs to ease migration for Kotlin users. They use Kotlin s @Deprecated annotation to help you change call sites from the 1.x style to the 2.x style.","title":"Version 2.0.0"},{"location":"changelog/#version-200-rc1","text":"2018-07-26 Okio 2 is a major release that upgrades the library s implementation language from Java to Kotlin. Okio 2.x is binary-compatible with Okio 1.x and does not change any behavior. Classes and .jar files compiled against 1.x can be used with 2.x without recompiling. Okio 2.x is .java source compatible with Okio 1.x in all but one corner case. In Okio 1.x Buffer would throw an unchecked IllegalStateException when attempting to read more bytes than available. Okio 2.x now throws a checked EOFException in this case. This is now consistent with the behavior of its BufferedSource interface. Java callers that don t already catch IOException will now need to. Okio 2.x is .kt source-incompatible with Okio 1.x. This release adopts Kotlin idioms where they are available. Java Kotlin Idiom Buffer.getByte() operator fun Buffer.get() operator function Buffer.size() val Buffer.size val ByteString.decodeBase64(String) fun String.decodeBase64() extension function ByteString.decodeHex(String) fun String.decodeHex() extension function ByteString.encodeString(String, Charset) fun String.encode(Charset) extension function ByteString.encodeUtf8(String) fun String.encodeUtf8() extension function ByteString.getByte() operator fun ByteString.get() operator function ByteString.of(ByteBuffer) fun ByteBuffer.toByteString() extension function ByteString.of(byte[], int, int) fun ByteArray.toByteString() extension function ByteString.read(InputStream, int) fun InputStream.readByteString(Int) extension function ByteString.size() val ByteString.size val DeflaterSink(Sink) fun Sink.deflater() extension function ForwardingSink.delegate() val ForwardingSink.delegate val ForwardingSource.delegate() val ForwardingSource.delegate val GzipSink(Sink, Deflater) fun Sink.gzip() extension function GzipSink.deflater() val GzipSink.deflater val GzipSource(Source) fun Source.gzip() extension function HashingSink.hash() val HashingSink.hash val HashingSource.hash() val HashingSource.hash val InflaterSink(Source) fun Source.inflater() extension function Okio.appendingSink(File) fun File.appendingSink() extension function Okio.blackhole() fun blackholeSink() top level function Okio.buffer(Sink) fun Sink.buffer() extension function Okio.buffer(Source) fun Source.buffer() extension function Okio.sink(File) fun File.sink() extension function Okio.sink(OutputStream) fun OutputStream.sink() extension function Okio.sink(Path) fun Path.sink() extension function Okio.sink(Socket) fun Socket.sink() extension function Okio.source(File) fun File.source() extension function Okio.source(InputStream) fun InputStream.source() extension function Okio.source(Path) fun Path.source() extension function Okio.source(Socket) fun Socket.source() extension function Pipe.sink() val Pipe.sink val Pipe.source() val Pipe.source val Utf8.size(String) fun String.utf8Size() extension function Okio 2.x has similar performance to Okio 1.x. We benchmarked both versions to find potential performance regressions. We found one regression and fixed it: we were using == instead of === . Other changes in this release: New: Add a dependency on kotlin-stdlib. Okio s transitive dependencies grow from none in 1.x to three in 2.x. These are kotlin-stdlib (939 KiB), kotlin-stdlib-common (104 KiB), and JetBrains annotations (17 KiB). New: Change Okio to build with Gradle instead of Maven.","title":"Version 2.0.0-RC1"},{"location":"changelog/#version-1150","text":"2018-07-18 New: Trie-based Buffer.select() . This improves performance when selecting among large lists of options. Fix: Retain interrupted state when throwing InterruptedIOException .","title":"Version 1.15.0"},{"location":"changelog/#version-1140","text":"2018-02-11 New: Buffer.UnsafeCursor provides direct access to Okio internals. This API is like Okio s version of Java reflection: it s a very powerful API that can be used for great things and dangerous things alike. The documentation is extensive and anyone using it should review it carefully before proceeding! New: Change BufferedSource to implement java.nio.ReadableByteChannel and BufferedSink to implement java.nio.WritableByteChannel . Now it s a little easier to interop between Okio and NIO. New: Automatic module name of okio for use with the Java Platform Module System. New: Optimize Buffer.getByte() to search backwards when doing so will be more efficient. Fix: Honor the requested byte count in InflaterSource . Previously this class could return more bytes than requested. Fix: Improve a performance bug in AsyncTimeout.sink().write() .","title":"Version 1.14.0"},{"location":"changelog/#version-1130","text":"2017-05-12 Okio now uses @Nullable to annotate all possibly-null values. We ve added a compile-time dependency on the JSR 305 annotations. This is a provided dependency and does not need to be included in your build configuration, .jar file, or .apk . We use @ParametersAreNonnullByDefault and all parameters and return types are never null unless explicitly annotated @Nullable . Warning: this release is source-incompatible for Kotlin users. Nullability was previously ambiguous and lenient but now the compiler will enforce strict null checks.","title":"Version 1.13.0"},{"location":"changelog/#version-1120","text":"2017-04-11 Fix: Change Pipe s sink.flush() to not block. Previously closing a pipe s sink would block until the source had been exhausted. In practice this blocked the caller for no benefit. Fix: Change writeUtf8CodePoint() to emit ? for partial surrogates. The previous behavior was inconsistent: given a malformed string with a partial surrogate, writeUtf8() emitted ? but writeUtf8CodePoint() threw an IllegalArgumentException . Most applications will never encounter partial surrogates, but for those that do this behavior was unexpected. New: Allow length of readUtf8LineStrict() to be limited. New: Utf8.size() method to get the number of bytes required to encode a string as UTF-8. This may be useful for length-prefixed encodings. New: SHA-512 hash and HMAC APIs.","title":"Version 1.12.0"},{"location":"changelog/#version-1110","text":"2016-10-11 Fix: The four-argument overload of Buffer.writeString() had a major bug where it didn t respect offsets if the specified charset was UTF-8. This was because our short-circuit optimization omitted necessary offset parameters. New: HMAC support in HashingSource , HashingSink , ByteString , and Buffer . This makes it easy to create a keyed-hash message authentication code (HMAC) wherever your data is. Unlike the other hashes, HMAC uses a ByteString secret key for authentication. New: ByteString.of(ByteBuffer) makes it easier to mix NIO with Okio.","title":"Version 1.11.0"},{"location":"changelog/#version-1100","text":"2016-08-28 Fix: Support reading files larger than 2 GiB with GzipSource . Previously attempting to decompress such files would fail due to an overflow when validating the total length. Fix: Exit the watchdog thread after being idle for 60 seconds. This should make it possible for class unloaders to fully unload Okio. New: Okio.blackhole() returns a sink where all bytes written are discarded. This is Okio s equivalent of /dev/null . New: Encode a string with any charset using ByteString.encodeString() and decode strings in any charset using ByteString.string() . Most applications should prefer ByteString.encodeUtf8() and ByteString.utf8() unless it s necessary to support a legacy charset. New: GzipSink.deflater() makes it possible to configure the compression level.","title":"Version 1.10.0"},{"location":"changelog/#version-190","text":"2016-07-01 New: Pipe makes it easy to connect a producer thread to a consumer thread. Reads block until data is available to read. Writes block if the pipe s is full. Both sources and sinks support timeouts. New: BufferedSource.rangeEquals() makes it easy to compare a range in a stream to an expected value. This does the right thing: it blocks to load the data required return a definitive result. But it won t block unnecessarily. New: Timeout.waitUntilNotified() makes it possible to use nice timeout abstractions on Java s built-in wait/notify primitives. Fix: Don t return incorrect results when HashingSource does large reads. There was a bug where it wasn t traversing through the segments of the buffer being hashed. This means that HashingSource was returning incorrect answers for any writes that spanned multiple segment boundaries.","title":"Version 1.9.0"},{"location":"changelog/#version-180","text":"2016-05-02 New: BufferedSource.select(Options) API for reading one of a set of expected values. New: Make ByteString.toString() and Buffer.toString() friendlier. These methods return text if the byte string is valid UTF-8. New: APIs to match byte strings: indexOf() , startsWith() , and endsWith() .","title":"Version 1.8.0"},{"location":"changelog/#version-170","text":"2016-04-10 New: Change the segment size to 8 KiB. This has been reported to dramatically improve performance in some applications. New: md5() , sha1() , and sha256() methods on Buffer . Also add a sha1() method on ByteString for symmetry. New: HashingSource and HashingSink . These classes are Okio\u2019s equivalent to the JDK\u2019s DigestInputStream and DigestOutputStream . They offer convenient md5() , sha1() , and sha256() factory methods to avoid an impossible NoSuchAlgorithmException . New: ByteString.asByteBuffer() . Fix: Limit snapshot byte strings to requested size. Fix: Change write timeouts to have a maximum write size. Previously large writes could easly suffer timeouts because the entire write was subject to a single timeout. Fix: Recover from EBADF failures, which could be triggered by asynchronously closing a stream on older versions of Android. Fix: Don t share segments if doing so only saves a small copy. This should improve performance for all applications. Fix: Optimize BufferedSource.indexOfElement() and indexOf(ByteString) . Previously this method had a bug that caused it to be very slow on large buffers.","title":"Version 1.7.0"},{"location":"changelog/#version-160","text":"2015-08-25 New: BufferedSource.indexOf(ByteString) searches a source for the next occurrence of a byte string. Fix: Recover from unexpected AssertionError thrown on Android 4.2.2 and earlier when asynchronously closing a socket.","title":"Version 1.6.0"},{"location":"changelog/#version-150","text":"2015-06-19 Sockets streams now throw SocketTimeoutException . This builds on new extension point in AsyncTimeout to customize the exception when a timeout occurs. New: ByteString now implements Comparable . The comparison sorts bytes as unsigned: {@code ff} sorts after {@code 00}.","title":"Version 1.5.0"},{"location":"changelog/#version-140","text":"2015-05-16 Timeout exception changed. Previously Timeout.throwIfReached() would throw InterruptedIOException on thread interruption, and IOException if the deadline was reached. Now it throws InterruptedIOException in both cases. Fix: throw EOFException when attempting to read digits from an empty source. Previously this would crash with an unchecked exception. New: APIs to read and write UTF-8 code points without allocating strings. New: BufferedSink can now write substrings directly, potentially saving an allocation for some callers. New: ForwardingTimeout class.","title":"Version 1.4.0"},{"location":"changelog/#version-130","text":"2015-03-16 New: Read and write signed decimal and unsigned hexadecimal values in BufferedSource and BufferedSink . Unlike the alternatives, these methods don\u2019t do any memory allocations! New: Segment sharing. This improves the runtime of operations like Buffer.clone() and Buffer.copyTo() by sharing underlying segments between buffers. New: Buffer.snapshot() returns an immutable snapshot of a buffer as a ByteString . This builds on segment sharing so that snapshots are shallow, immutable copies. New: ByteString.rangeEquals() . New: ByteString.md5() and ByteString.sha256() . New: ByteString.base64Url() returns URL-safe Base64. The existing decoding method has been extended to support URL-safe Base64 input. New: ByteString.substring() returns a prefix, infix, or suffix. New: Sink now implements java.io.Flushable . Fix: Buffer.write(Source, long) now always writes fully. The previous behavior would return as soon as any data had been written; this was inconsistent with all other write() methods in the API. Fix: don t leak empty segments in DeflaterSink and InflaterSource. (This was unlikely to cause problems in practice.)","title":"Version 1.3.0"},{"location":"changelog/#version-120","text":"2014-12-30 Fix: Okio.buffer() always buffers for better predictability. Fix: Provide context when readUtf8LineStrict() throws. Fix: Buffers do not call through the Source on zero-byte writes.","title":"Version 1.2.0"},{"location":"changelog/#version-110","text":"2014-12-11 Do UTF-8 encoding natively for a performance increase, particularly on Android. New APIs: BufferedSink.emit() , BufferedSource.request() and BufferedSink.indexOfElement() . Fixed a performance bug in Buffer.indexOf()","title":"Version 1.1.0"},{"location":"changelog/#version-101","text":"2014-08-08 Added read(byte[]) , read(byte[], offset, byteCount) , and void readFully(byte[]) to BufferedSource . Refined declared checked exceptions on Buffer methods.","title":"Version 1.0.1"},{"location":"changelog/#version-100","text":"2014-05-23 Bumped release version. No other changes!","title":"Version 1.0.0"},{"location":"changelog/#version-090","text":"2014-05-03 Use 0 as a sentinel for no timeout. Make AsyncTimeout public. Remove checked exception from Buffer.readByteArray.","title":"Version 0.9.0"},{"location":"changelog/#version-080","text":"2014-04-24 Eagerly verify preconditions on public APIs. Quick return on Buffer instance equivalence. Add delegate types for Sink and Source. Small changes to the way deadlines are managed. Add append variant of Okio.sink for File. Methods to exhaust BufferedSource to byte[] and ByteString.","title":"Version 0.8.0"},{"location":"changelog/#version-070","text":"2014-04-18 Don t use getters in timeout. Use the watchdog to interrupt sockets that have reached deadlines. Add java.io and java.nio file source/sink helpers.","title":"Version 0.7.0"},{"location":"changelog/#version-061","text":"2014-04-17 Methods to read a buffered source fully in UTF-8 or supplied charset. API to read a byte[] directly. New methods to move all data from a source to a sink. Fix a bug on input stream exhaustion.","title":"Version 0.6.1"},{"location":"changelog/#version-060","text":"2014-04-15 Make ByteString serializable. New API: ByteString.of(byte[] data, int offset, int byteCount) New API: stream-based copy, write, and read helpers.","title":"Version 0.6.0"},{"location":"changelog/#version-050","text":"2014-04-08 Initial public release. Imported from OkHttp.","title":"Version 0.5.0"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"contributing/","text":"Contributing Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you ve found a security problem, please follow our bug bounty program. If you ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) . Code Contributions Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge. Committer s Guides Releasing","title":"Contributing"},{"location":"contributing/#contributing","text":"Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you ve found a security problem, please follow our bug bounty program. If you ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#code-contributions","text":"Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.","title":"Code Contributions"},{"location":"contributing/#committers-guides","text":"Releasing","title":"Committer's Guides"},{"location":"releasing/","text":"Releasing Prerequisite: Sonatype (Maven Central) Account Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects. Prerequisite: GPG Keys Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber jbarber@squareup.com sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX Prerequisite: Gradle Properties Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg signing.keyId is the GPG key s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX ~/.gnupg/secring.gpg Cutting a Release Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g \\ gradle.properties sed -i \\ s/\\ com.squareup.okio:\\([^\\:]*\\):[^\\ ]*\\ /\\ com.squareup.okio:\\1:$RELEASE_VERSION\\ /g \\ `find . -name README.md ` ./gradlew clean publish Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am Prepare for release $RELEASE_VERSION. git tag -a parent-$RELEASE_VERSION -m Version $RELEASE_VERSION sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g \\ gradle.properties git commit -am Prepare next development version. git push git push --tags","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing/#prerequisite-gpg-keys","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber jbarber@squareup.com sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX","title":"Prerequisite: GPG Keys"},{"location":"releasing/#prerequisite-gradle-properties","text":"Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg signing.keyId is the GPG key s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX ~/.gnupg/secring.gpg","title":"Prerequisite: Gradle Properties"},{"location":"releasing/#cutting-a-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g \\ gradle.properties sed -i \\ s/\\ com.squareup.okio:\\([^\\:]*\\):[^\\ ]*\\ /\\ com.squareup.okio:\\1:$RELEASE_VERSION\\ /g \\ `find . -name README.md ` ./gradlew clean publish Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am Prepare for release $RELEASE_VERSION. git tag -a parent-$RELEASE_VERSION -m Version $RELEASE_VERSION sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g \\ gradle.properties git commit -am Prepare next development version. git push git push --tags","title":"Cutting a Release"},{"location":"security/","text":"Security Policy Supported Versions Version Supported 2.x \u2705 1.x \u2705 Reporting a Vulnerability Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#supported-versions","text":"Version Supported 2.x \u2705 1.x \u2705","title":"Supported Versions"},{"location":"security/#reporting-a-vulnerability","text":"Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Reporting a Vulnerability"},{"location":"2.x/okio/","text":"okio Packages Name Summary (js, jvm, native) okio Index All Types","title":"Home"},{"location":"2.x/okio/#packages","text":"Name Summary (js, jvm, native) okio","title":"Packages"},{"location":"2.x/okio/#index","text":"All Types","title":"Index"},{"location":"2.x/okio/alltypes/","text":"All Types Name Summary (jvm) okio.-DeprecatedOkio |(jvm) okio.-DeprecatedUtf8 |(js, jvm, native) okio.ArrayIndexOutOfBoundsException |(jvm) okio.AsyncTimeout This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. |(js, jvm, native) okio.Buffer A collection of bytes in memory. |(js, jvm, native) okio.BufferedSink A sink that keeps a buffer internally so that callers can do small writes without a performance penalty. |(js, jvm, native) okio.BufferedSource A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input. |(js, jvm, native) okio.ByteString An immutable sequence of bytes. |(jvm) okio.DeflaterSink A sink that uses DEFLATE to compress data written to another source. |(js, jvm, native) okio.EOFException |(jvm) (extensions in package okio) java.io.File |(jvm) okio.ForwardingSink A Sink which forwards calls to another. Useful for subclassing. |(jvm) okio.ForwardingSource A Source which forwards calls to another. Useful for subclassing. |(jvm) okio.ForwardingTimeout A Timeout which forwards calls to another. Useful for subclassing. |(jvm) okio.GzipSink A sink that uses GZIP to compress written data to another sink. |(jvm) okio.GzipSource A source that uses GZIP to decompress data read from another source. |(jvm) okio.HashingSink A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. |(jvm) okio.HashingSource A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. |(jvm) okio.InflaterSource A source that uses DEFLATE to decompress data read from another source. |(jvm) (extensions in package okio) java.io.InputStream |(js, jvm, native) okio.IOException |(js, jvm) okio.Options An indexed set of values that may be read with BufferedSource.select . |(jvm) (extensions in package okio) java.io.OutputStream |(jvm) (extensions in package okio) java.nio.file.Path |(jvm) okio.Pipe A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. |(js, jvm, native) okio.Sink Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. |(jvm) (extensions in package okio) java.net.Socket |(js, jvm, native) okio.Source Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. |(js, jvm) (extensions in package okio) kotlin.String |(jvm) okio.Throttler Enables limiting of Source and Sink throughput. Attach to this throttler via source and sink and set the desired throughput via bytesPerSecond . Multiple Sources and Sinks can be attached to a single Throttler and they will be throttled as a group, where their combined throughput will not exceed the desired throughput. The same Source or Sink can be attached to multiple Throttlers and its throughput will not exceed the desired throughput of any of the Throttlers. |(js, jvm, native) okio.Timeout A policy on how much time to spend on a task before giving up. When a task times out, it is left in an unspecified state and should be abandoned. For example, if reading from a source times out, that source should be closed and the read should be retried later. If writing to a sink times out, the same rules apply: close the sink and retry later.","title":"Home"},{"location":"2.x/okio/alltypes/#all-types","text":"Name Summary (jvm)","title":"All Types"},{"location":"2.x/okio/alltypes/#okio-deprecatedokio","text":"|(jvm)","title":"okio.-DeprecatedOkio"},{"location":"2.x/okio/alltypes/#okio-deprecatedutf8","text":"|(js, jvm, native)","title":"okio.-DeprecatedUtf8"},{"location":"2.x/okio/alltypes/#okioarrayindexoutofboundsexception","text":"|(jvm)","title":"okio.ArrayIndexOutOfBoundsException"},{"location":"2.x/okio/alltypes/#okioasynctimeout","text":"This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. |(js, jvm, native)","title":"okio.AsyncTimeout"},{"location":"2.x/okio/alltypes/#okiobuffer","text":"A collection of bytes in memory. |(js, jvm, native)","title":"okio.Buffer"},{"location":"2.x/okio/alltypes/#okiobufferedsink","text":"A sink that keeps a buffer internally so that callers can do small writes without a performance penalty. |(js, jvm, native)","title":"okio.BufferedSink"},{"location":"2.x/okio/alltypes/#okiobufferedsource","text":"A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input. |(js, jvm, native)","title":"okio.BufferedSource"},{"location":"2.x/okio/alltypes/#okiobytestring","text":"An immutable sequence of bytes. |(jvm)","title":"okio.ByteString"},{"location":"2.x/okio/alltypes/#okiodeflatersink","text":"A sink that uses DEFLATE to compress data written to another source. |(js, jvm, native)","title":"okio.DeflaterSink"},{"location":"2.x/okio/alltypes/#okioeofexception","text":"|(jvm) (extensions in package okio)","title":"okio.EOFException"},{"location":"2.x/okio/alltypes/#javaiofile","text":"|(jvm)","title":"java.io.File"},{"location":"2.x/okio/alltypes/#okioforwardingsink","text":"A Sink which forwards calls to another. Useful for subclassing. |(jvm)","title":"okio.ForwardingSink"},{"location":"2.x/okio/alltypes/#okioforwardingsource","text":"A Source which forwards calls to another. Useful for subclassing. |(jvm)","title":"okio.ForwardingSource"},{"location":"2.x/okio/alltypes/#okioforwardingtimeout","text":"A Timeout which forwards calls to another. Useful for subclassing. |(jvm)","title":"okio.ForwardingTimeout"},{"location":"2.x/okio/alltypes/#okiogzipsink","text":"A sink that uses GZIP to compress written data to another sink. |(jvm)","title":"okio.GzipSink"},{"location":"2.x/okio/alltypes/#okiogzipsource","text":"A source that uses GZIP to decompress data read from another source. |(jvm)","title":"okio.GzipSource"},{"location":"2.x/okio/alltypes/#okiohashingsink","text":"A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. |(jvm)","title":"okio.HashingSink"},{"location":"2.x/okio/alltypes/#okiohashingsource","text":"A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. |(jvm)","title":"okio.HashingSource"},{"location":"2.x/okio/alltypes/#okioinflatersource","text":"A source that uses DEFLATE to decompress data read from another source. |(jvm) (extensions in package okio)","title":"okio.InflaterSource"},{"location":"2.x/okio/alltypes/#javaioinputstream","text":"|(js, jvm, native)","title":"java.io.InputStream"},{"location":"2.x/okio/alltypes/#okioioexception","text":"|(js, jvm)","title":"okio.IOException"},{"location":"2.x/okio/alltypes/#okiooptions","text":"An indexed set of values that may be read with BufferedSource.select . |(jvm) (extensions in package okio)","title":"okio.Options"},{"location":"2.x/okio/alltypes/#javaiooutputstream","text":"|(jvm) (extensions in package okio)","title":"java.io.OutputStream"},{"location":"2.x/okio/alltypes/#javaniofilepath","text":"|(jvm)","title":"java.nio.file.Path"},{"location":"2.x/okio/alltypes/#okiopipe","text":"A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. |(js, jvm, native)","title":"okio.Pipe"},{"location":"2.x/okio/alltypes/#okiosink","text":"Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. |(jvm) (extensions in package okio)","title":"okio.Sink"},{"location":"2.x/okio/alltypes/#javanetsocket","text":"|(js, jvm, native)","title":"java.net.Socket"},{"location":"2.x/okio/alltypes/#okiosource","text":"Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. |(js, jvm) (extensions in package okio)","title":"okio.Source"},{"location":"2.x/okio/alltypes/#kotlinstring","text":"|(jvm)","title":"kotlin.String"},{"location":"2.x/okio/alltypes/#okiothrottler","text":"Enables limiting of Source and Sink throughput. Attach to this throttler via source and sink and set the desired throughput via bytesPerSecond . Multiple Sources and Sinks can be attached to a single Throttler and they will be throttled as a group, where their combined throughput will not exceed the desired throughput. The same Source or Sink can be attached to multiple Throttlers and its throughput will not exceed the desired throughput of any of the Throttlers. |(js, jvm, native)","title":"okio.Throttler"},{"location":"2.x/okio/alltypes/#okiotimeout","text":"A policy on how much time to spend on a task before giving up. When a task times out, it is left in an unspecified state and should be abandoned. For example, if reading from a source times out, that source should be closed and the read should be retried later. If writing to a sink times out, the same rules apply: close the sink and retry later.","title":"okio.Timeout"},{"location":"2.x/okio/okio/","text":"okio / okio Package okio Types Name Summary (jvm) -DeprecatedOkio object ~~-DeprecatedOkio~~ (jvm) -DeprecatedUtf8 object ~~-DeprecatedUtf8~~ (jvm) AsyncTimeout This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. open class AsyncTimeout : Timeout (js, jvm, native) Buffer A collection of bytes in memory. class Buffer : BufferedSource , BufferedSink (js, jvm, native) BufferedSink A sink that keeps a buffer internally so that callers can do small writes without a performance penalty. interface BufferedSink : Sink (js, jvm, native) BufferedSource A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input. interface BufferedSource : Source (js, jvm, native) ByteString An immutable sequence of bytes. open class ByteString : Comparable ByteString (jvm) DeflaterSink A sink that uses DEFLATE to compress data written to another source. class DeflaterSink : Sink (jvm) ForwardingSink A Sink which forwards calls to another. Useful for subclassing. abstract class ForwardingSink : Sink (jvm) ForwardingSource A Source which forwards calls to another. Useful for subclassing. abstract class ForwardingSource : Source (jvm) ForwardingTimeout A Timeout which forwards calls to another. Useful for subclassing. open class ForwardingTimeout : Timeout (jvm) GzipSink A sink that uses GZIP to compress written data to another sink. class GzipSink : Sink (jvm) GzipSource A source that uses GZIP to decompress data read from another source. class GzipSource : Source (jvm) HashingSink A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. class HashingSink : ForwardingSink (jvm) HashingSource A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. class HashingSource : ForwardingSource (jvm) InflaterSource A source that uses DEFLATE to decompress data read from another source. class InflaterSource : Source Options An indexed set of values that may be read with BufferedSource.select .(js) class Options : AbstractList ByteString , RandomAccess (jvm) class Options : AbstractList ByteString , RandomAccess (jvm) Pipe A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. class Pipe (js, jvm, native) Sink Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. interface Sink (js, jvm, native) Source Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. interface Source (jvm) Throttler Enables limiting of Source and Sink throughput. Attach to this throttler via source and sink and set the desired throughput via bytesPerSecond . Multiple Sources and Sinks can be attached to a single Throttler and they will be throttled as a group, where their combined throughput will not exceed the desired throughput. The same Source or Sink can be attached to multiple Throttlers and its throughput will not exceed the desired throughput of any of the Throttlers. class Throttler (js, jvm, native) Timeout A policy on how much time to spend on a task before giving up. When a task times out, it is left in an unspecified state and should be abandoned. For example, if reading from a source times out, that source should be closed and the read should be retried later. If writing to a sink times out, the same rules apply: close the sink and retry later. open class Timeout Exceptions Name Summary ArrayIndexOutOfBoundsException (js, jvm) class ArrayIndexOutOfBoundsException : IndexOutOfBoundsException (native) typealias ArrayIndexOutOfBoundsException = ERROR CLASS (js, jvm, native) EOFException open class EOFException : IOException IOException (js, jvm) open class IOException : Exception (native) open class IOException : Exception Extensions for External Classes Name Summary (jvm) java.io.File (jvm) java.io.InputStream (jvm) java.io.OutputStream (jvm) java.net.Socket (jvm) java.nio.file.Path (js, jvm) kotlin.String Properties Name Summary (jvm) Okio val Okio: -DeprecatedOkio (jvm) Utf8 val Utf8: -DeprecatedUtf8 Functions Name Summary (js, jvm) blackholeSink Returns a sink that writes nowhere. fun blackholeSink(): Sink (js, jvm) buffer Returns a new source that buffers reads from source . The returned source will perform bulk reads into its in-memory buffer. Use this wherever you read a source to get an ergonomic and efficient access to data. fun Source .buffer(): BufferedSource Returns a new sink that buffers writes to sink . The returned sink will batch writes to sink . Use this wherever you write to a sink to get an ergonomic and efficient access to data. fun Sink .buffer(): BufferedSink (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"2.x API"},{"location":"2.x/okio/okio/#package-okio","text":"","title":"Package okio"},{"location":"2.x/okio/okio/#types","text":"Name Summary (jvm) -DeprecatedOkio object ~~-DeprecatedOkio~~ (jvm) -DeprecatedUtf8 object ~~-DeprecatedUtf8~~ (jvm) AsyncTimeout This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. open class AsyncTimeout : Timeout (js, jvm, native) Buffer A collection of bytes in memory. class Buffer : BufferedSource , BufferedSink (js, jvm, native) BufferedSink A sink that keeps a buffer internally so that callers can do small writes without a performance penalty. interface BufferedSink : Sink (js, jvm, native) BufferedSource A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input. interface BufferedSource : Source (js, jvm, native) ByteString An immutable sequence of bytes. open class ByteString : Comparable ByteString (jvm) DeflaterSink A sink that uses DEFLATE to compress data written to another source. class DeflaterSink : Sink (jvm) ForwardingSink A Sink which forwards calls to another. Useful for subclassing. abstract class ForwardingSink : Sink (jvm) ForwardingSource A Source which forwards calls to another. Useful for subclassing. abstract class ForwardingSource : Source (jvm) ForwardingTimeout A Timeout which forwards calls to another. Useful for subclassing. open class ForwardingTimeout : Timeout (jvm) GzipSink A sink that uses GZIP to compress written data to another sink. class GzipSink : Sink (jvm) GzipSource A source that uses GZIP to decompress data read from another source. class GzipSource : Source (jvm) HashingSink A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. class HashingSink : ForwardingSink (jvm) HashingSource A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. class HashingSource : ForwardingSource (jvm) InflaterSource A source that uses DEFLATE to decompress data read from another source. class InflaterSource : Source Options An indexed set of values that may be read with BufferedSource.select .(js) class Options : AbstractList ByteString , RandomAccess (jvm) class Options : AbstractList ByteString , RandomAccess (jvm) Pipe A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. class Pipe (js, jvm, native) Sink Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. interface Sink (js, jvm, native) Source Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. interface Source (jvm) Throttler Enables limiting of Source and Sink throughput. Attach to this throttler via source and sink and set the desired throughput via bytesPerSecond . Multiple Sources and Sinks can be attached to a single Throttler and they will be throttled as a group, where their combined throughput will not exceed the desired throughput. The same Source or Sink can be attached to multiple Throttlers and its throughput will not exceed the desired throughput of any of the Throttlers. class Throttler (js, jvm, native) Timeout A policy on how much time to spend on a task before giving up. When a task times out, it is left in an unspecified state and should be abandoned. For example, if reading from a source times out, that source should be closed and the read should be retried later. If writing to a sink times out, the same rules apply: close the sink and retry later. open class Timeout","title":"Types"},{"location":"2.x/okio/okio/#exceptions","text":"Name Summary ArrayIndexOutOfBoundsException (js, jvm) class ArrayIndexOutOfBoundsException : IndexOutOfBoundsException (native) typealias ArrayIndexOutOfBoundsException = ERROR CLASS (js, jvm, native) EOFException open class EOFException : IOException IOException (js, jvm) open class IOException : Exception (native) open class IOException : Exception","title":"Exceptions"},{"location":"2.x/okio/okio/#extensions-for-external-classes","text":"Name Summary (jvm) java.io.File (jvm) java.io.InputStream (jvm) java.io.OutputStream (jvm) java.net.Socket (jvm) java.nio.file.Path (js, jvm) kotlin.String","title":"Extensions for External Classes"},{"location":"2.x/okio/okio/#properties","text":"Name Summary (jvm) Okio val Okio: -DeprecatedOkio (jvm) Utf8 val Utf8: -DeprecatedUtf8","title":"Properties"},{"location":"2.x/okio/okio/#functions","text":"Name Summary (js, jvm) blackholeSink Returns a sink that writes nowhere. fun blackholeSink(): Sink (js, jvm) buffer Returns a new source that buffers reads from source . The returned source will perform bulk reads into its in-memory buffer. Use this wherever you read a source to get an ergonomic and efficient access to data. fun Source .buffer(): BufferedSource Returns a new sink that buffers writes to sink . The returned sink will batch writes to sink . Use this wherever you write to a sink to get an ergonomic and efficient access to data. fun Sink .buffer(): BufferedSink (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Functions"},{"location":"2.x/okio/okio/-okio/","text":"okio / okio / Okio Okio (jvm) val Okio: -DeprecatedOkio","title":" okio"},{"location":"2.x/okio/okio/-okio/#okio","text":"(jvm) val Okio: -DeprecatedOkio","title":"Okio"},{"location":"2.x/okio/okio/-utf8/","text":"okio / okio / Utf8 Utf8 (jvm) val Utf8: -DeprecatedUtf8","title":" utf8"},{"location":"2.x/okio/okio/-utf8/#utf8","text":"(jvm) val Utf8: -DeprecatedUtf8","title":"Utf8"},{"location":"2.x/okio/okio/blackhole-sink/","text":"okio / okio / blackholeSink blackholeSink (js, jvm) @JvmName(\"blackhole\") fun blackholeSink(): Sink Returns a sink that writes nowhere.","title":"Blackhole sink"},{"location":"2.x/okio/okio/blackhole-sink/#blackholesink","text":"(js, jvm) @JvmName(\"blackhole\") fun blackholeSink(): Sink Returns a sink that writes nowhere.","title":"blackholeSink"},{"location":"2.x/okio/okio/buffer/","text":"okio / okio / buffer buffer (js, jvm) fun Source .buffer(): BufferedSource Returns a new source that buffers reads from source . The returned source will perform bulk reads into its in-memory buffer. Use this wherever you read a source to get an ergonomic and efficient access to data. (js, jvm) fun Sink .buffer(): BufferedSink Returns a new sink that buffers writes to sink . The returned sink will batch writes to sink . Use this wherever you write to a sink to get an ergonomic and efficient access to data.","title":"Buffer"},{"location":"2.x/okio/okio/buffer/#buffer","text":"(js, jvm) fun Source .buffer(): BufferedSource Returns a new source that buffers reads from source . The returned source will perform bulk reads into its in-memory buffer. Use this wherever you read a source to get an ergonomic and efficient access to data. (js, jvm) fun Sink .buffer(): BufferedSink Returns a new sink that buffers writes to sink . The returned sink will batch writes to sink . Use this wherever you write to a sink to get an ergonomic and efficient access to data.","title":"buffer"},{"location":"2.x/okio/okio/deflate/","text":"okio / okio / deflate deflate (jvm) fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. See Also DeflaterSink","title":"Deflate"},{"location":"2.x/okio/okio/deflate/#deflate","text":"(jvm) fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. See Also DeflaterSink","title":"deflate"},{"location":"2.x/okio/okio/gzip/","text":"okio / okio / gzip gzip (jvm) fun Sink .gzip(): GzipSink Returns a GzipSink that gzip-compresses to this Sink while writing. See Also GzipSource (jvm) fun Source .gzip(): GzipSource Returns a GzipSource that gzip-decompresses this Source while reading. See Also GzipSource","title":"Gzip"},{"location":"2.x/okio/okio/gzip/#gzip","text":"(jvm) fun Sink .gzip(): GzipSink Returns a GzipSink that gzip-compresses to this Sink while writing. See Also GzipSource (jvm) fun Source .gzip(): GzipSource Returns a GzipSource that gzip-decompresses this Source while reading. See Also GzipSource","title":"gzip"},{"location":"2.x/okio/okio/inflate/","text":"okio / okio / inflate inflate (jvm) fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource Returns an InflaterSource that DEFLATE-decompresses this Source while reading. See Also InflaterSource","title":"Inflate"},{"location":"2.x/okio/okio/inflate/#inflate","text":"(jvm) fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource Returns an InflaterSource that DEFLATE-decompresses this Source while reading. See Also InflaterSource","title":"inflate"},{"location":"2.x/okio/okio/--deprecated-okio/","text":"okio / okio / -DeprecatedOkio -DeprecatedOkio (jvm) object ~~-DeprecatedOkio~~ Deprecated: changed in Okio 2.x Functions Name Summary (jvm) appendingSink fun ~~appendingSink~~(file: File ): Sink (jvm) blackhole fun ~~blackhole~~(): Sink (jvm) buffer fun ~~buffer~~(sink: Sink ): BufferedSink fun ~~buffer~~(source: Source ): BufferedSource (jvm) sink fun ~~sink~~(file: File ): Sink fun ~~sink~~(outputStream: OutputStream ): Sink fun ~~sink~~(path: Path, vararg options: OpenOption): Sink fun ~~sink~~(socket: Socket ): Sink (jvm) source fun ~~source~~(file: File ): Source fun ~~source~~(inputStream: InputStream ): Source fun ~~source~~(path: Path, vararg options: OpenOption): Source fun ~~source~~(socket: Socket ): Source","title":"Home"},{"location":"2.x/okio/okio/--deprecated-okio/#-deprecatedokio","text":"(jvm) object ~~-DeprecatedOkio~~ Deprecated: changed in Okio 2.x","title":"-DeprecatedOkio"},{"location":"2.x/okio/okio/--deprecated-okio/#functions","text":"Name Summary (jvm) appendingSink fun ~~appendingSink~~(file: File ): Sink (jvm) blackhole fun ~~blackhole~~(): Sink (jvm) buffer fun ~~buffer~~(sink: Sink ): BufferedSink fun ~~buffer~~(source: Source ): BufferedSource (jvm) sink fun ~~sink~~(file: File ): Sink fun ~~sink~~(outputStream: OutputStream ): Sink fun ~~sink~~(path: Path, vararg options: OpenOption): Sink fun ~~sink~~(socket: Socket ): Sink (jvm) source fun ~~source~~(file: File ): Source fun ~~source~~(inputStream: InputStream ): Source fun ~~source~~(path: Path, vararg options: OpenOption): Source fun ~~source~~(socket: Socket ): Source","title":"Functions"},{"location":"2.x/okio/okio/--deprecated-okio/appending-sink/","text":"okio / okio / -DeprecatedOkio / appendingSink appendingSink (jvm) fun ~~appendingSink~~(file: File ): Sink Deprecated: moved to extension function","title":"Appending sink"},{"location":"2.x/okio/okio/--deprecated-okio/appending-sink/#appendingsink","text":"(jvm) fun ~~appendingSink~~(file: File ): Sink Deprecated: moved to extension function","title":"appendingSink"},{"location":"2.x/okio/okio/--deprecated-okio/blackhole/","text":"okio / okio / -DeprecatedOkio / blackhole blackhole (jvm) fun ~~blackhole~~(): Sink Deprecated: moved to extension function","title":"Blackhole"},{"location":"2.x/okio/okio/--deprecated-okio/blackhole/#blackhole","text":"(jvm) fun ~~blackhole~~(): Sink Deprecated: moved to extension function","title":"blackhole"},{"location":"2.x/okio/okio/--deprecated-okio/buffer/","text":"okio / okio / -DeprecatedOkio / buffer buffer (jvm) fun ~~buffer~~(sink: Sink ): BufferedSink Deprecated: moved to extension function fun ~~buffer~~(source: Source ): BufferedSource Deprecated: moved to extension function","title":"Buffer"},{"location":"2.x/okio/okio/--deprecated-okio/buffer/#buffer","text":"(jvm) fun ~~buffer~~(sink: Sink ): BufferedSink Deprecated: moved to extension function fun ~~buffer~~(source: Source ): BufferedSource Deprecated: moved to extension function","title":"buffer"},{"location":"2.x/okio/okio/--deprecated-okio/sink/","text":"okio / okio / -DeprecatedOkio / sink sink (jvm) fun ~~sink~~(file: File ): Sink Deprecated: moved to extension function fun ~~sink~~(outputStream: OutputStream ): Sink Deprecated: moved to extension function fun ~~sink~~(path: Path, vararg options: OpenOption): Sink Deprecated: moved to extension function fun ~~sink~~(socket: Socket ): Sink Deprecated: moved to extension function","title":"Sink"},{"location":"2.x/okio/okio/--deprecated-okio/sink/#sink","text":"(jvm) fun ~~sink~~(file: File ): Sink Deprecated: moved to extension function fun ~~sink~~(outputStream: OutputStream ): Sink Deprecated: moved to extension function fun ~~sink~~(path: Path, vararg options: OpenOption): Sink Deprecated: moved to extension function fun ~~sink~~(socket: Socket ): Sink Deprecated: moved to extension function","title":"sink"},{"location":"2.x/okio/okio/--deprecated-okio/source/","text":"okio / okio / -DeprecatedOkio / source source (jvm) fun ~~source~~(file: File ): Source Deprecated: moved to extension function fun ~~source~~(inputStream: InputStream ): Source Deprecated: moved to extension function fun ~~source~~(path: Path, vararg options: OpenOption): Source Deprecated: moved to extension function fun ~~source~~(socket: Socket ): Source Deprecated: moved to extension function","title":"Source"},{"location":"2.x/okio/okio/--deprecated-okio/source/#source","text":"(jvm) fun ~~source~~(file: File ): Source Deprecated: moved to extension function fun ~~source~~(inputStream: InputStream ): Source Deprecated: moved to extension function fun ~~source~~(path: Path, vararg options: OpenOption): Source Deprecated: moved to extension function fun ~~source~~(socket: Socket ): Source Deprecated: moved to extension function","title":"source"},{"location":"2.x/okio/okio/--deprecated-utf8/","text":"okio / okio / -DeprecatedUtf8 -DeprecatedUtf8 (jvm) object ~~-DeprecatedUtf8~~ Deprecated: changed in Okio 2.x Functions Name Summary (jvm) size fun ~~size~~(string: String ): Long fun ~~size~~(string: String , beginIndex: Int , endIndex: Int ): Long","title":"Home"},{"location":"2.x/okio/okio/--deprecated-utf8/#-deprecatedutf8","text":"(jvm) object ~~-DeprecatedUtf8~~ Deprecated: changed in Okio 2.x","title":"-DeprecatedUtf8"},{"location":"2.x/okio/okio/--deprecated-utf8/#functions","text":"Name Summary (jvm) size fun ~~size~~(string: String ): Long fun ~~size~~(string: String , beginIndex: Int , endIndex: Int ): Long","title":"Functions"},{"location":"2.x/okio/okio/--deprecated-utf8/size/","text":"okio / okio / -DeprecatedUtf8 / size size (jvm) fun ~~size~~(string: String ): Long Deprecated: moved to extension function fun ~~size~~(string: String , beginIndex: Int , endIndex: Int ): Long Deprecated: moved to extension function","title":"Size"},{"location":"2.x/okio/okio/--deprecated-utf8/size/#size","text":"(jvm) fun ~~size~~(string: String ): Long Deprecated: moved to extension function fun ~~size~~(string: String , beginIndex: Int , endIndex: Int ): Long Deprecated: moved to extension function","title":"size"},{"location":"2.x/okio/okio/-array-index-out-of-bounds-exception/","text":"okio / okio / ArrayIndexOutOfBoundsException ArrayIndexOutOfBoundsException (js, jvm) class ArrayIndexOutOfBoundsException : IndexOutOfBoundsException (native) typealias ArrayIndexOutOfBoundsException = ERROR CLASS Constructors Name Summary (js, jvm) init init (message: String ?)","title":"Home"},{"location":"2.x/okio/okio/-array-index-out-of-bounds-exception/#arrayindexoutofboundsexception","text":"(js, jvm) class ArrayIndexOutOfBoundsException : IndexOutOfBoundsException (native) typealias ArrayIndexOutOfBoundsException = ERROR CLASS","title":"ArrayIndexOutOfBoundsException"},{"location":"2.x/okio/okio/-array-index-out-of-bounds-exception/#constructors","text":"Name Summary (js, jvm) init init (message: String ?)","title":"Constructors"},{"location":"2.x/okio/okio/-array-index-out-of-bounds-exception/-init-/","text":"okio / okio / ArrayIndexOutOfBoundsException / init init (js, jvm) init (message: String ?)","title":" init "},{"location":"2.x/okio/okio/-array-index-out-of-bounds-exception/-init-/#init","text":"(js, jvm) init (message: String ?)","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-async-timeout/","text":"okio / okio / AsyncTimeout AsyncTimeout (jvm) open class AsyncTimeout : Timeout This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. Subclasses should override timedOut to take action when a timeout occurs. This method will be invoked by the shared watchdog thread so it should not do any long-running operations. Otherwise we risk starving other timeouts from being triggered. Use sink and source to apply this timeout to a stream. The returned value will apply the timeout to each operation on the wrapped stream. Callers should call enter before doing work that is subject to timeouts, and exit afterwards. The return value of exit indicates whether a timeout was triggered. Note that the call to timedOut is asynchronous, and may be called after exit . Constructors Name Summary (jvm) init This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. AsyncTimeout() Functions Name Summary (jvm) enter fun enter(): Unit (jvm) exit Returns true if the timeout occurred. fun exit(): Boolean (jvm) newTimeoutException Returns an IOException to represent a timeout. By default this method returns InterruptedIOException . If cause is non-null it is set as the cause of the returned exception. open fun newTimeoutException(cause: IOException ?): IOException (jvm) sink Returns a new sink that delegates to sink , using this to implement timeouts. This works best if timedOut is overridden to interrupt sink s current operation. fun sink(sink: Sink ): Sink (jvm) source Returns a new source that delegates to source , using this to implement timeouts. This works best if timedOut is overridden to interrupt source s current operation. fun source(source: Source ): Source (jvm) timedOut Invoked by the watchdog thread when the time between calls to enter and exit has exceeded the timeout. open fun timedOut(): Unit (jvm) withTimeout Surrounds block with calls to enter and exit , throwing an exception from newTimeoutException if a timeout occurred. fun T withTimeout(block: () - T): T Inherited Functions Name Summary (jvm) clearDeadline Clears the deadline. open fun clearDeadline(): Timeout (jvm) clearTimeout Clears the timeout. Operating system timeouts may still apply. open fun clearTimeout(): Timeout (jvm) deadline Set a deadline of now plus duration time. fun deadline(duration: Long , unit: TimeUnit ): Timeout (jvm) deadlineNanoTime Returns the nano time when the deadline will be reached. open fun deadlineNanoTime(): Long Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations. open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout (jvm) hasDeadline Returns true if a deadline is enabled. open fun hasDeadline(): Boolean (jvm) intersectWith Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values. fun intersectWith(other: Timeout , block: () - Unit ): Unit (jvm) throwIfReached Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation. open fun throwIfReached(): Unit (jvm) timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. open fun timeout(timeout: Long , unit: TimeUnit ): Timeout (jvm) timeoutNanos Returns the timeout in nanoseconds, or 0 for no timeout. open fun timeoutNanos(): Long (jvm) waitUntilNotified Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . fun waitUntilNotified(monitor: Any ): Unit","title":"Home"},{"location":"2.x/okio/okio/-async-timeout/#asynctimeout","text":"(jvm) open class AsyncTimeout : Timeout This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. Subclasses should override timedOut to take action when a timeout occurs. This method will be invoked by the shared watchdog thread so it should not do any long-running operations. Otherwise we risk starving other timeouts from being triggered. Use sink and source to apply this timeout to a stream. The returned value will apply the timeout to each operation on the wrapped stream. Callers should call enter before doing work that is subject to timeouts, and exit afterwards. The return value of exit indicates whether a timeout was triggered. Note that the call to timedOut is asynchronous, and may be called after exit .","title":"AsyncTimeout"},{"location":"2.x/okio/okio/-async-timeout/#constructors","text":"Name Summary (jvm) init This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. AsyncTimeout()","title":"Constructors"},{"location":"2.x/okio/okio/-async-timeout/#functions","text":"Name Summary (jvm) enter fun enter(): Unit (jvm) exit Returns true if the timeout occurred. fun exit(): Boolean (jvm) newTimeoutException Returns an IOException to represent a timeout. By default this method returns InterruptedIOException . If cause is non-null it is set as the cause of the returned exception. open fun newTimeoutException(cause: IOException ?): IOException (jvm) sink Returns a new sink that delegates to sink , using this to implement timeouts. This works best if timedOut is overridden to interrupt sink s current operation. fun sink(sink: Sink ): Sink (jvm) source Returns a new source that delegates to source , using this to implement timeouts. This works best if timedOut is overridden to interrupt source s current operation. fun source(source: Source ): Source (jvm) timedOut Invoked by the watchdog thread when the time between calls to enter and exit has exceeded the timeout. open fun timedOut(): Unit (jvm) withTimeout Surrounds block with calls to enter and exit , throwing an exception from newTimeoutException if a timeout occurred. fun T withTimeout(block: () - T): T","title":"Functions"},{"location":"2.x/okio/okio/-async-timeout/#inherited-functions","text":"Name Summary (jvm) clearDeadline Clears the deadline. open fun clearDeadline(): Timeout (jvm) clearTimeout Clears the timeout. Operating system timeouts may still apply. open fun clearTimeout(): Timeout (jvm) deadline Set a deadline of now plus duration time. fun deadline(duration: Long , unit: TimeUnit ): Timeout (jvm) deadlineNanoTime Returns the nano time when the deadline will be reached. open fun deadlineNanoTime(): Long Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations. open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout (jvm) hasDeadline Returns true if a deadline is enabled. open fun hasDeadline(): Boolean (jvm) intersectWith Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values. fun intersectWith(other: Timeout , block: () - Unit ): Unit (jvm) throwIfReached Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation. open fun throwIfReached(): Unit (jvm) timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. open fun timeout(timeout: Long , unit: TimeUnit ): Timeout (jvm) timeoutNanos Returns the timeout in nanoseconds, or 0 for no timeout. open fun timeoutNanos(): Long (jvm) waitUntilNotified Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . fun waitUntilNotified(monitor: Any ): Unit","title":"Inherited Functions"},{"location":"2.x/okio/okio/-async-timeout/-init-/","text":"okio / okio / AsyncTimeout / init init (jvm) AsyncTimeout() This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. Subclasses should override timedOut to take action when a timeout occurs. This method will be invoked by the shared watchdog thread so it should not do any long-running operations. Otherwise we risk starving other timeouts from being triggered. Use sink and source to apply this timeout to a stream. The returned value will apply the timeout to each operation on the wrapped stream. Callers should call enter before doing work that is subject to timeouts, and exit afterwards. The return value of exit indicates whether a timeout was triggered. Note that the call to timedOut is asynchronous, and may be called after exit .","title":" init "},{"location":"2.x/okio/okio/-async-timeout/-init-/#init","text":"(jvm) AsyncTimeout() This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. Subclasses should override timedOut to take action when a timeout occurs. This method will be invoked by the shared watchdog thread so it should not do any long-running operations. Otherwise we risk starving other timeouts from being triggered. Use sink and source to apply this timeout to a stream. The returned value will apply the timeout to each operation on the wrapped stream. Callers should call enter before doing work that is subject to timeouts, and exit afterwards. The return value of exit indicates whether a timeout was triggered. Note that the call to timedOut is asynchronous, and may be called after exit .","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-async-timeout/enter/","text":"okio / okio / AsyncTimeout / enter enter (jvm) fun enter(): Unit","title":"Enter"},{"location":"2.x/okio/okio/-async-timeout/enter/#enter","text":"(jvm) fun enter(): Unit","title":"enter"},{"location":"2.x/okio/okio/-async-timeout/exit/","text":"okio / okio / AsyncTimeout / exit exit (jvm) fun exit(): Boolean Returns true if the timeout occurred.","title":"Exit"},{"location":"2.x/okio/okio/-async-timeout/exit/#exit","text":"(jvm) fun exit(): Boolean Returns true if the timeout occurred.","title":"exit"},{"location":"2.x/okio/okio/-async-timeout/new-timeout-exception/","text":"okio / okio / AsyncTimeout / newTimeoutException newTimeoutException (jvm) protected open fun newTimeoutException(cause: IOException ?): IOException Returns an IOException to represent a timeout. By default this method returns InterruptedIOException . If cause is non-null it is set as the cause of the returned exception.","title":"New timeout exception"},{"location":"2.x/okio/okio/-async-timeout/new-timeout-exception/#newtimeoutexception","text":"(jvm) protected open fun newTimeoutException(cause: IOException ?): IOException Returns an IOException to represent a timeout. By default this method returns InterruptedIOException . If cause is non-null it is set as the cause of the returned exception.","title":"newTimeoutException"},{"location":"2.x/okio/okio/-async-timeout/sink/","text":"okio / okio / AsyncTimeout / sink sink (jvm) fun sink(sink: Sink ): Sink Returns a new sink that delegates to sink , using this to implement timeouts. This works best if timedOut is overridden to interrupt sink s current operation.","title":"Sink"},{"location":"2.x/okio/okio/-async-timeout/sink/#sink","text":"(jvm) fun sink(sink: Sink ): Sink Returns a new sink that delegates to sink , using this to implement timeouts. This works best if timedOut is overridden to interrupt sink s current operation.","title":"sink"},{"location":"2.x/okio/okio/-async-timeout/source/","text":"okio / okio / AsyncTimeout / source source (jvm) fun source(source: Source ): Source Returns a new source that delegates to source , using this to implement timeouts. This works best if timedOut is overridden to interrupt source s current operation.","title":"Source"},{"location":"2.x/okio/okio/-async-timeout/source/#source","text":"(jvm) fun source(source: Source ): Source Returns a new source that delegates to source , using this to implement timeouts. This works best if timedOut is overridden to interrupt source s current operation.","title":"source"},{"location":"2.x/okio/okio/-async-timeout/timed-out/","text":"okio / okio / AsyncTimeout / timedOut timedOut (jvm) protected open fun timedOut(): Unit Invoked by the watchdog thread when the time between calls to enter and exit has exceeded the timeout.","title":"Timed out"},{"location":"2.x/okio/okio/-async-timeout/timed-out/#timedout","text":"(jvm) protected open fun timedOut(): Unit Invoked by the watchdog thread when the time between calls to enter and exit has exceeded the timeout.","title":"timedOut"},{"location":"2.x/okio/okio/-async-timeout/with-timeout/","text":"okio / okio / AsyncTimeout / withTimeout withTimeout (jvm) inline fun T withTimeout(block: () - T): T Surrounds block with calls to enter and exit , throwing an exception from newTimeoutException if a timeout occurred.","title":"With timeout"},{"location":"2.x/okio/okio/-async-timeout/with-timeout/#withtimeout","text":"(jvm) inline fun T withTimeout(block: () - T): T Surrounds block with calls to enter and exit , throwing an exception from newTimeoutException if a timeout occurred.","title":"withTimeout"},{"location":"2.x/okio/okio/-buffer/","text":"okio / okio / Buffer Buffer (js, jvm, native) class Buffer : BufferedSource , BufferedSink A collection of bytes in memory. Moving data from one buffer to another is fast. Instead of copying bytes from one place in memory to another, this class just changes ownership of the underlying byte arrays. This buffer grows with your data. Just like ArrayList, each buffer starts small. It consumes only the memory it needs to. This buffer pools its byte arrays. When you allocate a byte array in Java, the runtime must zero-fill the requested array before returning it to you. Even if you re going to write over that space anyway. This class avoids zero-fill and GC churn by pooling byte arrays. Types Name Summary (jvm) UnsafeCursor A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. class UnsafeCursor : Closeable Constructors Name Summary (js, jvm, native) init A collection of bytes in memory. init () Properties Name Summary (js, jvm, native) buffer val buffer: Buffer (js, jvm, native) size var size: Long Functions Name Summary (jvm) buffer Returns this source s internal buffer. fun buffer(): Buffer (js, jvm, native) clear Discards all bytes in this buffer. Calling this method when you re done with a buffer will return its segments to the pool. fun clear(): Unit (jvm) clone Returns a deep copy of this buffer. fun clone(): Buffer (js, jvm, native) close fun close(): Unit (js, jvm, native) completeSegmentByteCount Returns the number of bytes in segments that are not writable. This is the number of bytes that can be flushed immediately to an underlying sink without harming throughput. fun completeSegmentByteCount(): Long (js, jvm, native) copy Returns a deep copy of this buffer. fun copy(): Buffer copyTo Copy byteCount bytes from this, starting at offset , to out .(jvm) fun copyTo(out: OutputStream , offset: Long = 0L, byteCount: Long = size - offset): Buffer (js, jvm) fun copyTo(out: Buffer , offset: Long = 0L, byteCount: Long ): Buffer (native) fun copyTo(out: Buffer , offset: Long , byteCount: Long ): Buffer Overload of copyTo with byteCount = size - offset, work around for https://youtrack.jetbrains.com/issue/KT-30847(js , jvm) fun copyTo(out: Buffer , offset: Long = 0L): Buffer (native) fun copyTo(out: Buffer , offset: Long ): Buffer (js, jvm, native) emit fun emit(): Buffer (js, jvm, native) emitCompleteSegments fun emitCompleteSegments(): Buffer (js, jvm, native) equals fun equals(other: Any ?): Boolean (js, jvm, native) exhausted fun exhausted(): Boolean (js, jvm, native) flush fun flush(): Unit (js, jvm, native) get Returns the byte at pos . operator fun get(pos: Long ): Byte (jvm) getByte fun ~~getByte~~(index: Long ): Byte (js, jvm, native) hashCode fun hashCode(): Int (jvm) hmacSha1 Returns the 160-bit SHA-1 HMAC of this buffer. fun hmacSha1(key: ByteString ): ByteString (jvm) hmacSha256 Returns the 256-bit SHA-256 HMAC of this buffer. fun hmacSha256(key: ByteString ): ByteString (jvm) hmacSha512 Returns the 512-bit SHA-512 HMAC of this buffer. fun hmacSha512(key: ByteString ): ByteString (js, jvm, native) indexOf fun indexOf(b: Byte ): Long fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long fun indexOf(bytes: ByteString ): Long fun indexOf(bytes: ByteString , fromIndex: Long ): Long Returns the index of b in this at or beyond fromIndex , or -1 if this buffer does not contain b in that range. fun indexOf(b: Byte , fromIndex: Long ): Long (js, jvm, native) indexOfElement fun indexOfElement(targetBytes: ByteString ): Long fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long (jvm) inputStream Returns an input stream that reads from this source. fun inputStream(): InputStream (jvm) isOpen fun isOpen(): Boolean (jvm) md5 Returns the 128-bit MD5 hash of this buffer. fun md5(): ByteString (jvm) outputStream Returns an output stream that writes to this sink. fun outputStream(): OutputStream (js, jvm, native) peek fun peek(): BufferedSource (js, jvm, native) rangeEquals fun rangeEquals(offset: Long , bytes: ByteString ): Boolean fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean read (jvm) fun read(sink: ByteBuffer ): Int (js, jvm, native) fun read(sink: ByteArray ): Int (js, jvm, native) fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int (js, jvm, native) fun read(sink: Buffer , byteCount: Long ): Long (js, jvm, native) readAll fun readAll(sink: Sink ): Long (jvm) readAndWriteUnsafe fun readAndWriteUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor (js, jvm, native) readByte fun readByte(): Byte (js, jvm, native) readByteArray fun readByteArray(): ByteArray fun readByteArray(byteCount: Long ): ByteArray (js, jvm, native) readByteString fun readByteString(): ByteString fun readByteString(byteCount: Long ): ByteString (js, jvm, native) readDecimalLong fun readDecimalLong(): Long (jvm) readFrom Read and exhaust bytes from input into this. fun readFrom(input: InputStream ): Buffer Read byteCount bytes from input into this. fun readFrom(input: InputStream , byteCount: Long ): Buffer (js, jvm, native) readFully fun readFully(sink: Buffer , byteCount: Long ): Unit fun readFully(sink: ByteArray ): Unit (js, jvm, native) readHexadecimalUnsignedLong fun readHexadecimalUnsignedLong(): Long (js, jvm, native) readInt fun readInt(): Int (js, jvm, native) readIntLe fun readIntLe(): Int (js, jvm, native) readLong fun readLong(): Long (js, jvm, native) readLongLe fun readLongLe(): Long (js, jvm, native) readShort fun readShort(): Short (js, jvm, native) readShortLe fun readShortLe(): Short (jvm) readString Removes all bytes from this, decodes them as charset , and returns the string. fun readString(charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string. fun readString(byteCount: Long , charset: Charset ): String (jvm) readUnsafe fun readUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor (js, jvm, native) readUtf8 fun readUtf8(): String fun readUtf8(byteCount: Long ): String (js, jvm, native) readUtf8CodePoint fun readUtf8CodePoint(): Int (js, jvm, native) readUtf8Line fun readUtf8Line(): String ? (js, jvm, native) readUtf8LineStrict fun readUtf8LineStrict(): String fun readUtf8LineStrict(limit: Long ): String (js, jvm, native) request fun request(byteCount: Long ): Boolean (js, jvm, native) require fun require(byteCount: Long ): Unit select (native) fun select(options: ERROR CLASS ): Int (js, jvm) fun select(options: Options ): Int (jvm) sha1 Returns the 160-bit SHA-1 hash of this buffer. fun sha1(): ByteString (jvm) sha256 Returns the 256-bit SHA-256 hash of this buffer. fun sha256(): ByteString (jvm) sha512 Returns the 512-bit SHA-512 hash of this buffer. fun sha512(): ByteString (jvm) size fun ~~size~~(): Long (js, jvm, native) skip Discards byteCount bytes from the head of this buffer. fun skip(byteCount: Long ): Unit (js, jvm, native) snapshot Returns an immutable copy of this buffer as a byte string. fun snapshot(): ByteString Returns an immutable copy of the first byteCount bytes of this buffer as a byte string. fun snapshot(byteCount: Int ): ByteString (js, jvm, native) timeout fun timeout(): Timeout toString Returns a human-readable string that describes the contents of this buffer. Typically this is a string like [text=Hello] or [hex=0000ffff] .(js, jvm) fun toString(): String (native) fun toString(): ERROR CLASS write (jvm) fun write(source: ByteBuffer ): Int (js, jvm, native) fun write(byteString: ByteString ): Buffer (js, jvm) fun write(byteString: ByteString , offset: Int , byteCount: Int ): Buffer (native) fun write(byteString: ByteString , offset: Int , byteCount: Int ): ERROR CLASS (js, jvm, native) fun write(source: ByteArray ): Buffer (js, jvm, native) fun write(source: ByteArray , offset: Int , byteCount: Int ): Buffer (js, jvm, native) fun write(source: Source , byteCount: Long ): Buffer (js, jvm, native) fun write(source: Buffer , byteCount: Long ): Unit (js, jvm, native) writeAll fun writeAll(source: Source ): Long (js, jvm, native) writeByte fun writeByte(b: Int ): Buffer (js, jvm, native) writeDecimalLong fun writeDecimalLong(v: Long ): Buffer (js, jvm, native) writeHexadecimalUnsignedLong fun writeHexadecimalUnsignedLong(v: Long ): Buffer (js, jvm, native) writeInt fun writeInt(i: Int ): Buffer (js, jvm, native) writeIntLe fun writeIntLe(i: Int ): Buffer (js, jvm, native) writeLong fun writeLong(v: Long ): Buffer (js, jvm, native) writeLongLe fun writeLongLe(v: Long ): Buffer (js, jvm, native) writeShort fun writeShort(s: Int ): Buffer (js, jvm, native) writeShortLe fun writeShortLe(s: Int ): Buffer (jvm) writeString fun writeString(string: String , charset: Charset ): Buffer fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): Buffer (jvm) writeTo Write byteCount bytes from this to out . fun writeTo(out: OutputStream , byteCount: Long = size): Buffer (js, jvm, native) writeUtf8 fun writeUtf8(string: String ): Buffer fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): Buffer (js, jvm, native) writeUtf8CodePoint fun writeUtf8CodePoint(codePoint: Int ): Buffer Inherited Functions Name Summary (jvm) buffer Returns this source s internal buffer. abstract fun ~~buffer~~(): Buffer (jvm) inputStream Returns an input stream that reads from this source. abstract fun inputStream(): InputStream (jvm) outputStream Returns an output stream that writes to this sink. abstract fun outputStream(): OutputStream (jvm) readString Removes all bytes from this, decodes them as charset , and returns the string. abstract fun readString(charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string. abstract fun readString(byteCount: Long , charset: Charset ): String (jvm) writeString abstract fun writeString(string: String , charset: Charset ): BufferedSink abstract fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): BufferedSink Extension Functions Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Home"},{"location":"2.x/okio/okio/-buffer/#buffer","text":"(js, jvm, native) class Buffer : BufferedSource , BufferedSink A collection of bytes in memory. Moving data from one buffer to another is fast. Instead of copying bytes from one place in memory to another, this class just changes ownership of the underlying byte arrays. This buffer grows with your data. Just like ArrayList, each buffer starts small. It consumes only the memory it needs to. This buffer pools its byte arrays. When you allocate a byte array in Java, the runtime must zero-fill the requested array before returning it to you. Even if you re going to write over that space anyway. This class avoids zero-fill and GC churn by pooling byte arrays.","title":"Buffer"},{"location":"2.x/okio/okio/-buffer/#types","text":"Name Summary (jvm) UnsafeCursor A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. class UnsafeCursor : Closeable","title":"Types"},{"location":"2.x/okio/okio/-buffer/#constructors","text":"Name Summary (js, jvm, native) init A collection of bytes in memory. init ()","title":"Constructors"},{"location":"2.x/okio/okio/-buffer/#properties","text":"Name Summary (js, jvm, native) buffer val buffer: Buffer (js, jvm, native) size var size: Long","title":"Properties"},{"location":"2.x/okio/okio/-buffer/#functions","text":"Name Summary (jvm) buffer Returns this source s internal buffer. fun buffer(): Buffer (js, jvm, native) clear Discards all bytes in this buffer. Calling this method when you re done with a buffer will return its segments to the pool. fun clear(): Unit (jvm) clone Returns a deep copy of this buffer. fun clone(): Buffer (js, jvm, native) close fun close(): Unit (js, jvm, native) completeSegmentByteCount Returns the number of bytes in segments that are not writable. This is the number of bytes that can be flushed immediately to an underlying sink without harming throughput. fun completeSegmentByteCount(): Long (js, jvm, native) copy Returns a deep copy of this buffer. fun copy(): Buffer copyTo Copy byteCount bytes from this, starting at offset , to out .(jvm) fun copyTo(out: OutputStream , offset: Long = 0L, byteCount: Long = size - offset): Buffer (js, jvm) fun copyTo(out: Buffer , offset: Long = 0L, byteCount: Long ): Buffer (native) fun copyTo(out: Buffer , offset: Long , byteCount: Long ): Buffer Overload of copyTo with byteCount = size - offset, work around for https://youtrack.jetbrains.com/issue/KT-30847(js , jvm) fun copyTo(out: Buffer , offset: Long = 0L): Buffer (native) fun copyTo(out: Buffer , offset: Long ): Buffer (js, jvm, native) emit fun emit(): Buffer (js, jvm, native) emitCompleteSegments fun emitCompleteSegments(): Buffer (js, jvm, native) equals fun equals(other: Any ?): Boolean (js, jvm, native) exhausted fun exhausted(): Boolean (js, jvm, native) flush fun flush(): Unit (js, jvm, native) get Returns the byte at pos . operator fun get(pos: Long ): Byte (jvm) getByte fun ~~getByte~~(index: Long ): Byte (js, jvm, native) hashCode fun hashCode(): Int (jvm) hmacSha1 Returns the 160-bit SHA-1 HMAC of this buffer. fun hmacSha1(key: ByteString ): ByteString (jvm) hmacSha256 Returns the 256-bit SHA-256 HMAC of this buffer. fun hmacSha256(key: ByteString ): ByteString (jvm) hmacSha512 Returns the 512-bit SHA-512 HMAC of this buffer. fun hmacSha512(key: ByteString ): ByteString (js, jvm, native) indexOf fun indexOf(b: Byte ): Long fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long fun indexOf(bytes: ByteString ): Long fun indexOf(bytes: ByteString , fromIndex: Long ): Long Returns the index of b in this at or beyond fromIndex , or -1 if this buffer does not contain b in that range. fun indexOf(b: Byte , fromIndex: Long ): Long (js, jvm, native) indexOfElement fun indexOfElement(targetBytes: ByteString ): Long fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long (jvm) inputStream Returns an input stream that reads from this source. fun inputStream(): InputStream (jvm) isOpen fun isOpen(): Boolean (jvm) md5 Returns the 128-bit MD5 hash of this buffer. fun md5(): ByteString (jvm) outputStream Returns an output stream that writes to this sink. fun outputStream(): OutputStream (js, jvm, native) peek fun peek(): BufferedSource (js, jvm, native) rangeEquals fun rangeEquals(offset: Long , bytes: ByteString ): Boolean fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean read (jvm) fun read(sink: ByteBuffer ): Int (js, jvm, native) fun read(sink: ByteArray ): Int (js, jvm, native) fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int (js, jvm, native) fun read(sink: Buffer , byteCount: Long ): Long (js, jvm, native) readAll fun readAll(sink: Sink ): Long (jvm) readAndWriteUnsafe fun readAndWriteUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor (js, jvm, native) readByte fun readByte(): Byte (js, jvm, native) readByteArray fun readByteArray(): ByteArray fun readByteArray(byteCount: Long ): ByteArray (js, jvm, native) readByteString fun readByteString(): ByteString fun readByteString(byteCount: Long ): ByteString (js, jvm, native) readDecimalLong fun readDecimalLong(): Long (jvm) readFrom Read and exhaust bytes from input into this. fun readFrom(input: InputStream ): Buffer Read byteCount bytes from input into this. fun readFrom(input: InputStream , byteCount: Long ): Buffer (js, jvm, native) readFully fun readFully(sink: Buffer , byteCount: Long ): Unit fun readFully(sink: ByteArray ): Unit (js, jvm, native) readHexadecimalUnsignedLong fun readHexadecimalUnsignedLong(): Long (js, jvm, native) readInt fun readInt(): Int (js, jvm, native) readIntLe fun readIntLe(): Int (js, jvm, native) readLong fun readLong(): Long (js, jvm, native) readLongLe fun readLongLe(): Long (js, jvm, native) readShort fun readShort(): Short (js, jvm, native) readShortLe fun readShortLe(): Short (jvm) readString Removes all bytes from this, decodes them as charset , and returns the string. fun readString(charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string. fun readString(byteCount: Long , charset: Charset ): String (jvm) readUnsafe fun readUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor (js, jvm, native) readUtf8 fun readUtf8(): String fun readUtf8(byteCount: Long ): String (js, jvm, native) readUtf8CodePoint fun readUtf8CodePoint(): Int (js, jvm, native) readUtf8Line fun readUtf8Line(): String ? (js, jvm, native) readUtf8LineStrict fun readUtf8LineStrict(): String fun readUtf8LineStrict(limit: Long ): String (js, jvm, native) request fun request(byteCount: Long ): Boolean (js, jvm, native) require fun require(byteCount: Long ): Unit select (native) fun select(options: ERROR CLASS ): Int (js, jvm) fun select(options: Options ): Int (jvm) sha1 Returns the 160-bit SHA-1 hash of this buffer. fun sha1(): ByteString (jvm) sha256 Returns the 256-bit SHA-256 hash of this buffer. fun sha256(): ByteString (jvm) sha512 Returns the 512-bit SHA-512 hash of this buffer. fun sha512(): ByteString (jvm) size fun ~~size~~(): Long (js, jvm, native) skip Discards byteCount bytes from the head of this buffer. fun skip(byteCount: Long ): Unit (js, jvm, native) snapshot Returns an immutable copy of this buffer as a byte string. fun snapshot(): ByteString Returns an immutable copy of the first byteCount bytes of this buffer as a byte string. fun snapshot(byteCount: Int ): ByteString (js, jvm, native) timeout fun timeout(): Timeout toString Returns a human-readable string that describes the contents of this buffer. Typically this is a string like [text=Hello] or [hex=0000ffff] .(js, jvm) fun toString(): String (native) fun toString(): ERROR CLASS write (jvm) fun write(source: ByteBuffer ): Int (js, jvm, native) fun write(byteString: ByteString ): Buffer (js, jvm) fun write(byteString: ByteString , offset: Int , byteCount: Int ): Buffer (native) fun write(byteString: ByteString , offset: Int , byteCount: Int ): ERROR CLASS (js, jvm, native) fun write(source: ByteArray ): Buffer (js, jvm, native) fun write(source: ByteArray , offset: Int , byteCount: Int ): Buffer (js, jvm, native) fun write(source: Source , byteCount: Long ): Buffer (js, jvm, native) fun write(source: Buffer , byteCount: Long ): Unit (js, jvm, native) writeAll fun writeAll(source: Source ): Long (js, jvm, native) writeByte fun writeByte(b: Int ): Buffer (js, jvm, native) writeDecimalLong fun writeDecimalLong(v: Long ): Buffer (js, jvm, native) writeHexadecimalUnsignedLong fun writeHexadecimalUnsignedLong(v: Long ): Buffer (js, jvm, native) writeInt fun writeInt(i: Int ): Buffer (js, jvm, native) writeIntLe fun writeIntLe(i: Int ): Buffer (js, jvm, native) writeLong fun writeLong(v: Long ): Buffer (js, jvm, native) writeLongLe fun writeLongLe(v: Long ): Buffer (js, jvm, native) writeShort fun writeShort(s: Int ): Buffer (js, jvm, native) writeShortLe fun writeShortLe(s: Int ): Buffer (jvm) writeString fun writeString(string: String , charset: Charset ): Buffer fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): Buffer (jvm) writeTo Write byteCount bytes from this to out . fun writeTo(out: OutputStream , byteCount: Long = size): Buffer (js, jvm, native) writeUtf8 fun writeUtf8(string: String ): Buffer fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): Buffer (js, jvm, native) writeUtf8CodePoint fun writeUtf8CodePoint(codePoint: Int ): Buffer","title":"Functions"},{"location":"2.x/okio/okio/-buffer/#inherited-functions","text":"Name Summary (jvm) buffer Returns this source s internal buffer. abstract fun ~~buffer~~(): Buffer (jvm) inputStream Returns an input stream that reads from this source. abstract fun inputStream(): InputStream (jvm) outputStream Returns an output stream that writes to this sink. abstract fun outputStream(): OutputStream (jvm) readString Removes all bytes from this, decodes them as charset , and returns the string. abstract fun readString(charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string. abstract fun readString(byteCount: Long , charset: Charset ): String (jvm) writeString abstract fun writeString(string: String , charset: Charset ): BufferedSink abstract fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): BufferedSink","title":"Inherited Functions"},{"location":"2.x/okio/okio/-buffer/#extension-functions","text":"Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Extension Functions"},{"location":"2.x/okio/okio/-buffer/-init-/","text":"okio / okio / Buffer / init init (js, jvm, native) init () A collection of bytes in memory. Moving data from one buffer to another is fast. Instead of copying bytes from one place in memory to another, this class just changes ownership of the underlying byte arrays. This buffer grows with your data. Just like ArrayList, each buffer starts small. It consumes only the memory it needs to. This buffer pools its byte arrays. When you allocate a byte array in Java, the runtime must zero-fill the requested array before returning it to you. Even if you re going to write over that space anyway. This class avoids zero-fill and GC churn by pooling byte arrays.","title":" init "},{"location":"2.x/okio/okio/-buffer/-init-/#init","text":"(js, jvm, native) init () A collection of bytes in memory. Moving data from one buffer to another is fast. Instead of copying bytes from one place in memory to another, this class just changes ownership of the underlying byte arrays. This buffer grows with your data. Just like ArrayList, each buffer starts small. It consumes only the memory it needs to. This buffer pools its byte arrays. When you allocate a byte array in Java, the runtime must zero-fill the requested array before returning it to you. Even if you re going to write over that space anyway. This class avoids zero-fill and GC churn by pooling byte arrays.","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-buffer/buffer/","text":"okio / okio / Buffer / buffer buffer (js, jvm, native) val buffer: Buffer (jvm) fun buffer(): Buffer Overrides BufferedSource.buffer Overrides BufferedSink.buffer Returns this source s internal buffer.","title":"Buffer"},{"location":"2.x/okio/okio/-buffer/buffer/#buffer","text":"(js, jvm, native) val buffer: Buffer (jvm) fun buffer(): Buffer Overrides BufferedSource.buffer Overrides BufferedSink.buffer Returns this source s internal buffer.","title":"buffer"},{"location":"2.x/okio/okio/-buffer/clear/","text":"okio / okio / Buffer / clear clear (js, jvm, native) fun clear(): Unit Discards all bytes in this buffer. Calling this method when you re done with a buffer will return its segments to the pool.","title":"Clear"},{"location":"2.x/okio/okio/-buffer/clear/#clear","text":"(js, jvm, native) fun clear(): Unit Discards all bytes in this buffer. Calling this method when you re done with a buffer will return its segments to the pool.","title":"clear"},{"location":"2.x/okio/okio/-buffer/clone/","text":"okio / okio / Buffer / clone clone (jvm) fun clone(): Buffer Returns a deep copy of this buffer.","title":"Clone"},{"location":"2.x/okio/okio/-buffer/clone/#clone","text":"(jvm) fun clone(): Buffer Returns a deep copy of this buffer.","title":"clone"},{"location":"2.x/okio/okio/-buffer/close/","text":"okio / okio / Buffer / close close (js, jvm, native) fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-buffer/close/#close","text":"(js, jvm, native) fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-buffer/complete-segment-byte-count/","text":"okio / okio / Buffer / completeSegmentByteCount completeSegmentByteCount (js, jvm, native) fun completeSegmentByteCount(): Long Returns the number of bytes in segments that are not writable. This is the number of bytes that can be flushed immediately to an underlying sink without harming throughput.","title":"Complete segment byte count"},{"location":"2.x/okio/okio/-buffer/complete-segment-byte-count/#completesegmentbytecount","text":"(js, jvm, native) fun completeSegmentByteCount(): Long Returns the number of bytes in segments that are not writable. This is the number of bytes that can be flushed immediately to an underlying sink without harming throughput.","title":"completeSegmentByteCount"},{"location":"2.x/okio/okio/-buffer/copy-to/","text":"okio / okio / Buffer / copyTo copyTo (js, jvm) fun copyTo(out: Buffer , offset: Long = 0L, byteCount: Long ): Buffer (native) fun copyTo(out: Buffer , offset: Long , byteCount: Long ): Buffer Copy byteCount bytes from this, starting at offset , to out . (js, jvm) fun copyTo(out: Buffer , offset: Long = 0L): Buffer (native) fun copyTo(out: Buffer , offset: Long ): Buffer Overload of copyTo with byteCount = size - offset, work around for https://youtrack.jetbrains.com/issue/KT-30847 (jvm) @JvmOverloads fun copyTo(out: OutputStream , offset: Long = 0L, byteCount: Long = size - offset): Buffer Copy byteCount bytes from this, starting at offset , to out .","title":"Copy to"},{"location":"2.x/okio/okio/-buffer/copy-to/#copyto","text":"(js, jvm) fun copyTo(out: Buffer , offset: Long = 0L, byteCount: Long ): Buffer (native) fun copyTo(out: Buffer , offset: Long , byteCount: Long ): Buffer Copy byteCount bytes from this, starting at offset , to out . (js, jvm) fun copyTo(out: Buffer , offset: Long = 0L): Buffer (native) fun copyTo(out: Buffer , offset: Long ): Buffer Overload of copyTo with byteCount = size - offset, work around for https://youtrack.jetbrains.com/issue/KT-30847 (jvm) @JvmOverloads fun copyTo(out: OutputStream , offset: Long = 0L, byteCount: Long = size - offset): Buffer Copy byteCount bytes from this, starting at offset , to out .","title":"copyTo"},{"location":"2.x/okio/okio/-buffer/copy/","text":"okio / okio / Buffer / copy copy (js, jvm, native) fun copy(): Buffer Returns a deep copy of this buffer.","title":"Copy"},{"location":"2.x/okio/okio/-buffer/copy/#copy","text":"(js, jvm, native) fun copy(): Buffer Returns a deep copy of this buffer.","title":"copy"},{"location":"2.x/okio/okio/-buffer/emit-complete-segments/","text":"okio / okio / Buffer / emitCompleteSegments emitCompleteSegments (js, jvm, native) fun emitCompleteSegments(): Buffer","title":"Emit complete segments"},{"location":"2.x/okio/okio/-buffer/emit-complete-segments/#emitcompletesegments","text":"(js, jvm, native) fun emitCompleteSegments(): Buffer","title":"emitCompleteSegments"},{"location":"2.x/okio/okio/-buffer/emit/","text":"okio / okio / Buffer / emit emit (js, jvm, native) fun emit(): Buffer","title":"Emit"},{"location":"2.x/okio/okio/-buffer/emit/#emit","text":"(js, jvm, native) fun emit(): Buffer","title":"emit"},{"location":"2.x/okio/okio/-buffer/equals/","text":"okio / okio / Buffer / equals equals (js, jvm, native) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"2.x/okio/okio/-buffer/equals/#equals","text":"(js, jvm, native) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"2.x/okio/okio/-buffer/exhausted/","text":"okio / okio / Buffer / exhausted exhausted (js, jvm, native) fun exhausted(): Boolean","title":"Exhausted"},{"location":"2.x/okio/okio/-buffer/exhausted/#exhausted","text":"(js, jvm, native) fun exhausted(): Boolean","title":"exhausted"},{"location":"2.x/okio/okio/-buffer/flush/","text":"okio / okio / Buffer / flush flush (js, jvm, native) fun flush(): Unit","title":"Flush"},{"location":"2.x/okio/okio/-buffer/flush/#flush","text":"(js, jvm, native) fun flush(): Unit","title":"flush"},{"location":"2.x/okio/okio/-buffer/get-byte/","text":"okio / okio / Buffer / getByte getByte (jvm) @JvmName(\"-deprecated_getByte\") fun ~~getByte~~(index: Long ): Byte Deprecated: moved to operator function","title":"Get byte"},{"location":"2.x/okio/okio/-buffer/get-byte/#getbyte","text":"(jvm) @JvmName(\"-deprecated_getByte\") fun ~~getByte~~(index: Long ): Byte Deprecated: moved to operator function","title":"getByte"},{"location":"2.x/okio/okio/-buffer/get/","text":"okio / okio / Buffer / get get (js, jvm, native) operator fun get(pos: Long ): Byte Returns the byte at pos .","title":"Get"},{"location":"2.x/okio/okio/-buffer/get/#get","text":"(js, jvm, native) operator fun get(pos: Long ): Byte Returns the byte at pos .","title":"get"},{"location":"2.x/okio/okio/-buffer/hash-code/","text":"okio / okio / Buffer / hashCode hashCode (js, jvm, native) fun hashCode(): Int","title":"Hash code"},{"location":"2.x/okio/okio/-buffer/hash-code/#hashcode","text":"(js, jvm, native) fun hashCode(): Int","title":"hashCode"},{"location":"2.x/okio/okio/-buffer/hmac-sha1/","text":"okio / okio / Buffer / hmacSha1 hmacSha1 (jvm) fun hmacSha1(key: ByteString ): ByteString Returns the 160-bit SHA-1 HMAC of this buffer.","title":"Hmac sha1"},{"location":"2.x/okio/okio/-buffer/hmac-sha1/#hmacsha1","text":"(jvm) fun hmacSha1(key: ByteString ): ByteString Returns the 160-bit SHA-1 HMAC of this buffer.","title":"hmacSha1"},{"location":"2.x/okio/okio/-buffer/hmac-sha256/","text":"okio / okio / Buffer / hmacSha256 hmacSha256 (jvm) fun hmacSha256(key: ByteString ): ByteString Returns the 256-bit SHA-256 HMAC of this buffer.","title":"Hmac sha256"},{"location":"2.x/okio/okio/-buffer/hmac-sha256/#hmacsha256","text":"(jvm) fun hmacSha256(key: ByteString ): ByteString Returns the 256-bit SHA-256 HMAC of this buffer.","title":"hmacSha256"},{"location":"2.x/okio/okio/-buffer/hmac-sha512/","text":"okio / okio / Buffer / hmacSha512 hmacSha512 (jvm) fun hmacSha512(key: ByteString ): ByteString Returns the 512-bit SHA-512 HMAC of this buffer.","title":"Hmac sha512"},{"location":"2.x/okio/okio/-buffer/hmac-sha512/#hmacsha512","text":"(jvm) fun hmacSha512(key: ByteString ): ByteString Returns the 512-bit SHA-512 HMAC of this buffer.","title":"hmacSha512"},{"location":"2.x/okio/okio/-buffer/index-of-element/","text":"okio / okio / Buffer / indexOfElement indexOfElement (js, jvm, native) fun indexOfElement(targetBytes: ByteString ): Long fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long","title":"Index of element"},{"location":"2.x/okio/okio/-buffer/index-of-element/#indexofelement","text":"(js, jvm, native) fun indexOfElement(targetBytes: ByteString ): Long fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long","title":"indexOfElement"},{"location":"2.x/okio/okio/-buffer/index-of/","text":"okio / okio / Buffer / indexOf indexOf (js, jvm, native) fun indexOf(b: Byte ): Long fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long fun indexOf(bytes: ByteString ): Long fun indexOf(bytes: ByteString , fromIndex: Long ): Long (js, jvm, native) fun indexOf(b: Byte , fromIndex: Long ): Long Returns the index of b in this at or beyond fromIndex , or -1 if this buffer does not contain b in that range.","title":"Index of"},{"location":"2.x/okio/okio/-buffer/index-of/#indexof","text":"(js, jvm, native) fun indexOf(b: Byte ): Long fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long fun indexOf(bytes: ByteString ): Long fun indexOf(bytes: ByteString , fromIndex: Long ): Long (js, jvm, native) fun indexOf(b: Byte , fromIndex: Long ): Long Returns the index of b in this at or beyond fromIndex , or -1 if this buffer does not contain b in that range.","title":"indexOf"},{"location":"2.x/okio/okio/-buffer/input-stream/","text":"okio / okio / Buffer / inputStream inputStream (jvm) fun inputStream(): InputStream Overrides BufferedSource.inputStream Returns an input stream that reads from this source.","title":"Input stream"},{"location":"2.x/okio/okio/-buffer/input-stream/#inputstream","text":"(jvm) fun inputStream(): InputStream Overrides BufferedSource.inputStream Returns an input stream that reads from this source.","title":"inputStream"},{"location":"2.x/okio/okio/-buffer/is-open/","text":"okio / okio / Buffer / isOpen isOpen (jvm) fun isOpen(): Boolean","title":"Is open"},{"location":"2.x/okio/okio/-buffer/is-open/#isopen","text":"(jvm) fun isOpen(): Boolean","title":"isOpen"},{"location":"2.x/okio/okio/-buffer/md5/","text":"okio / okio / Buffer / md5 md5 (jvm) fun md5(): ByteString Returns the 128-bit MD5 hash of this buffer.","title":"Md5"},{"location":"2.x/okio/okio/-buffer/md5/#md5","text":"(jvm) fun md5(): ByteString Returns the 128-bit MD5 hash of this buffer.","title":"md5"},{"location":"2.x/okio/okio/-buffer/output-stream/","text":"okio / okio / Buffer / outputStream outputStream (jvm) fun outputStream(): OutputStream Overrides BufferedSink.outputStream Returns an output stream that writes to this sink.","title":"Output stream"},{"location":"2.x/okio/okio/-buffer/output-stream/#outputstream","text":"(jvm) fun outputStream(): OutputStream Overrides BufferedSink.outputStream Returns an output stream that writes to this sink.","title":"outputStream"},{"location":"2.x/okio/okio/-buffer/peek/","text":"okio / okio / Buffer / peek peek (js, jvm, native) fun peek(): BufferedSource","title":"Peek"},{"location":"2.x/okio/okio/-buffer/peek/#peek","text":"(js, jvm, native) fun peek(): BufferedSource","title":"peek"},{"location":"2.x/okio/okio/-buffer/range-equals/","text":"okio / okio / Buffer / rangeEquals rangeEquals (js, jvm, native) fun rangeEquals(offset: Long , bytes: ByteString ): Boolean fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean","title":"Range equals"},{"location":"2.x/okio/okio/-buffer/range-equals/#rangeequals","text":"(js, jvm, native) fun rangeEquals(offset: Long , bytes: ByteString ): Boolean fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean","title":"rangeEquals"},{"location":"2.x/okio/okio/-buffer/read-all/","text":"okio / okio / Buffer / readAll readAll (js, jvm, native) fun readAll(sink: Sink ): Long","title":"Read all"},{"location":"2.x/okio/okio/-buffer/read-all/#readall","text":"(js, jvm, native) fun readAll(sink: Sink ): Long","title":"readAll"},{"location":"2.x/okio/okio/-buffer/read-and-write-unsafe/","text":"okio / okio / Buffer / readAndWriteUnsafe readAndWriteUnsafe (jvm) @JvmOverloads fun readAndWriteUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor","title":"Read and write unsafe"},{"location":"2.x/okio/okio/-buffer/read-and-write-unsafe/#readandwriteunsafe","text":"(jvm) @JvmOverloads fun readAndWriteUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor","title":"readAndWriteUnsafe"},{"location":"2.x/okio/okio/-buffer/read-byte-array/","text":"okio / okio / Buffer / readByteArray readByteArray (js, jvm, native) fun readByteArray(): ByteArray fun readByteArray(byteCount: Long ): ByteArray","title":"Read byte array"},{"location":"2.x/okio/okio/-buffer/read-byte-array/#readbytearray","text":"(js, jvm, native) fun readByteArray(): ByteArray fun readByteArray(byteCount: Long ): ByteArray","title":"readByteArray"},{"location":"2.x/okio/okio/-buffer/read-byte-string/","text":"okio / okio / Buffer / readByteString readByteString (js, jvm, native) fun readByteString(): ByteString fun readByteString(byteCount: Long ): ByteString","title":"Read byte string"},{"location":"2.x/okio/okio/-buffer/read-byte-string/#readbytestring","text":"(js, jvm, native) fun readByteString(): ByteString fun readByteString(byteCount: Long ): ByteString","title":"readByteString"},{"location":"2.x/okio/okio/-buffer/read-byte/","text":"okio / okio / Buffer / readByte readByte (js, jvm, native) fun readByte(): Byte","title":"Read byte"},{"location":"2.x/okio/okio/-buffer/read-byte/#readbyte","text":"(js, jvm, native) fun readByte(): Byte","title":"readByte"},{"location":"2.x/okio/okio/-buffer/read-decimal-long/","text":"okio / okio / Buffer / readDecimalLong readDecimalLong (js, jvm, native) fun readDecimalLong(): Long","title":"Read decimal long"},{"location":"2.x/okio/okio/-buffer/read-decimal-long/#readdecimallong","text":"(js, jvm, native) fun readDecimalLong(): Long","title":"readDecimalLong"},{"location":"2.x/okio/okio/-buffer/read-from/","text":"okio / okio / Buffer / readFrom readFrom (jvm) fun readFrom(input: InputStream ): Buffer Read and exhaust bytes from input into this. (jvm) fun readFrom(input: InputStream , byteCount: Long ): Buffer Read byteCount bytes from input into this.","title":"Read from"},{"location":"2.x/okio/okio/-buffer/read-from/#readfrom","text":"(jvm) fun readFrom(input: InputStream ): Buffer Read and exhaust bytes from input into this. (jvm) fun readFrom(input: InputStream , byteCount: Long ): Buffer Read byteCount bytes from input into this.","title":"readFrom"},{"location":"2.x/okio/okio/-buffer/read-fully/","text":"okio / okio / Buffer / readFully readFully (js, jvm, native) fun readFully(sink: Buffer , byteCount: Long ): Unit fun readFully(sink: ByteArray ): Unit","title":"Read fully"},{"location":"2.x/okio/okio/-buffer/read-fully/#readfully","text":"(js, jvm, native) fun readFully(sink: Buffer , byteCount: Long ): Unit fun readFully(sink: ByteArray ): Unit","title":"readFully"},{"location":"2.x/okio/okio/-buffer/read-hexadecimal-unsigned-long/","text":"okio / okio / Buffer / readHexadecimalUnsignedLong readHexadecimalUnsignedLong (js, jvm, native) fun readHexadecimalUnsignedLong(): Long","title":"Read hexadecimal unsigned long"},{"location":"2.x/okio/okio/-buffer/read-hexadecimal-unsigned-long/#readhexadecimalunsignedlong","text":"(js, jvm, native) fun readHexadecimalUnsignedLong(): Long","title":"readHexadecimalUnsignedLong"},{"location":"2.x/okio/okio/-buffer/read-int-le/","text":"okio / okio / Buffer / readIntLe readIntLe (js, jvm, native) fun readIntLe(): Int","title":"Read int le"},{"location":"2.x/okio/okio/-buffer/read-int-le/#readintle","text":"(js, jvm, native) fun readIntLe(): Int","title":"readIntLe"},{"location":"2.x/okio/okio/-buffer/read-int/","text":"okio / okio / Buffer / readInt readInt (js, jvm, native) fun readInt(): Int","title":"Read int"},{"location":"2.x/okio/okio/-buffer/read-int/#readint","text":"(js, jvm, native) fun readInt(): Int","title":"readInt"},{"location":"2.x/okio/okio/-buffer/read-long-le/","text":"okio / okio / Buffer / readLongLe readLongLe (js, jvm, native) fun readLongLe(): Long","title":"Read long le"},{"location":"2.x/okio/okio/-buffer/read-long-le/#readlongle","text":"(js, jvm, native) fun readLongLe(): Long","title":"readLongLe"},{"location":"2.x/okio/okio/-buffer/read-long/","text":"okio / okio / Buffer / readLong readLong (js, jvm, native) fun readLong(): Long","title":"Read long"},{"location":"2.x/okio/okio/-buffer/read-long/#readlong","text":"(js, jvm, native) fun readLong(): Long","title":"readLong"},{"location":"2.x/okio/okio/-buffer/read-short-le/","text":"okio / okio / Buffer / readShortLe readShortLe (js, jvm, native) fun readShortLe(): Short","title":"Read short le"},{"location":"2.x/okio/okio/-buffer/read-short-le/#readshortle","text":"(js, jvm, native) fun readShortLe(): Short","title":"readShortLe"},{"location":"2.x/okio/okio/-buffer/read-short/","text":"okio / okio / Buffer / readShort readShort (js, jvm, native) fun readShort(): Short","title":"Read short"},{"location":"2.x/okio/okio/-buffer/read-short/#readshort","text":"(js, jvm, native) fun readShort(): Short","title":"readShort"},{"location":"2.x/okio/okio/-buffer/read-string/","text":"okio / okio / Buffer / readString readString (jvm) fun readString(charset: Charset ): String Overrides BufferedSource.readString Removes all bytes from this, decodes them as charset , and returns the string. (jvm) fun readString(byteCount: Long , charset: Charset ): String Overrides BufferedSource.readString Removes byteCount bytes from this, decodes them as charset , and returns the string.","title":"Read string"},{"location":"2.x/okio/okio/-buffer/read-string/#readstring","text":"(jvm) fun readString(charset: Charset ): String Overrides BufferedSource.readString Removes all bytes from this, decodes them as charset , and returns the string. (jvm) fun readString(byteCount: Long , charset: Charset ): String Overrides BufferedSource.readString Removes byteCount bytes from this, decodes them as charset , and returns the string.","title":"readString"},{"location":"2.x/okio/okio/-buffer/read-unsafe/","text":"okio / okio / Buffer / readUnsafe readUnsafe (jvm) @JvmOverloads fun readUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor","title":"Read unsafe"},{"location":"2.x/okio/okio/-buffer/read-unsafe/#readunsafe","text":"(jvm) @JvmOverloads fun readUnsafe(unsafeCursor: Buffer.UnsafeCursor = UnsafeCursor()): Buffer.UnsafeCursor","title":"readUnsafe"},{"location":"2.x/okio/okio/-buffer/read-utf8-code-point/","text":"okio / okio / Buffer / readUtf8CodePoint readUtf8CodePoint (js, jvm, native) fun readUtf8CodePoint(): Int","title":"Read utf8 code point"},{"location":"2.x/okio/okio/-buffer/read-utf8-code-point/#readutf8codepoint","text":"(js, jvm, native) fun readUtf8CodePoint(): Int","title":"readUtf8CodePoint"},{"location":"2.x/okio/okio/-buffer/read-utf8-line-strict/","text":"okio / okio / Buffer / readUtf8LineStrict readUtf8LineStrict (js, jvm, native) fun readUtf8LineStrict(): String fun readUtf8LineStrict(limit: Long ): String","title":"Read utf8 line strict"},{"location":"2.x/okio/okio/-buffer/read-utf8-line-strict/#readutf8linestrict","text":"(js, jvm, native) fun readUtf8LineStrict(): String fun readUtf8LineStrict(limit: Long ): String","title":"readUtf8LineStrict"},{"location":"2.x/okio/okio/-buffer/read-utf8-line/","text":"okio / okio / Buffer / readUtf8Line readUtf8Line (js, jvm, native) fun readUtf8Line(): String ?","title":"Read utf8 line"},{"location":"2.x/okio/okio/-buffer/read-utf8-line/#readutf8line","text":"(js, jvm, native) fun readUtf8Line(): String ?","title":"readUtf8Line"},{"location":"2.x/okio/okio/-buffer/read-utf8/","text":"okio / okio / Buffer / readUtf8 readUtf8 (js, jvm, native) fun readUtf8(): String fun readUtf8(byteCount: Long ): String","title":"Read utf8"},{"location":"2.x/okio/okio/-buffer/read-utf8/#readutf8","text":"(js, jvm, native) fun readUtf8(): String fun readUtf8(byteCount: Long ): String","title":"readUtf8"},{"location":"2.x/okio/okio/-buffer/read/","text":"okio / okio / Buffer / read read (js, jvm, native) fun read(sink: ByteArray ): Int fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int fun read(sink: Buffer , byteCount: Long ): Long (jvm) fun read(sink: ByteBuffer ): Int","title":"Read"},{"location":"2.x/okio/okio/-buffer/read/#read","text":"(js, jvm, native) fun read(sink: ByteArray ): Int fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int fun read(sink: Buffer , byteCount: Long ): Long (jvm) fun read(sink: ByteBuffer ): Int","title":"read"},{"location":"2.x/okio/okio/-buffer/request/","text":"okio / okio / Buffer / request request (js, jvm, native) fun request(byteCount: Long ): Boolean","title":"Request"},{"location":"2.x/okio/okio/-buffer/request/#request","text":"(js, jvm, native) fun request(byteCount: Long ): Boolean","title":"request"},{"location":"2.x/okio/okio/-buffer/require/","text":"okio / okio / Buffer / require require (js, jvm, native) fun require(byteCount: Long ): Unit","title":"Require"},{"location":"2.x/okio/okio/-buffer/require/#require","text":"(js, jvm, native) fun require(byteCount: Long ): Unit","title":"require"},{"location":"2.x/okio/okio/-buffer/select/","text":"okio / okio / Buffer / select select (js, jvm) fun select(options: Options ): Int (native) fun select(options: ERROR CLASS ): Int Overrides BufferedSource.select","title":"Select"},{"location":"2.x/okio/okio/-buffer/select/#select","text":"(js, jvm) fun select(options: Options ): Int (native) fun select(options: ERROR CLASS ): Int Overrides BufferedSource.select","title":"select"},{"location":"2.x/okio/okio/-buffer/sha1/","text":"okio / okio / Buffer / sha1 sha1 (jvm) fun sha1(): ByteString Returns the 160-bit SHA-1 hash of this buffer.","title":"Sha1"},{"location":"2.x/okio/okio/-buffer/sha1/#sha1","text":"(jvm) fun sha1(): ByteString Returns the 160-bit SHA-1 hash of this buffer.","title":"sha1"},{"location":"2.x/okio/okio/-buffer/sha256/","text":"okio / okio / Buffer / sha256 sha256 (jvm) fun sha256(): ByteString Returns the 256-bit SHA-256 hash of this buffer.","title":"Sha256"},{"location":"2.x/okio/okio/-buffer/sha256/#sha256","text":"(jvm) fun sha256(): ByteString Returns the 256-bit SHA-256 hash of this buffer.","title":"sha256"},{"location":"2.x/okio/okio/-buffer/sha512/","text":"okio / okio / Buffer / sha512 sha512 (jvm) fun sha512(): ByteString Returns the 512-bit SHA-512 hash of this buffer.","title":"Sha512"},{"location":"2.x/okio/okio/-buffer/sha512/#sha512","text":"(jvm) fun sha512(): ByteString Returns the 512-bit SHA-512 hash of this buffer.","title":"sha512"},{"location":"2.x/okio/okio/-buffer/size/","text":"okio / okio / Buffer / size size (js, jvm, native) var size: Long (jvm) @JvmName(\"-deprecated_size\") fun ~~size~~(): Long Deprecated: moved to val","title":"Size"},{"location":"2.x/okio/okio/-buffer/size/#size","text":"(js, jvm, native) var size: Long (jvm) @JvmName(\"-deprecated_size\") fun ~~size~~(): Long Deprecated: moved to val","title":"size"},{"location":"2.x/okio/okio/-buffer/skip/","text":"okio / okio / Buffer / skip skip (js, jvm, native) fun skip(byteCount: Long ): Unit Discards byteCount bytes from the head of this buffer.","title":"Skip"},{"location":"2.x/okio/okio/-buffer/skip/#skip","text":"(js, jvm, native) fun skip(byteCount: Long ): Unit Discards byteCount bytes from the head of this buffer.","title":"skip"},{"location":"2.x/okio/okio/-buffer/snapshot/","text":"okio / okio / Buffer / snapshot snapshot (js, jvm, native) fun snapshot(): ByteString Returns an immutable copy of this buffer as a byte string. (js, jvm, native) fun snapshot(byteCount: Int ): ByteString Returns an immutable copy of the first byteCount bytes of this buffer as a byte string.","title":"Snapshot"},{"location":"2.x/okio/okio/-buffer/snapshot/#snapshot","text":"(js, jvm, native) fun snapshot(): ByteString Returns an immutable copy of this buffer as a byte string. (js, jvm, native) fun snapshot(byteCount: Int ): ByteString Returns an immutable copy of the first byteCount bytes of this buffer as a byte string.","title":"snapshot"},{"location":"2.x/okio/okio/-buffer/timeout/","text":"okio / okio / Buffer / timeout timeout (js, jvm, native) fun timeout(): Timeout","title":"Timeout"},{"location":"2.x/okio/okio/-buffer/timeout/#timeout","text":"(js, jvm, native) fun timeout(): Timeout","title":"timeout"},{"location":"2.x/okio/okio/-buffer/to-string/","text":"okio / okio / Buffer / toString toString (js, jvm) fun toString(): String (native) fun toString(): ERROR CLASS Returns a human-readable string that describes the contents of this buffer. Typically this is a string like [text=Hello] or [hex=0000ffff] .","title":"To string"},{"location":"2.x/okio/okio/-buffer/to-string/#tostring","text":"(js, jvm) fun toString(): String (native) fun toString(): ERROR CLASS Returns a human-readable string that describes the contents of this buffer. Typically this is a string like [text=Hello] or [hex=0000ffff] .","title":"toString"},{"location":"2.x/okio/okio/-buffer/write-all/","text":"okio / okio / Buffer / writeAll writeAll (js, jvm, native) fun writeAll(source: Source ): Long","title":"Write all"},{"location":"2.x/okio/okio/-buffer/write-all/#writeall","text":"(js, jvm, native) fun writeAll(source: Source ): Long","title":"writeAll"},{"location":"2.x/okio/okio/-buffer/write-byte/","text":"okio / okio / Buffer / writeByte writeByte (js, jvm, native) fun writeByte(b: Int ): Buffer","title":"Write byte"},{"location":"2.x/okio/okio/-buffer/write-byte/#writebyte","text":"(js, jvm, native) fun writeByte(b: Int ): Buffer","title":"writeByte"},{"location":"2.x/okio/okio/-buffer/write-decimal-long/","text":"okio / okio / Buffer / writeDecimalLong writeDecimalLong (js, jvm, native) fun writeDecimalLong(v: Long ): Buffer","title":"Write decimal long"},{"location":"2.x/okio/okio/-buffer/write-decimal-long/#writedecimallong","text":"(js, jvm, native) fun writeDecimalLong(v: Long ): Buffer","title":"writeDecimalLong"},{"location":"2.x/okio/okio/-buffer/write-hexadecimal-unsigned-long/","text":"okio / okio / Buffer / writeHexadecimalUnsignedLong writeHexadecimalUnsignedLong (js, jvm, native) fun writeHexadecimalUnsignedLong(v: Long ): Buffer","title":"Write hexadecimal unsigned long"},{"location":"2.x/okio/okio/-buffer/write-hexadecimal-unsigned-long/#writehexadecimalunsignedlong","text":"(js, jvm, native) fun writeHexadecimalUnsignedLong(v: Long ): Buffer","title":"writeHexadecimalUnsignedLong"},{"location":"2.x/okio/okio/-buffer/write-int-le/","text":"okio / okio / Buffer / writeIntLe writeIntLe (js, jvm, native) fun writeIntLe(i: Int ): Buffer","title":"Write int le"},{"location":"2.x/okio/okio/-buffer/write-int-le/#writeintle","text":"(js, jvm, native) fun writeIntLe(i: Int ): Buffer","title":"writeIntLe"},{"location":"2.x/okio/okio/-buffer/write-int/","text":"okio / okio / Buffer / writeInt writeInt (js, jvm, native) fun writeInt(i: Int ): Buffer","title":"Write int"},{"location":"2.x/okio/okio/-buffer/write-int/#writeint","text":"(js, jvm, native) fun writeInt(i: Int ): Buffer","title":"writeInt"},{"location":"2.x/okio/okio/-buffer/write-long-le/","text":"okio / okio / Buffer / writeLongLe writeLongLe (js, jvm, native) fun writeLongLe(v: Long ): Buffer","title":"Write long le"},{"location":"2.x/okio/okio/-buffer/write-long-le/#writelongle","text":"(js, jvm, native) fun writeLongLe(v: Long ): Buffer","title":"writeLongLe"},{"location":"2.x/okio/okio/-buffer/write-long/","text":"okio / okio / Buffer / writeLong writeLong (js, jvm, native) fun writeLong(v: Long ): Buffer","title":"Write long"},{"location":"2.x/okio/okio/-buffer/write-long/#writelong","text":"(js, jvm, native) fun writeLong(v: Long ): Buffer","title":"writeLong"},{"location":"2.x/okio/okio/-buffer/write-short-le/","text":"okio / okio / Buffer / writeShortLe writeShortLe (js, jvm, native) fun writeShortLe(s: Int ): Buffer","title":"Write short le"},{"location":"2.x/okio/okio/-buffer/write-short-le/#writeshortle","text":"(js, jvm, native) fun writeShortLe(s: Int ): Buffer","title":"writeShortLe"},{"location":"2.x/okio/okio/-buffer/write-short/","text":"okio / okio / Buffer / writeShort writeShort (js, jvm, native) fun writeShort(s: Int ): Buffer","title":"Write short"},{"location":"2.x/okio/okio/-buffer/write-short/#writeshort","text":"(js, jvm, native) fun writeShort(s: Int ): Buffer","title":"writeShort"},{"location":"2.x/okio/okio/-buffer/write-string/","text":"okio / okio / Buffer / writeString writeString (jvm) fun writeString(string: String , charset: Charset ): Buffer Overrides BufferedSink.writeString fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): Buffer Overrides BufferedSink.writeString","title":"Write string"},{"location":"2.x/okio/okio/-buffer/write-string/#writestring","text":"(jvm) fun writeString(string: String , charset: Charset ): Buffer Overrides BufferedSink.writeString fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): Buffer Overrides BufferedSink.writeString","title":"writeString"},{"location":"2.x/okio/okio/-buffer/write-to/","text":"okio / okio / Buffer / writeTo writeTo (jvm) @JvmOverloads fun writeTo(out: OutputStream , byteCount: Long = size): Buffer Write byteCount bytes from this to out .","title":"Write to"},{"location":"2.x/okio/okio/-buffer/write-to/#writeto","text":"(jvm) @JvmOverloads fun writeTo(out: OutputStream , byteCount: Long = size): Buffer Write byteCount bytes from this to out .","title":"writeTo"},{"location":"2.x/okio/okio/-buffer/write-utf8-code-point/","text":"okio / okio / Buffer / writeUtf8CodePoint writeUtf8CodePoint (js, jvm, native) fun writeUtf8CodePoint(codePoint: Int ): Buffer","title":"Write utf8 code point"},{"location":"2.x/okio/okio/-buffer/write-utf8-code-point/#writeutf8codepoint","text":"(js, jvm, native) fun writeUtf8CodePoint(codePoint: Int ): Buffer","title":"writeUtf8CodePoint"},{"location":"2.x/okio/okio/-buffer/write-utf8/","text":"okio / okio / Buffer / writeUtf8 writeUtf8 (js, jvm, native) fun writeUtf8(string: String ): Buffer fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): Buffer","title":"Write utf8"},{"location":"2.x/okio/okio/-buffer/write-utf8/#writeutf8","text":"(js, jvm, native) fun writeUtf8(string: String ): Buffer fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): Buffer","title":"writeUtf8"},{"location":"2.x/okio/okio/-buffer/write/","text":"okio / okio / Buffer / write write (js, jvm, native) fun write(byteString: ByteString ): Buffer (js, jvm) fun write(byteString: ByteString , offset: Int , byteCount: Int ): Buffer (native) fun write(byteString: ByteString , offset: Int , byteCount: Int ): ERROR CLASS (js, jvm, native) fun write(source: ByteArray ): Buffer (js, jvm, native) fun write(source: ByteArray , offset: Int , byteCount: Int ): Buffer (js, jvm, native) fun write(source: Source , byteCount: Long ): Buffer (js, jvm, native) fun write(source: Buffer , byteCount: Long ): Unit (jvm) fun write(source: ByteBuffer ): Int","title":"Write"},{"location":"2.x/okio/okio/-buffer/write/#write","text":"(js, jvm, native) fun write(byteString: ByteString ): Buffer (js, jvm) fun write(byteString: ByteString , offset: Int , byteCount: Int ): Buffer (native) fun write(byteString: ByteString , offset: Int , byteCount: Int ): ERROR CLASS (js, jvm, native) fun write(source: ByteArray ): Buffer (js, jvm, native) fun write(source: ByteArray , offset: Int , byteCount: Int ): Buffer (js, jvm, native) fun write(source: Source , byteCount: Long ): Buffer (js, jvm, native) fun write(source: Buffer , byteCount: Long ): Unit (jvm) fun write(source: ByteBuffer ): Int","title":"write"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/","text":"okio / okio / Buffer / UnsafeCursor UnsafeCursor (jvm) class UnsafeCursor : Closeable A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. Buffer Internals Most code should use Buffer as a black box: a class that holds 0 or more bytes of data with efficient APIs to append data to the end and to consume data from the front. Usually this is also the most efficient way to use buffers because it allows Okio to employ several optimizations, including: Fast Allocation: Buffers use a shared pool of memory that is not zero-filled before use. Fast Resize: A buffer s capacity can change without copying its contents. Fast Move: Memory ownership can be reassigned from one buffer to another. Fast Copy: Multiple buffers can share the same underlying memory. Fast Encoding and Decoding: Common operations like UTF-8 encoding and decimal decoding do not require intermediate objects to be allocated. These optimizations all leverage the way Okio stores data internally. Okio Buffers are implemented using a doubly-linked list of segments. Each segment is a contiguous range within a 8 KiB ByteArray . Each segment has two indexes, start , the offset of the first byte of the array containing application data, and end , the offset of the first byte beyond start whose data is undefined. New buffers are empty and have no segments: val buffer = Buffer() We append 7 bytes of data to the end of our empty buffer. Internally, the buffer allocates a segment and writes its new data there. The lone segment has an 8 KiB byte array but only 7 bytes of data: buffer.writeUtf8( sealion ) // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 7 When we read 4 bytes of data from the buffer, it finds its first segment and returns that data to us. As bytes are read the data is consumed. The segment tracks this by adjusting its internal indices. buffer.readUtf8(4) // seal // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 4 end = 7 As we write data into a buffer we fill up its internal segments. When a write doesn t fit into a buffer s last segment, additional segments are allocated and appended to the linked list of segments. Each segment has its own start and end indexes tracking where the user s data begins and ends. val xoxo = new Buffer() xoxo.writeUtf8( xo .repeat(5_000)) // [ x , o , x , o , x , o , x , o , ..., x , o , x , o ] // ^ ^ // start = 0 end = 8192 // // [ x , o , x , o , ..., x , o , x , o , ? , ? , ? , ...] // ^ ^ // start = 0 end = 1808 The start index is always inclusive and the end index is always exclusive . The data preceding the start index is undefined, and the data at and following the end index is undefined. After the last byte of a segment has been read, that segment may be returned to an internal segment pool. In addition to reducing the need to do garbage collection, segment pooling also saves the JVM from needing to zero-fill byte arrays. Okio doesn t need to zero-fill its arrays because it always writes memory before it reads it. But if you look at a segment in a debugger you may see its effects. In this example, one of the xoxo segments above is reused in an unrelated buffer: val abc = new Buffer() abc.writeUtf8( abc ) // [ a , b , c , o , x , o , x , o , ...] // ^ ^ // start = 0 end = 3 There is an optimization in Buffer.clone() and other methods that allows two segments to share the same underlying byte array. Clones can t write to the shared byte array; instead they allocate a new (private) segment early. val nana = new Buffer() nana.writeUtf8( na .repeat(2_500)) nana.readUtf8(2) // na // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 nana2 = nana.clone() nana2.writeUtf8( batman ) // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 // // [ b , a , t , m , a , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 6 Segments are not shared when the shared region is small (ie. less than 1 KiB). This is intended to prevent fragmentation in sharing-heavy use cases. Unsafe Cursor API This class exposes privileged access to the internal byte arrays of a buffer. A cursor either references the data of a single segment, it is before the first segment ( offset == -1 ), or it is after the last segment ( offset == buffer.size ). Call UnsafeCursor.seek to move the cursor to the segment that contains a specified offset. After seeking, UnsafeCursor.data references the segment s internal byte array, UnsafeCursor.start is the segment s start and UnsafeCursor.end is its end. Call UnsafeCursor.next to advance the cursor to the next segment. This returns -1 if there are no further segments in the buffer. Use Buffer.readUnsafe to create a cursor to read buffer data and Buffer.readAndWriteUnsafe to create a cursor to read and write buffer data. In either case, always call UnsafeCursor.close when done with a cursor. This is convenient with Kotlin s use extension function. In this example we read all of the bytes in a buffer into a byte array: val bufferBytes = ByteArray(buffer.size.toInt()) buffer.readUnsafe().use { cursor - while (cursor.next() != -1) { System.arraycopy(cursor.data, cursor.start, bufferBytes, cursor.offset.toInt(), cursor.end - cursor.start); } } Change the capacity of a buffer with resizeBuffer . This is only permitted for read+write cursors. The buffer s size always changes from the end: shrinking it removes bytes from the end; growing it adds capacity to the end. Warnings Most application developers should avoid this API. Those that must use this API should respect these warnings. Don t mutate a cursor. This class has public, non-final fields because that is convenient for low-level I/O frameworks. Never assign values to these fields; instead use the cursor API to adjust these. Never mutate data unless you have read+write access. You are on the honor system to never write the buffer in read-only mode. Read-only mode may be more efficient than read+write mode because it does not need to make private copies of shared segments. Only access data in [start..end) . Other data in the byte array is undefined! It may contain private or sensitive data from other parts of your process. Always fill the new capacity when you grow a buffer. New capacity is not zero-filled and may contain data from other parts of your process. Avoid leaking this information by always writing something to the newly-allocated capacity. Do not assume that new capacity will be filled with 0 ; it will not be. Do not access a buffer while is being accessed by a cursor. Even simple read-only operations like Buffer.clone are unsafe because they mark segments as shared. Do not hard-code the segment size in your application. It is possible that segment sizes will change with advances in hardware. Future versions of Okio may even have heterogeneous segment sizes. These warnings are intended to help you to use this API safely. It s here for developers that need absolutely the most throughput. Since that s you, here s one final performance tip. You can reuse instances of this class if you like. Use the overloads of Buffer.readUnsafe and Buffer.readAndWriteUnsafe that take a cursor and close it after use. Constructors Name Summary (jvm) init A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. UnsafeCursor() Properties Name Summary (jvm) buffer var buffer: Buffer ? (jvm) data var data: ByteArray ? (jvm) end var end: Int (jvm) offset var offset: Long (jvm) readWrite var readWrite: Boolean (jvm) start var start: Int Functions Name Summary (jvm) close fun close(): Unit (jvm) expandBuffer Grow the buffer by adding a contiguous range of capacity in a single segment. This adds at least minByteCount bytes but may add up to a full segment of additional capacity. fun expandBuffer(minByteCount: Int ): Long (jvm) next Seeks to the next range of bytes, advancing the offset by end - start . Returns the size of the readable range (at least 1), or -1 if we have reached the end of the buffer and there are no more bytes to read. fun next(): Int (jvm) resizeBuffer Change the size of the buffer so that it equals newSize by either adding new capacity at the end or truncating the buffer at the end. Newly added capacity may span multiple segments. fun resizeBuffer(newSize: Long ): Long (jvm) seek Reposition the cursor so that the data at offset is readable at data[start] . Returns the number of bytes readable in data (at least 1), or -1 if there are no data to read. fun seek(offset: Long ): Int","title":"Home"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/#unsafecursor","text":"(jvm) class UnsafeCursor : Closeable A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. Buffer Internals Most code should use Buffer as a black box: a class that holds 0 or more bytes of data with efficient APIs to append data to the end and to consume data from the front. Usually this is also the most efficient way to use buffers because it allows Okio to employ several optimizations, including: Fast Allocation: Buffers use a shared pool of memory that is not zero-filled before use. Fast Resize: A buffer s capacity can change without copying its contents. Fast Move: Memory ownership can be reassigned from one buffer to another. Fast Copy: Multiple buffers can share the same underlying memory. Fast Encoding and Decoding: Common operations like UTF-8 encoding and decimal decoding do not require intermediate objects to be allocated. These optimizations all leverage the way Okio stores data internally. Okio Buffers are implemented using a doubly-linked list of segments. Each segment is a contiguous range within a 8 KiB ByteArray . Each segment has two indexes, start , the offset of the first byte of the array containing application data, and end , the offset of the first byte beyond start whose data is undefined. New buffers are empty and have no segments: val buffer = Buffer() We append 7 bytes of data to the end of our empty buffer. Internally, the buffer allocates a segment and writes its new data there. The lone segment has an 8 KiB byte array but only 7 bytes of data: buffer.writeUtf8( sealion ) // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 7 When we read 4 bytes of data from the buffer, it finds its first segment and returns that data to us. As bytes are read the data is consumed. The segment tracks this by adjusting its internal indices. buffer.readUtf8(4) // seal // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 4 end = 7 As we write data into a buffer we fill up its internal segments. When a write doesn t fit into a buffer s last segment, additional segments are allocated and appended to the linked list of segments. Each segment has its own start and end indexes tracking where the user s data begins and ends. val xoxo = new Buffer() xoxo.writeUtf8( xo .repeat(5_000)) // [ x , o , x , o , x , o , x , o , ..., x , o , x , o ] // ^ ^ // start = 0 end = 8192 // // [ x , o , x , o , ..., x , o , x , o , ? , ? , ? , ...] // ^ ^ // start = 0 end = 1808 The start index is always inclusive and the end index is always exclusive . The data preceding the start index is undefined, and the data at and following the end index is undefined. After the last byte of a segment has been read, that segment may be returned to an internal segment pool. In addition to reducing the need to do garbage collection, segment pooling also saves the JVM from needing to zero-fill byte arrays. Okio doesn t need to zero-fill its arrays because it always writes memory before it reads it. But if you look at a segment in a debugger you may see its effects. In this example, one of the xoxo segments above is reused in an unrelated buffer: val abc = new Buffer() abc.writeUtf8( abc ) // [ a , b , c , o , x , o , x , o , ...] // ^ ^ // start = 0 end = 3 There is an optimization in Buffer.clone() and other methods that allows two segments to share the same underlying byte array. Clones can t write to the shared byte array; instead they allocate a new (private) segment early. val nana = new Buffer() nana.writeUtf8( na .repeat(2_500)) nana.readUtf8(2) // na // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 nana2 = nana.clone() nana2.writeUtf8( batman ) // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 // // [ b , a , t , m , a , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 6 Segments are not shared when the shared region is small (ie. less than 1 KiB). This is intended to prevent fragmentation in sharing-heavy use cases. Unsafe Cursor API This class exposes privileged access to the internal byte arrays of a buffer. A cursor either references the data of a single segment, it is before the first segment ( offset == -1 ), or it is after the last segment ( offset == buffer.size ). Call UnsafeCursor.seek to move the cursor to the segment that contains a specified offset. After seeking, UnsafeCursor.data references the segment s internal byte array, UnsafeCursor.start is the segment s start and UnsafeCursor.end is its end. Call UnsafeCursor.next to advance the cursor to the next segment. This returns -1 if there are no further segments in the buffer. Use Buffer.readUnsafe to create a cursor to read buffer data and Buffer.readAndWriteUnsafe to create a cursor to read and write buffer data. In either case, always call UnsafeCursor.close when done with a cursor. This is convenient with Kotlin s use extension function. In this example we read all of the bytes in a buffer into a byte array: val bufferBytes = ByteArray(buffer.size.toInt()) buffer.readUnsafe().use { cursor - while (cursor.next() != -1) { System.arraycopy(cursor.data, cursor.start, bufferBytes, cursor.offset.toInt(), cursor.end - cursor.start); } } Change the capacity of a buffer with resizeBuffer . This is only permitted for read+write cursors. The buffer s size always changes from the end: shrinking it removes bytes from the end; growing it adds capacity to the end. Warnings Most application developers should avoid this API. Those that must use this API should respect these warnings. Don t mutate a cursor. This class has public, non-final fields because that is convenient for low-level I/O frameworks. Never assign values to these fields; instead use the cursor API to adjust these. Never mutate data unless you have read+write access. You are on the honor system to never write the buffer in read-only mode. Read-only mode may be more efficient than read+write mode because it does not need to make private copies of shared segments. Only access data in [start..end) . Other data in the byte array is undefined! It may contain private or sensitive data from other parts of your process. Always fill the new capacity when you grow a buffer. New capacity is not zero-filled and may contain data from other parts of your process. Avoid leaking this information by always writing something to the newly-allocated capacity. Do not assume that new capacity will be filled with 0 ; it will not be. Do not access a buffer while is being accessed by a cursor. Even simple read-only operations like Buffer.clone are unsafe because they mark segments as shared. Do not hard-code the segment size in your application. It is possible that segment sizes will change with advances in hardware. Future versions of Okio may even have heterogeneous segment sizes. These warnings are intended to help you to use this API safely. It s here for developers that need absolutely the most throughput. Since that s you, here s one final performance tip. You can reuse instances of this class if you like. Use the overloads of Buffer.readUnsafe and Buffer.readAndWriteUnsafe that take a cursor and close it after use.","title":"UnsafeCursor"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/#constructors","text":"Name Summary (jvm) init A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. UnsafeCursor()","title":"Constructors"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/#properties","text":"Name Summary (jvm) buffer var buffer: Buffer ? (jvm) data var data: ByteArray ? (jvm) end var end: Int (jvm) offset var offset: Long (jvm) readWrite var readWrite: Boolean (jvm) start var start: Int","title":"Properties"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/#functions","text":"Name Summary (jvm) close fun close(): Unit (jvm) expandBuffer Grow the buffer by adding a contiguous range of capacity in a single segment. This adds at least minByteCount bytes but may add up to a full segment of additional capacity. fun expandBuffer(minByteCount: Int ): Long (jvm) next Seeks to the next range of bytes, advancing the offset by end - start . Returns the size of the readable range (at least 1), or -1 if we have reached the end of the buffer and there are no more bytes to read. fun next(): Int (jvm) resizeBuffer Change the size of the buffer so that it equals newSize by either adding new capacity at the end or truncating the buffer at the end. Newly added capacity may span multiple segments. fun resizeBuffer(newSize: Long ): Long (jvm) seek Reposition the cursor so that the data at offset is readable at data[start] . Returns the number of bytes readable in data (at least 1), or -1 if there are no data to read. fun seek(offset: Long ): Int","title":"Functions"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/-init-/","text":"okio / okio / Buffer / UnsafeCursor / init init (jvm) UnsafeCursor() A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. Buffer Internals Most code should use Buffer as a black box: a class that holds 0 or more bytes of data with efficient APIs to append data to the end and to consume data from the front. Usually this is also the most efficient way to use buffers because it allows Okio to employ several optimizations, including: Fast Allocation: Buffers use a shared pool of memory that is not zero-filled before use. Fast Resize: A buffer s capacity can change without copying its contents. Fast Move: Memory ownership can be reassigned from one buffer to another. Fast Copy: Multiple buffers can share the same underlying memory. Fast Encoding and Decoding: Common operations like UTF-8 encoding and decimal decoding do not require intermediate objects to be allocated. These optimizations all leverage the way Okio stores data internally. Okio Buffers are implemented using a doubly-linked list of segments. Each segment is a contiguous range within a 8 KiB ByteArray . Each segment has two indexes, start , the offset of the first byte of the array containing application data, and end , the offset of the first byte beyond start whose data is undefined. New buffers are empty and have no segments: val buffer = Buffer() We append 7 bytes of data to the end of our empty buffer. Internally, the buffer allocates a segment and writes its new data there. The lone segment has an 8 KiB byte array but only 7 bytes of data: buffer.writeUtf8( sealion ) // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 7 When we read 4 bytes of data from the buffer, it finds its first segment and returns that data to us. As bytes are read the data is consumed. The segment tracks this by adjusting its internal indices. buffer.readUtf8(4) // seal // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 4 end = 7 As we write data into a buffer we fill up its internal segments. When a write doesn t fit into a buffer s last segment, additional segments are allocated and appended to the linked list of segments. Each segment has its own start and end indexes tracking where the user s data begins and ends. val xoxo = new Buffer() xoxo.writeUtf8( xo .repeat(5_000)) // [ x , o , x , o , x , o , x , o , ..., x , o , x , o ] // ^ ^ // start = 0 end = 8192 // // [ x , o , x , o , ..., x , o , x , o , ? , ? , ? , ...] // ^ ^ // start = 0 end = 1808 The start index is always inclusive and the end index is always exclusive . The data preceding the start index is undefined, and the data at and following the end index is undefined. After the last byte of a segment has been read, that segment may be returned to an internal segment pool. In addition to reducing the need to do garbage collection, segment pooling also saves the JVM from needing to zero-fill byte arrays. Okio doesn t need to zero-fill its arrays because it always writes memory before it reads it. But if you look at a segment in a debugger you may see its effects. In this example, one of the xoxo segments above is reused in an unrelated buffer: val abc = new Buffer() abc.writeUtf8( abc ) // [ a , b , c , o , x , o , x , o , ...] // ^ ^ // start = 0 end = 3 There is an optimization in Buffer.clone() and other methods that allows two segments to share the same underlying byte array. Clones can t write to the shared byte array; instead they allocate a new (private) segment early. val nana = new Buffer() nana.writeUtf8( na .repeat(2_500)) nana.readUtf8(2) // na // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 nana2 = nana.clone() nana2.writeUtf8( batman ) // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 // // [ b , a , t , m , a , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 6 Segments are not shared when the shared region is small (ie. less than 1 KiB). This is intended to prevent fragmentation in sharing-heavy use cases. Unsafe Cursor API This class exposes privileged access to the internal byte arrays of a buffer. A cursor either references the data of a single segment, it is before the first segment ( offset == -1 ), or it is after the last segment ( offset == buffer.size ). Call UnsafeCursor.seek to move the cursor to the segment that contains a specified offset. After seeking, UnsafeCursor.data references the segment s internal byte array, UnsafeCursor.start is the segment s start and UnsafeCursor.end is its end. Call UnsafeCursor.next to advance the cursor to the next segment. This returns -1 if there are no further segments in the buffer. Use Buffer.readUnsafe to create a cursor to read buffer data and Buffer.readAndWriteUnsafe to create a cursor to read and write buffer data. In either case, always call UnsafeCursor.close when done with a cursor. This is convenient with Kotlin s use extension function. In this example we read all of the bytes in a buffer into a byte array: val bufferBytes = ByteArray(buffer.size.toInt()) buffer.readUnsafe().use { cursor - while (cursor.next() != -1) { System.arraycopy(cursor.data, cursor.start, bufferBytes, cursor.offset.toInt(), cursor.end - cursor.start); } } Change the capacity of a buffer with resizeBuffer . This is only permitted for read+write cursors. The buffer s size always changes from the end: shrinking it removes bytes from the end; growing it adds capacity to the end. Warnings Most application developers should avoid this API. Those that must use this API should respect these warnings. Don t mutate a cursor. This class has public, non-final fields because that is convenient for low-level I/O frameworks. Never assign values to these fields; instead use the cursor API to adjust these. Never mutate data unless you have read+write access. You are on the honor system to never write the buffer in read-only mode. Read-only mode may be more efficient than read+write mode because it does not need to make private copies of shared segments. Only access data in [start..end) . Other data in the byte array is undefined! It may contain private or sensitive data from other parts of your process. Always fill the new capacity when you grow a buffer. New capacity is not zero-filled and may contain data from other parts of your process. Avoid leaking this information by always writing something to the newly-allocated capacity. Do not assume that new capacity will be filled with 0 ; it will not be. Do not access a buffer while is being accessed by a cursor. Even simple read-only operations like Buffer.clone are unsafe because they mark segments as shared. Do not hard-code the segment size in your application. It is possible that segment sizes will change with advances in hardware. Future versions of Okio may even have heterogeneous segment sizes. These warnings are intended to help you to use this API safely. It s here for developers that need absolutely the most throughput. Since that s you, here s one final performance tip. You can reuse instances of this class if you like. Use the overloads of Buffer.readUnsafe and Buffer.readAndWriteUnsafe that take a cursor and close it after use.","title":" init "},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/-init-/#init","text":"(jvm) UnsafeCursor() A handle to the underlying data in a buffer. This handle is unsafe because it does not enforce its own invariants. Instead, it assumes a careful user who has studied Okio s implementation details and their consequences. Buffer Internals Most code should use Buffer as a black box: a class that holds 0 or more bytes of data with efficient APIs to append data to the end and to consume data from the front. Usually this is also the most efficient way to use buffers because it allows Okio to employ several optimizations, including: Fast Allocation: Buffers use a shared pool of memory that is not zero-filled before use. Fast Resize: A buffer s capacity can change without copying its contents. Fast Move: Memory ownership can be reassigned from one buffer to another. Fast Copy: Multiple buffers can share the same underlying memory. Fast Encoding and Decoding: Common operations like UTF-8 encoding and decimal decoding do not require intermediate objects to be allocated. These optimizations all leverage the way Okio stores data internally. Okio Buffers are implemented using a doubly-linked list of segments. Each segment is a contiguous range within a 8 KiB ByteArray . Each segment has two indexes, start , the offset of the first byte of the array containing application data, and end , the offset of the first byte beyond start whose data is undefined. New buffers are empty and have no segments: val buffer = Buffer() We append 7 bytes of data to the end of our empty buffer. Internally, the buffer allocates a segment and writes its new data there. The lone segment has an 8 KiB byte array but only 7 bytes of data: buffer.writeUtf8( sealion ) // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 7 When we read 4 bytes of data from the buffer, it finds its first segment and returns that data to us. As bytes are read the data is consumed. The segment tracks this by adjusting its internal indices. buffer.readUtf8(4) // seal // [ s , e , a , l , i , o , n , ? , ? , ? , ...] // ^ ^ // start = 4 end = 7 As we write data into a buffer we fill up its internal segments. When a write doesn t fit into a buffer s last segment, additional segments are allocated and appended to the linked list of segments. Each segment has its own start and end indexes tracking where the user s data begins and ends. val xoxo = new Buffer() xoxo.writeUtf8( xo .repeat(5_000)) // [ x , o , x , o , x , o , x , o , ..., x , o , x , o ] // ^ ^ // start = 0 end = 8192 // // [ x , o , x , o , ..., x , o , x , o , ? , ? , ? , ...] // ^ ^ // start = 0 end = 1808 The start index is always inclusive and the end index is always exclusive . The data preceding the start index is undefined, and the data at and following the end index is undefined. After the last byte of a segment has been read, that segment may be returned to an internal segment pool. In addition to reducing the need to do garbage collection, segment pooling also saves the JVM from needing to zero-fill byte arrays. Okio doesn t need to zero-fill its arrays because it always writes memory before it reads it. But if you look at a segment in a debugger you may see its effects. In this example, one of the xoxo segments above is reused in an unrelated buffer: val abc = new Buffer() abc.writeUtf8( abc ) // [ a , b , c , o , x , o , x , o , ...] // ^ ^ // start = 0 end = 3 There is an optimization in Buffer.clone() and other methods that allows two segments to share the same underlying byte array. Clones can t write to the shared byte array; instead they allocate a new (private) segment early. val nana = new Buffer() nana.writeUtf8( na .repeat(2_500)) nana.readUtf8(2) // na // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 nana2 = nana.clone() nana2.writeUtf8( batman ) // [ n , a , n , a , ..., n , a , n , a , ? , ? , ? , ...] // ^ ^ // start = 2 end = 5000 // // [ b , a , t , m , a , n , ? , ? , ? , ...] // ^ ^ // start = 0 end = 6 Segments are not shared when the shared region is small (ie. less than 1 KiB). This is intended to prevent fragmentation in sharing-heavy use cases. Unsafe Cursor API This class exposes privileged access to the internal byte arrays of a buffer. A cursor either references the data of a single segment, it is before the first segment ( offset == -1 ), or it is after the last segment ( offset == buffer.size ). Call UnsafeCursor.seek to move the cursor to the segment that contains a specified offset. After seeking, UnsafeCursor.data references the segment s internal byte array, UnsafeCursor.start is the segment s start and UnsafeCursor.end is its end. Call UnsafeCursor.next to advance the cursor to the next segment. This returns -1 if there are no further segments in the buffer. Use Buffer.readUnsafe to create a cursor to read buffer data and Buffer.readAndWriteUnsafe to create a cursor to read and write buffer data. In either case, always call UnsafeCursor.close when done with a cursor. This is convenient with Kotlin s use extension function. In this example we read all of the bytes in a buffer into a byte array: val bufferBytes = ByteArray(buffer.size.toInt()) buffer.readUnsafe().use { cursor - while (cursor.next() != -1) { System.arraycopy(cursor.data, cursor.start, bufferBytes, cursor.offset.toInt(), cursor.end - cursor.start); } } Change the capacity of a buffer with resizeBuffer . This is only permitted for read+write cursors. The buffer s size always changes from the end: shrinking it removes bytes from the end; growing it adds capacity to the end. Warnings Most application developers should avoid this API. Those that must use this API should respect these warnings. Don t mutate a cursor. This class has public, non-final fields because that is convenient for low-level I/O frameworks. Never assign values to these fields; instead use the cursor API to adjust these. Never mutate data unless you have read+write access. You are on the honor system to never write the buffer in read-only mode. Read-only mode may be more efficient than read+write mode because it does not need to make private copies of shared segments. Only access data in [start..end) . Other data in the byte array is undefined! It may contain private or sensitive data from other parts of your process. Always fill the new capacity when you grow a buffer. New capacity is not zero-filled and may contain data from other parts of your process. Avoid leaking this information by always writing something to the newly-allocated capacity. Do not assume that new capacity will be filled with 0 ; it will not be. Do not access a buffer while is being accessed by a cursor. Even simple read-only operations like Buffer.clone are unsafe because they mark segments as shared. Do not hard-code the segment size in your application. It is possible that segment sizes will change with advances in hardware. Future versions of Okio may even have heterogeneous segment sizes. These warnings are intended to help you to use this API safely. It s here for developers that need absolutely the most throughput. Since that s you, here s one final performance tip. You can reuse instances of this class if you like. Use the overloads of Buffer.readUnsafe and Buffer.readAndWriteUnsafe that take a cursor and close it after use.","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/buffer/","text":"okio / okio / Buffer / UnsafeCursor / buffer buffer (jvm) var buffer: Buffer ?","title":"Buffer"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/buffer/#buffer","text":"(jvm) var buffer: Buffer ?","title":"buffer"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/close/","text":"okio / okio / Buffer / UnsafeCursor / close close (jvm) fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/close/#close","text":"(jvm) fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/data/","text":"okio / okio / Buffer / UnsafeCursor / data data (jvm) var data: ByteArray ?","title":"Data"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/data/#data","text":"(jvm) var data: ByteArray ?","title":"data"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/end/","text":"okio / okio / Buffer / UnsafeCursor / end end (jvm) var end: Int","title":"End"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/end/#end","text":"(jvm) var end: Int","title":"end"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/expand-buffer/","text":"okio / okio / Buffer / UnsafeCursor / expandBuffer expandBuffer (jvm) fun expandBuffer(minByteCount: Int ): Long Grow the buffer by adding a contiguous range of capacity in a single segment. This adds at least minByteCount bytes but may add up to a full segment of additional capacity. As a side-effect this cursor will seek . It will move offset to the first byte of newly-added capacity. This is the size of the buffer prior to the expandBuffer() call. If minByteCount bytes are available in the buffer s current tail segment that will be used; otherwise another segment will be allocated and appended. In either case this returns the number of bytes of capacity added to this buffer. Warning: it is the caller\u2019s responsibility to either write new data to every byte of the newly-allocated capacity, or to shrink the buffer to the data written. Failure to do so may cause serious security problems as the data in the returned buffers is not zero filled. Buffers may contain dirty pooled segments that hold very sensitive data from other parts of the current process. Parameters minByteCount - the size of the contiguous capacity. Must be positive and not greater than the capacity size of a single segment (8 KiB). Return the number of bytes expanded by. Not less than minByteCount .","title":"Expand buffer"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/expand-buffer/#expandbuffer","text":"(jvm) fun expandBuffer(minByteCount: Int ): Long Grow the buffer by adding a contiguous range of capacity in a single segment. This adds at least minByteCount bytes but may add up to a full segment of additional capacity. As a side-effect this cursor will seek . It will move offset to the first byte of newly-added capacity. This is the size of the buffer prior to the expandBuffer() call. If minByteCount bytes are available in the buffer s current tail segment that will be used; otherwise another segment will be allocated and appended. In either case this returns the number of bytes of capacity added to this buffer. Warning: it is the caller\u2019s responsibility to either write new data to every byte of the newly-allocated capacity, or to shrink the buffer to the data written. Failure to do so may cause serious security problems as the data in the returned buffers is not zero filled. Buffers may contain dirty pooled segments that hold very sensitive data from other parts of the current process.","title":"expandBuffer"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/expand-buffer/#parameters","text":"minByteCount - the size of the contiguous capacity. Must be positive and not greater than the capacity size of a single segment (8 KiB). Return the number of bytes expanded by. Not less than minByteCount .","title":"Parameters"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/next/","text":"okio / okio / Buffer / UnsafeCursor / next next (jvm) fun next(): Int Seeks to the next range of bytes, advancing the offset by end - start . Returns the size of the readable range (at least 1), or -1 if we have reached the end of the buffer and there are no more bytes to read.","title":"Next"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/next/#next","text":"(jvm) fun next(): Int Seeks to the next range of bytes, advancing the offset by end - start . Returns the size of the readable range (at least 1), or -1 if we have reached the end of the buffer and there are no more bytes to read.","title":"next"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/offset/","text":"okio / okio / Buffer / UnsafeCursor / offset offset (jvm) var offset: Long","title":"Offset"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/offset/#offset","text":"(jvm) var offset: Long","title":"offset"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/read-write/","text":"okio / okio / Buffer / UnsafeCursor / readWrite readWrite (jvm) var readWrite: Boolean","title":"Read write"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/read-write/#readwrite","text":"(jvm) var readWrite: Boolean","title":"readWrite"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/resize-buffer/","text":"okio / okio / Buffer / UnsafeCursor / resizeBuffer resizeBuffer (jvm) fun resizeBuffer(newSize: Long ): Long Change the size of the buffer so that it equals newSize by either adding new capacity at the end or truncating the buffer at the end. Newly added capacity may span multiple segments. As a side-effect this cursor will seek . If the buffer is being enlarged it will move UnsafeCursor.offset to the first byte of newly-added capacity. This is the size of the buffer prior to the resizeBuffer() call. If the buffer is being shrunk it will move UnsafeCursor.offset to the end of the buffer. Warning: it is the caller\u2019s responsibility to write new data to every byte of the newly-allocated capacity. Failure to do so may cause serious security problems as the data in the returned buffers is not zero filled. Buffers may contain dirty pooled segments that hold very sensitive data from other parts of the current process. Return the previous size of the buffer.","title":"Resize buffer"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/resize-buffer/#resizebuffer","text":"(jvm) fun resizeBuffer(newSize: Long ): Long Change the size of the buffer so that it equals newSize by either adding new capacity at the end or truncating the buffer at the end. Newly added capacity may span multiple segments. As a side-effect this cursor will seek . If the buffer is being enlarged it will move UnsafeCursor.offset to the first byte of newly-added capacity. This is the size of the buffer prior to the resizeBuffer() call. If the buffer is being shrunk it will move UnsafeCursor.offset to the end of the buffer. Warning: it is the caller\u2019s responsibility to write new data to every byte of the newly-allocated capacity. Failure to do so may cause serious security problems as the data in the returned buffers is not zero filled. Buffers may contain dirty pooled segments that hold very sensitive data from other parts of the current process. Return the previous size of the buffer.","title":"resizeBuffer"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/seek/","text":"okio / okio / Buffer / UnsafeCursor / seek seek (jvm) fun seek(offset: Long ): Int Reposition the cursor so that the data at offset is readable at data[start] . Returns the number of bytes readable in data (at least 1), or -1 if there are no data to read.","title":"Seek"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/seek/#seek","text":"(jvm) fun seek(offset: Long ): Int Reposition the cursor so that the data at offset is readable at data[start] . Returns the number of bytes readable in data (at least 1), or -1 if there are no data to read.","title":"seek"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/start/","text":"okio / okio / Buffer / UnsafeCursor / start start (jvm) var start: Int","title":"Start"},{"location":"2.x/okio/okio/-buffer/-unsafe-cursor/start/#start","text":"(jvm) var start: Int","title":"start"},{"location":"2.x/okio/okio/-buffered-sink/","text":"okio / okio / BufferedSink BufferedSink (js, jvm, native) interface BufferedSink : Sink A sink that keeps a buffer internally so that callers can do small writes without a performance penalty. Properties Name Summary (js, jvm, native) buffer This sink s internal buffer. abstract val buffer: Buffer Functions Name Summary (jvm) buffer Returns this sink s internal buffer. abstract fun ~~buffer~~(): Buffer (js, jvm, native) emit Writes all buffered data to the underlying sink, if one exists. Like flush , but weaker. Call this before this buffered sink goes out of scope so that its data can reach its destination. abstract fun emit(): BufferedSink (js, jvm, native) emitCompleteSegments Writes complete segments to the underlying sink, if one exists. Like flush , but weaker. Use this to limit the memory held in the buffer to a single segment. Typically application code will not need to call this: it is only necessary when application code writes directly to this sink s buffer . abstract fun emitCompleteSegments(): BufferedSink (js, jvm) flush Writes all buffered data to the underlying sink, if one exists. Then that sink is recursively flushed which pushes data as far as possible towards its ultimate destination. Typically that destination is a network socket or file. abstract fun flush(): Unit (jvm) outputStream Returns an output stream that writes to this sink. abstract fun outputStream(): OutputStream (js, jvm, native) write abstract fun write(byteString: ByteString ): BufferedSink abstract fun write(byteString: ByteString , offset: Int , byteCount: Int ): BufferedSink Like OutputStream.write , this writes a complete byte array to this sink. abstract fun write(source: ByteArray ): BufferedSink Like OutputStream.write , this writes byteCount bytes of source , starting at offset . abstract fun write(source: ByteArray , offset: Int , byteCount: Int ): BufferedSink Removes byteCount bytes from source and appends them to this sink. abstract fun write(source: Source , byteCount: Long ): BufferedSink (js, jvm, native) writeAll Removes all bytes from source and appends them to this sink. Returns the number of bytes read which will be 0 if source is exhausted. abstract fun writeAll(source: Source ): Long (js, jvm, native) writeByte Writes a byte to this sink. abstract fun writeByte(b: Int ): BufferedSink (js, jvm, native) writeDecimalLong Writes a long to this sink in signed decimal form (i.e., as a string in base 10). abstract fun writeDecimalLong(v: Long ): BufferedSink (js, jvm, native) writeHexadecimalUnsignedLong Writes a long to this sink in hexadecimal form (i.e., as a string in base 16). abstract fun writeHexadecimalUnsignedLong(v: Long ): BufferedSink (js, jvm, native) writeInt Writes a big-endian int to this sink using four bytes. abstract fun writeInt(i: Int ): BufferedSink (js, jvm, native) writeIntLe Writes a little-endian int to this sink using four bytes. abstract fun writeIntLe(i: Int ): BufferedSink (js, jvm, native) writeLong Writes a big-endian long to this sink using eight bytes. abstract fun writeLong(v: Long ): BufferedSink (js, jvm, native) writeLongLe Writes a little-endian long to this sink using eight bytes. abstract fun writeLongLe(v: Long ): BufferedSink (js, jvm, native) writeShort Writes a big-endian short to this sink using two bytes. abstract fun writeShort(s: Int ): BufferedSink (js, jvm, native) writeShortLe Writes a little-endian short to this sink using two bytes. abstract fun writeShortLe(s: Int ): BufferedSink (jvm) writeString abstract fun writeString(string: String , charset: Charset ): BufferedSink abstract fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): BufferedSink (js, jvm, native) writeUtf8 Encodes string in UTF-8 and writes it to this sink. abstract fun writeUtf8(string: String ): BufferedSink Encodes the characters at beginIndex up to endIndex from string in UTF-8 and writes it to this sink. abstract fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): BufferedSink (js, jvm, native) writeUtf8CodePoint Encodes codePoint in UTF-8 and writes it to this sink. abstract fun writeUtf8CodePoint(codePoint: Int ): BufferedSink Extension Functions Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink Inheritors Name Summary (js, jvm, native) Buffer A collection of bytes in memory. class Buffer : BufferedSource , BufferedSink","title":"Home"},{"location":"2.x/okio/okio/-buffered-sink/#bufferedsink","text":"(js, jvm, native) interface BufferedSink : Sink A sink that keeps a buffer internally so that callers can do small writes without a performance penalty.","title":"BufferedSink"},{"location":"2.x/okio/okio/-buffered-sink/#properties","text":"Name Summary (js, jvm, native) buffer This sink s internal buffer. abstract val buffer: Buffer","title":"Properties"},{"location":"2.x/okio/okio/-buffered-sink/#functions","text":"Name Summary (jvm) buffer Returns this sink s internal buffer. abstract fun ~~buffer~~(): Buffer (js, jvm, native) emit Writes all buffered data to the underlying sink, if one exists. Like flush , but weaker. Call this before this buffered sink goes out of scope so that its data can reach its destination. abstract fun emit(): BufferedSink (js, jvm, native) emitCompleteSegments Writes complete segments to the underlying sink, if one exists. Like flush , but weaker. Use this to limit the memory held in the buffer to a single segment. Typically application code will not need to call this: it is only necessary when application code writes directly to this sink s buffer . abstract fun emitCompleteSegments(): BufferedSink (js, jvm) flush Writes all buffered data to the underlying sink, if one exists. Then that sink is recursively flushed which pushes data as far as possible towards its ultimate destination. Typically that destination is a network socket or file. abstract fun flush(): Unit (jvm) outputStream Returns an output stream that writes to this sink. abstract fun outputStream(): OutputStream (js, jvm, native) write abstract fun write(byteString: ByteString ): BufferedSink abstract fun write(byteString: ByteString , offset: Int , byteCount: Int ): BufferedSink Like OutputStream.write , this writes a complete byte array to this sink. abstract fun write(source: ByteArray ): BufferedSink Like OutputStream.write , this writes byteCount bytes of source , starting at offset . abstract fun write(source: ByteArray , offset: Int , byteCount: Int ): BufferedSink Removes byteCount bytes from source and appends them to this sink. abstract fun write(source: Source , byteCount: Long ): BufferedSink (js, jvm, native) writeAll Removes all bytes from source and appends them to this sink. Returns the number of bytes read which will be 0 if source is exhausted. abstract fun writeAll(source: Source ): Long (js, jvm, native) writeByte Writes a byte to this sink. abstract fun writeByte(b: Int ): BufferedSink (js, jvm, native) writeDecimalLong Writes a long to this sink in signed decimal form (i.e., as a string in base 10). abstract fun writeDecimalLong(v: Long ): BufferedSink (js, jvm, native) writeHexadecimalUnsignedLong Writes a long to this sink in hexadecimal form (i.e., as a string in base 16). abstract fun writeHexadecimalUnsignedLong(v: Long ): BufferedSink (js, jvm, native) writeInt Writes a big-endian int to this sink using four bytes. abstract fun writeInt(i: Int ): BufferedSink (js, jvm, native) writeIntLe Writes a little-endian int to this sink using four bytes. abstract fun writeIntLe(i: Int ): BufferedSink (js, jvm, native) writeLong Writes a big-endian long to this sink using eight bytes. abstract fun writeLong(v: Long ): BufferedSink (js, jvm, native) writeLongLe Writes a little-endian long to this sink using eight bytes. abstract fun writeLongLe(v: Long ): BufferedSink (js, jvm, native) writeShort Writes a big-endian short to this sink using two bytes. abstract fun writeShort(s: Int ): BufferedSink (js, jvm, native) writeShortLe Writes a little-endian short to this sink using two bytes. abstract fun writeShortLe(s: Int ): BufferedSink (jvm) writeString abstract fun writeString(string: String , charset: Charset ): BufferedSink abstract fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): BufferedSink (js, jvm, native) writeUtf8 Encodes string in UTF-8 and writes it to this sink. abstract fun writeUtf8(string: String ): BufferedSink Encodes the characters at beginIndex up to endIndex from string in UTF-8 and writes it to this sink. abstract fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): BufferedSink (js, jvm, native) writeUtf8CodePoint Encodes codePoint in UTF-8 and writes it to this sink. abstract fun writeUtf8CodePoint(codePoint: Int ): BufferedSink","title":"Functions"},{"location":"2.x/okio/okio/-buffered-sink/#extension-functions","text":"Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Extension Functions"},{"location":"2.x/okio/okio/-buffered-sink/#inheritors","text":"Name Summary (js, jvm, native) Buffer A collection of bytes in memory. class Buffer : BufferedSource , BufferedSink","title":"Inheritors"},{"location":"2.x/okio/okio/-buffered-sink/buffer/","text":"okio / okio / BufferedSink / buffer buffer (js, jvm, native) abstract val buffer: Buffer This sink s internal buffer. (jvm) abstract fun ~~buffer~~(): Buffer Deprecated: moved to val: use getBuffer() instead Returns this sink s internal buffer.","title":"Buffer"},{"location":"2.x/okio/okio/-buffered-sink/buffer/#buffer","text":"(js, jvm, native) abstract val buffer: Buffer This sink s internal buffer. (jvm) abstract fun ~~buffer~~(): Buffer Deprecated: moved to val: use getBuffer() instead Returns this sink s internal buffer.","title":"buffer"},{"location":"2.x/okio/okio/-buffered-sink/emit-complete-segments/","text":"okio / okio / BufferedSink / emitCompleteSegments emitCompleteSegments (js, jvm, native) abstract fun emitCompleteSegments(): BufferedSink Writes complete segments to the underlying sink, if one exists. Like flush , but weaker. Use this to limit the memory held in the buffer to a single segment. Typically application code will not need to call this: it is only necessary when application code writes directly to this sink s buffer . BufferedSink b0 = new Buffer(); BufferedSink b1 = Okio.buffer(b0); BufferedSink b2 = Okio.buffer(b1); b2.buffer().write(new byte[20_000]); assertEquals(20_000, b2.buffer().size()); assertEquals( 0, b1.buffer().size()); assertEquals( 0, b0.buffer().size()); b2.emitCompleteSegments(); assertEquals( 3_616, b2.buffer().size()); assertEquals( 0, b1.buffer().size()); assertEquals(16_384, b0.buffer().size()); // This example assumes 8192 byte segments.","title":"Emit complete segments"},{"location":"2.x/okio/okio/-buffered-sink/emit-complete-segments/#emitcompletesegments","text":"(js, jvm, native) abstract fun emitCompleteSegments(): BufferedSink Writes complete segments to the underlying sink, if one exists. Like flush , but weaker. Use this to limit the memory held in the buffer to a single segment. Typically application code will not need to call this: it is only necessary when application code writes directly to this sink s buffer . BufferedSink b0 = new Buffer(); BufferedSink b1 = Okio.buffer(b0); BufferedSink b2 = Okio.buffer(b1); b2.buffer().write(new byte[20_000]); assertEquals(20_000, b2.buffer().size()); assertEquals( 0, b1.buffer().size()); assertEquals( 0, b0.buffer().size()); b2.emitCompleteSegments(); assertEquals( 3_616, b2.buffer().size()); assertEquals( 0, b1.buffer().size()); assertEquals(16_384, b0.buffer().size()); // This example assumes 8192 byte segments.","title":"emitCompleteSegments"},{"location":"2.x/okio/okio/-buffered-sink/emit/","text":"okio / okio / BufferedSink / emit emit (js, jvm, native) abstract fun emit(): BufferedSink Writes all buffered data to the underlying sink, if one exists. Like flush , but weaker. Call this before this buffered sink goes out of scope so that its data can reach its destination. BufferedSink b0 = new Buffer(); BufferedSink b1 = Okio.buffer(b0); BufferedSink b2 = Okio.buffer(b1); b2.writeUtf8( hello ); assertEquals(5, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(0, b0.buffer().size()); b2.emit(); assertEquals(0, b2.buffer().size()); assertEquals(5, b1.buffer().size()); assertEquals(0, b0.buffer().size()); b1.emit(); assertEquals(0, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(5, b0.buffer().size());","title":"Emit"},{"location":"2.x/okio/okio/-buffered-sink/emit/#emit","text":"(js, jvm, native) abstract fun emit(): BufferedSink Writes all buffered data to the underlying sink, if one exists. Like flush , but weaker. Call this before this buffered sink goes out of scope so that its data can reach its destination. BufferedSink b0 = new Buffer(); BufferedSink b1 = Okio.buffer(b0); BufferedSink b2 = Okio.buffer(b1); b2.writeUtf8( hello ); assertEquals(5, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(0, b0.buffer().size()); b2.emit(); assertEquals(0, b2.buffer().size()); assertEquals(5, b1.buffer().size()); assertEquals(0, b0.buffer().size()); b1.emit(); assertEquals(0, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(5, b0.buffer().size());","title":"emit"},{"location":"2.x/okio/okio/-buffered-sink/flush/","text":"okio / okio / BufferedSink / flush flush (js, jvm) abstract fun flush(): Unit Writes all buffered data to the underlying sink, if one exists. Then that sink is recursively flushed which pushes data as far as possible towards its ultimate destination. Typically that destination is a network socket or file. BufferedSink b0 = new Buffer(); BufferedSink b1 = Okio.buffer(b0); BufferedSink b2 = Okio.buffer(b1); b2.writeUtf8( hello ); assertEquals(5, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(0, b0.buffer().size()); b2.flush(); assertEquals(0, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(5, b0.buffer().size());","title":"Flush"},{"location":"2.x/okio/okio/-buffered-sink/flush/#flush","text":"(js, jvm) abstract fun flush(): Unit Writes all buffered data to the underlying sink, if one exists. Then that sink is recursively flushed which pushes data as far as possible towards its ultimate destination. Typically that destination is a network socket or file. BufferedSink b0 = new Buffer(); BufferedSink b1 = Okio.buffer(b0); BufferedSink b2 = Okio.buffer(b1); b2.writeUtf8( hello ); assertEquals(5, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(0, b0.buffer().size()); b2.flush(); assertEquals(0, b2.buffer().size()); assertEquals(0, b1.buffer().size()); assertEquals(5, b0.buffer().size());","title":"flush"},{"location":"2.x/okio/okio/-buffered-sink/output-stream/","text":"okio / okio / BufferedSink / outputStream outputStream (jvm) abstract fun outputStream(): OutputStream Returns an output stream that writes to this sink.","title":"Output stream"},{"location":"2.x/okio/okio/-buffered-sink/output-stream/#outputstream","text":"(jvm) abstract fun outputStream(): OutputStream Returns an output stream that writes to this sink.","title":"outputStream"},{"location":"2.x/okio/okio/-buffered-sink/write-all/","text":"okio / okio / BufferedSink / writeAll writeAll (js, jvm, native) abstract fun writeAll(source: Source ): Long Removes all bytes from source and appends them to this sink. Returns the number of bytes read which will be 0 if source is exhausted.","title":"Write all"},{"location":"2.x/okio/okio/-buffered-sink/write-all/#writeall","text":"(js, jvm, native) abstract fun writeAll(source: Source ): Long Removes all bytes from source and appends them to this sink. Returns the number of bytes read which will be 0 if source is exhausted.","title":"writeAll"},{"location":"2.x/okio/okio/-buffered-sink/write-byte/","text":"okio / okio / BufferedSink / writeByte writeByte (js, jvm, native) abstract fun writeByte(b: Int ): BufferedSink Writes a byte to this sink.","title":"Write byte"},{"location":"2.x/okio/okio/-buffered-sink/write-byte/#writebyte","text":"(js, jvm, native) abstract fun writeByte(b: Int ): BufferedSink Writes a byte to this sink.","title":"writeByte"},{"location":"2.x/okio/okio/-buffered-sink/write-decimal-long/","text":"okio / okio / BufferedSink / writeDecimalLong writeDecimalLong (js, jvm, native) abstract fun writeDecimalLong(v: Long ): BufferedSink Writes a long to this sink in signed decimal form (i.e., as a string in base 10). Buffer buffer = new Buffer(); buffer.writeDecimalLong(8675309L); buffer.writeByte( ); buffer.writeDecimalLong(-123L); buffer.writeByte( ); buffer.writeDecimalLong(1L); assertEquals( 8675309 -123 1 , buffer.readUtf8());","title":"Write decimal long"},{"location":"2.x/okio/okio/-buffered-sink/write-decimal-long/#writedecimallong","text":"(js, jvm, native) abstract fun writeDecimalLong(v: Long ): BufferedSink Writes a long to this sink in signed decimal form (i.e., as a string in base 10). Buffer buffer = new Buffer(); buffer.writeDecimalLong(8675309L); buffer.writeByte( ); buffer.writeDecimalLong(-123L); buffer.writeByte( ); buffer.writeDecimalLong(1L); assertEquals( 8675309 -123 1 , buffer.readUtf8());","title":"writeDecimalLong"},{"location":"2.x/okio/okio/-buffered-sink/write-hexadecimal-unsigned-long/","text":"okio / okio / BufferedSink / writeHexadecimalUnsignedLong writeHexadecimalUnsignedLong (js, jvm, native) abstract fun writeHexadecimalUnsignedLong(v: Long ): BufferedSink Writes a long to this sink in hexadecimal form (i.e., as a string in base 16). Buffer buffer = new Buffer(); buffer.writeHexadecimalUnsignedLong(65535L); buffer.writeByte( ); buffer.writeHexadecimalUnsignedLong(0xcafebabeL); buffer.writeByte( ); buffer.writeHexadecimalUnsignedLong(0x10L); assertEquals( ffff cafebabe 10 , buffer.readUtf8());","title":"Write hexadecimal unsigned long"},{"location":"2.x/okio/okio/-buffered-sink/write-hexadecimal-unsigned-long/#writehexadecimalunsignedlong","text":"(js, jvm, native) abstract fun writeHexadecimalUnsignedLong(v: Long ): BufferedSink Writes a long to this sink in hexadecimal form (i.e., as a string in base 16). Buffer buffer = new Buffer(); buffer.writeHexadecimalUnsignedLong(65535L); buffer.writeByte( ); buffer.writeHexadecimalUnsignedLong(0xcafebabeL); buffer.writeByte( ); buffer.writeHexadecimalUnsignedLong(0x10L); assertEquals( ffff cafebabe 10 , buffer.readUtf8());","title":"writeHexadecimalUnsignedLong"},{"location":"2.x/okio/okio/-buffered-sink/write-int-le/","text":"okio / okio / BufferedSink / writeIntLe writeIntLe (js, jvm, native) abstract fun writeIntLe(i: Int ): BufferedSink Writes a little-endian int to this sink using four bytes. Buffer buffer = new Buffer(); buffer.writeIntLe(2147483647); buffer.writeIntLe(15); assertEquals(8, buffer.size()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals(0, buffer.size());","title":"Write int le"},{"location":"2.x/okio/okio/-buffered-sink/write-int-le/#writeintle","text":"(js, jvm, native) abstract fun writeIntLe(i: Int ): BufferedSink Writes a little-endian int to this sink using four bytes. Buffer buffer = new Buffer(); buffer.writeIntLe(2147483647); buffer.writeIntLe(15); assertEquals(8, buffer.size()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals(0, buffer.size());","title":"writeIntLe"},{"location":"2.x/okio/okio/-buffered-sink/write-int/","text":"okio / okio / BufferedSink / writeInt writeInt (js, jvm, native) abstract fun writeInt(i: Int ): BufferedSink Writes a big-endian int to this sink using four bytes. Buffer buffer = new Buffer(); buffer.writeInt(2147483647); buffer.writeInt(15); assertEquals(8, buffer.size()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals(0, buffer.size());","title":"Write int"},{"location":"2.x/okio/okio/-buffered-sink/write-int/#writeint","text":"(js, jvm, native) abstract fun writeInt(i: Int ): BufferedSink Writes a big-endian int to this sink using four bytes. Buffer buffer = new Buffer(); buffer.writeInt(2147483647); buffer.writeInt(15); assertEquals(8, buffer.size()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals(0, buffer.size());","title":"writeInt"},{"location":"2.x/okio/okio/-buffered-sink/write-long-le/","text":"okio / okio / BufferedSink / writeLongLe writeLongLe (js, jvm, native) abstract fun writeLongLe(v: Long ): BufferedSink Writes a little-endian long to this sink using eight bytes. Buffer buffer = new Buffer(); buffer.writeLongLe(9223372036854775807L); buffer.writeLongLe(15); assertEquals(16, buffer.size()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals(0, buffer.size());","title":"Write long le"},{"location":"2.x/okio/okio/-buffered-sink/write-long-le/#writelongle","text":"(js, jvm, native) abstract fun writeLongLe(v: Long ): BufferedSink Writes a little-endian long to this sink using eight bytes. Buffer buffer = new Buffer(); buffer.writeLongLe(9223372036854775807L); buffer.writeLongLe(15); assertEquals(16, buffer.size()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals(0, buffer.size());","title":"writeLongLe"},{"location":"2.x/okio/okio/-buffered-sink/write-long/","text":"okio / okio / BufferedSink / writeLong writeLong (js, jvm, native) abstract fun writeLong(v: Long ): BufferedSink Writes a big-endian long to this sink using eight bytes. Buffer buffer = new Buffer(); buffer.writeLong(9223372036854775807L); buffer.writeLong(15); assertEquals(16, buffer.size()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals(0, buffer.size());","title":"Write long"},{"location":"2.x/okio/okio/-buffered-sink/write-long/#writelong","text":"(js, jvm, native) abstract fun writeLong(v: Long ): BufferedSink Writes a big-endian long to this sink using eight bytes. Buffer buffer = new Buffer(); buffer.writeLong(9223372036854775807L); buffer.writeLong(15); assertEquals(16, buffer.size()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals(0, buffer.size());","title":"writeLong"},{"location":"2.x/okio/okio/-buffered-sink/write-short-le/","text":"okio / okio / BufferedSink / writeShortLe writeShortLe (js, jvm, native) abstract fun writeShortLe(s: Int ): BufferedSink Writes a little-endian short to this sink using two bytes. Buffer buffer = new Buffer(); buffer.writeShortLe(32767); buffer.writeShortLe(15); assertEquals(4, buffer.size()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals(0, buffer.size());","title":"Write short le"},{"location":"2.x/okio/okio/-buffered-sink/write-short-le/#writeshortle","text":"(js, jvm, native) abstract fun writeShortLe(s: Int ): BufferedSink Writes a little-endian short to this sink using two bytes. Buffer buffer = new Buffer(); buffer.writeShortLe(32767); buffer.writeShortLe(15); assertEquals(4, buffer.size()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals(0, buffer.size());","title":"writeShortLe"},{"location":"2.x/okio/okio/-buffered-sink/write-short/","text":"okio / okio / BufferedSink / writeShort writeShort (js, jvm, native) abstract fun writeShort(s: Int ): BufferedSink Writes a big-endian short to this sink using two bytes. Buffer buffer = new Buffer(); buffer.writeShort(32767); buffer.writeShort(15); assertEquals(4, buffer.size()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals(0, buffer.size());","title":"Write short"},{"location":"2.x/okio/okio/-buffered-sink/write-short/#writeshort","text":"(js, jvm, native) abstract fun writeShort(s: Int ): BufferedSink Writes a big-endian short to this sink using two bytes. Buffer buffer = new Buffer(); buffer.writeShort(32767); buffer.writeShort(15); assertEquals(4, buffer.size()); assertEquals((byte) 0x7f, buffer.readByte()); assertEquals((byte) 0xff, buffer.readByte()); assertEquals((byte) 0x00, buffer.readByte()); assertEquals((byte) 0x0f, buffer.readByte()); assertEquals(0, buffer.size());","title":"writeShort"},{"location":"2.x/okio/okio/-buffered-sink/write-string/","text":"okio / okio / BufferedSink / writeString writeString (jvm) abstract fun writeString(string: String , charset: Charset ): BufferedSink abstract fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): BufferedSink","title":"Write string"},{"location":"2.x/okio/okio/-buffered-sink/write-string/#writestring","text":"(jvm) abstract fun writeString(string: String , charset: Charset ): BufferedSink abstract fun writeString(string: String , beginIndex: Int , endIndex: Int , charset: Charset ): BufferedSink","title":"writeString"},{"location":"2.x/okio/okio/-buffered-sink/write-utf8-code-point/","text":"okio / okio / BufferedSink / writeUtf8CodePoint writeUtf8CodePoint (js, jvm, native) abstract fun writeUtf8CodePoint(codePoint: Int ): BufferedSink Encodes codePoint in UTF-8 and writes it to this sink.","title":"Write utf8 code point"},{"location":"2.x/okio/okio/-buffered-sink/write-utf8-code-point/#writeutf8codepoint","text":"(js, jvm, native) abstract fun writeUtf8CodePoint(codePoint: Int ): BufferedSink Encodes codePoint in UTF-8 and writes it to this sink.","title":"writeUtf8CodePoint"},{"location":"2.x/okio/okio/-buffered-sink/write-utf8/","text":"okio / okio / BufferedSink / writeUtf8 writeUtf8 (js, jvm, native) abstract fun writeUtf8(string: String ): BufferedSink Encodes string in UTF-8 and writes it to this sink. Buffer buffer = new Buffer(); buffer.writeUtf8( Uh uh uh! ); buffer.writeByte( ); buffer.writeUtf8( You didn t say the magic word! ); assertEquals( Uh uh uh! You didn t say the magic word! , buffer.readUtf8()); (js, jvm, native) abstract fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): BufferedSink Encodes the characters at beginIndex up to endIndex from string in UTF-8 and writes it to this sink. Buffer buffer = new Buffer(); buffer.writeUtf8( I m a hacker!\\n , 6, 12); buffer.writeByte( ); buffer.writeUtf8( That s what I said: you re a nerd.\\n , 29, 33); buffer.writeByte( ); buffer.writeUtf8( I prefer to be called a hacker!\\n , 24, 31); assertEquals( hacker nerd hacker! , buffer.readUtf8());","title":"Write utf8"},{"location":"2.x/okio/okio/-buffered-sink/write-utf8/#writeutf8","text":"(js, jvm, native) abstract fun writeUtf8(string: String ): BufferedSink Encodes string in UTF-8 and writes it to this sink. Buffer buffer = new Buffer(); buffer.writeUtf8( Uh uh uh! ); buffer.writeByte( ); buffer.writeUtf8( You didn t say the magic word! ); assertEquals( Uh uh uh! You didn t say the magic word! , buffer.readUtf8()); (js, jvm, native) abstract fun writeUtf8(string: String , beginIndex: Int , endIndex: Int ): BufferedSink Encodes the characters at beginIndex up to endIndex from string in UTF-8 and writes it to this sink. Buffer buffer = new Buffer(); buffer.writeUtf8( I m a hacker!\\n , 6, 12); buffer.writeByte( ); buffer.writeUtf8( That s what I said: you re a nerd.\\n , 29, 33); buffer.writeByte( ); buffer.writeUtf8( I prefer to be called a hacker!\\n , 24, 31); assertEquals( hacker nerd hacker! , buffer.readUtf8());","title":"writeUtf8"},{"location":"2.x/okio/okio/-buffered-sink/write/","text":"okio / okio / BufferedSink / write write (js, jvm, native) abstract fun write(byteString: ByteString ): BufferedSink abstract fun write(byteString: ByteString , offset: Int , byteCount: Int ): BufferedSink (js, jvm, native) abstract fun write(source: ByteArray ): BufferedSink Like OutputStream.write , this writes a complete byte array to this sink. (js, jvm, native) abstract fun write(source: ByteArray , offset: Int , byteCount: Int ): BufferedSink Like OutputStream.write , this writes byteCount bytes of source , starting at offset . (js, jvm, native) abstract fun write(source: Source , byteCount: Long ): BufferedSink Removes byteCount bytes from source and appends them to this sink.","title":"Write"},{"location":"2.x/okio/okio/-buffered-sink/write/#write","text":"(js, jvm, native) abstract fun write(byteString: ByteString ): BufferedSink abstract fun write(byteString: ByteString , offset: Int , byteCount: Int ): BufferedSink (js, jvm, native) abstract fun write(source: ByteArray ): BufferedSink Like OutputStream.write , this writes a complete byte array to this sink. (js, jvm, native) abstract fun write(source: ByteArray , offset: Int , byteCount: Int ): BufferedSink Like OutputStream.write , this writes byteCount bytes of source , starting at offset . (js, jvm, native) abstract fun write(source: Source , byteCount: Long ): BufferedSink Removes byteCount bytes from source and appends them to this sink.","title":"write"},{"location":"2.x/okio/okio/-buffered-source/","text":"okio / okio / BufferedSource BufferedSource (js, jvm, native) interface BufferedSource : Source A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input. Properties Name Summary (js, jvm, native) buffer This source s internal buffer. abstract val buffer: Buffer Functions Name Summary (jvm) buffer Returns this source s internal buffer. abstract fun ~~buffer~~(): Buffer (js, jvm, native) exhausted Returns true if there are no more bytes in this source. This will block until there are bytes to read or the source is definitely exhausted. abstract fun exhausted(): Boolean (js, jvm, native) indexOf Equivalent to indexOf(b, 0) . abstract fun indexOf(b: Byte ): Long Returns the index of the first b in the buffer at or after fromIndex . This expands the buffer as necessary until b is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. abstract fun indexOf(b: Byte , fromIndex: Long ): Long Returns the index of b if it is found in the range of fromIndex inclusive to toIndex exclusive. If b isn t found, or if fromIndex == toIndex , then -1 is returned. abstract fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long Equivalent to indexOf(bytes, 0) . abstract fun indexOf(bytes: ByteString ): Long Returns the index of the first match for bytes in the buffer at or after fromIndex . This expands the buffer as necessary until bytes is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested bytes are found. abstract fun indexOf(bytes: ByteString , fromIndex: Long ): Long (js, jvm, native) indexOfElement Equivalent to indexOfElement(targetBytes, 0) . abstract fun indexOfElement(targetBytes: ByteString ): Long Returns the first index in this buffer that is at or after fromIndex and that contains any of the bytes in targetBytes . This expands the buffer as necessary until a target byte is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. abstract fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long (jvm) inputStream Returns an input stream that reads from this source. abstract fun inputStream(): InputStream (js, jvm, native) peek Returns a new BufferedSource that can read data from this BufferedSource without consuming it. The returned source becomes invalid once this source is next read or closed. abstract fun peek(): BufferedSource (js, jvm, native) rangeEquals Returns true if the bytes at offset in this source equal bytes . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match. abstract fun rangeEquals(offset: Long , bytes: ByteString ): Boolean Returns true if byteCount bytes at offset in this source equal bytes at bytesOffset . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match. abstract fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean (js, jvm, native) read Removes up to sink.length bytes from this and copies them into sink . Returns the number of bytes read, or -1 if this source is exhausted. abstract fun read(sink: ByteArray ): Int Removes up to byteCount bytes from this and copies them into sink at offset . Returns the number of bytes read, or -1 if this source is exhausted. abstract fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int (js, jvm, native) readAll Removes all bytes from this and appends them to sink . Returns the total number of bytes written to sink which will be 0 if this is exhausted. abstract fun readAll(sink: Sink ): Long (js, jvm, native) readByte Removes a byte from this source and returns it. abstract fun readByte(): Byte (js, jvm, native) readByteArray Removes all bytes from this and returns them as a byte array. abstract fun readByteArray(): ByteArray Removes byteCount bytes from this and returns them as a byte array. abstract fun readByteArray(byteCount: Long ): ByteArray (js, jvm, native) readByteString Removes all bytes bytes from this and returns them as a byte string. abstract fun readByteString(): ByteString Removes byteCount bytes from this and returns them as a byte string. abstract fun readByteString(byteCount: Long ): ByteString (js, jvm, native) readDecimalLong Reads a long from this source in signed decimal form (i.e., as a string in base 10 with optional leading - ). This will iterate until a non-digit character is found. abstract fun readDecimalLong(): Long (js, jvm, native) readFully Removes exactly sink.length bytes from this and copies them into sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. abstract fun readFully(sink: ByteArray ): Unit Removes exactly byteCount bytes from this and appends them to sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. abstract fun readFully(sink: Buffer , byteCount: Long ): Unit (js, jvm, native) readHexadecimalUnsignedLong Reads a long form this source in hexadecimal form (i.e., as a string in base 16). This will iterate until a non-hexadecimal character is found. abstract fun readHexadecimalUnsignedLong(): Long (js, jvm, native) readInt Removes four bytes from this source and returns a big-endian int. abstract fun readInt(): Int (js, jvm, native) readIntLe Removes four bytes from this source and returns a little-endian int. abstract fun readIntLe(): Int (js, jvm, native) readLong Removes eight bytes from this source and returns a big-endian long. abstract fun readLong(): Long (js, jvm, native) readLongLe Removes eight bytes from this source and returns a little-endian long. abstract fun readLongLe(): Long (js, jvm, native) readShort Removes two bytes from this source and returns a big-endian short. abstract fun readShort(): Short (js, jvm, native) readShortLe Removes two bytes from this source and returns a little-endian short. abstract fun readShortLe(): Short (jvm) readString Removes all bytes from this, decodes them as charset , and returns the string. abstract fun readString(charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string. abstract fun readString(byteCount: Long , charset: Charset ): String (js, jvm, native) readUtf8 Removes all bytes from this, decodes them as UTF-8, and returns the string. Returns the empty string if this source is empty. abstract fun readUtf8(): String Removes byteCount bytes from this, decodes them as UTF-8, and returns the string. abstract fun readUtf8(byteCount: Long ): String (js, jvm, native) readUtf8CodePoint Removes and returns a single UTF-8 code point, reading between 1 and 4 bytes as necessary. abstract fun readUtf8CodePoint(): Int (js, jvm, native) readUtf8Line Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. abstract fun readUtf8Line(): String ? (js, jvm, native) readUtf8LineStrict Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. abstract fun readUtf8LineStrict(): String Like readUtf8LineStrict , except this allows the caller to specify the longest allowed match. Use this to protect against streams that may not include \"\\n\" or \"\\r\\n\" . abstract fun readUtf8LineStrict(limit: Long ): String (js, jvm, native) request Returns true when the buffer contains at least byteCount bytes, expanding it as necessary. Returns false if the source is exhausted before the requested bytes can be read. abstract fun request(byteCount: Long ): Boolean (js, jvm, native) require Returns when the buffer contains at least byteCount bytes. Throws an java.io.EOFException if the source is exhausted before the required bytes can be read. abstract fun require(byteCount: Long ): Unit select (native) abstract fun select(options: ERROR CLASS ): Int (js, jvm) Finds the first string in options that is a prefix of this buffer, consumes it from this buffer, and returns its index. If no byte string in options is a prefix of this buffer this returns -1 and no bytes are consumed. abstract fun select(options: Options ): Int (js, jvm, native) skip Reads and discards byteCount bytes from this source. Throws an java.io.EOFException if the source is exhausted before the requested bytes can be skipped. abstract fun skip(byteCount: Long ): Unit Extension Functions Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource Inheritors Name Summary (js, jvm, native) Buffer A collection of bytes in memory. class Buffer : BufferedSource , BufferedSink","title":"Home"},{"location":"2.x/okio/okio/-buffered-source/#bufferedsource","text":"(js, jvm, native) interface BufferedSource : Source A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input.","title":"BufferedSource"},{"location":"2.x/okio/okio/-buffered-source/#properties","text":"Name Summary (js, jvm, native) buffer This source s internal buffer. abstract val buffer: Buffer","title":"Properties"},{"location":"2.x/okio/okio/-buffered-source/#functions","text":"Name Summary (jvm) buffer Returns this source s internal buffer. abstract fun ~~buffer~~(): Buffer (js, jvm, native) exhausted Returns true if there are no more bytes in this source. This will block until there are bytes to read or the source is definitely exhausted. abstract fun exhausted(): Boolean (js, jvm, native) indexOf Equivalent to indexOf(b, 0) . abstract fun indexOf(b: Byte ): Long Returns the index of the first b in the buffer at or after fromIndex . This expands the buffer as necessary until b is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. abstract fun indexOf(b: Byte , fromIndex: Long ): Long Returns the index of b if it is found in the range of fromIndex inclusive to toIndex exclusive. If b isn t found, or if fromIndex == toIndex , then -1 is returned. abstract fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long Equivalent to indexOf(bytes, 0) . abstract fun indexOf(bytes: ByteString ): Long Returns the index of the first match for bytes in the buffer at or after fromIndex . This expands the buffer as necessary until bytes is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested bytes are found. abstract fun indexOf(bytes: ByteString , fromIndex: Long ): Long (js, jvm, native) indexOfElement Equivalent to indexOfElement(targetBytes, 0) . abstract fun indexOfElement(targetBytes: ByteString ): Long Returns the first index in this buffer that is at or after fromIndex and that contains any of the bytes in targetBytes . This expands the buffer as necessary until a target byte is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. abstract fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long (jvm) inputStream Returns an input stream that reads from this source. abstract fun inputStream(): InputStream (js, jvm, native) peek Returns a new BufferedSource that can read data from this BufferedSource without consuming it. The returned source becomes invalid once this source is next read or closed. abstract fun peek(): BufferedSource (js, jvm, native) rangeEquals Returns true if the bytes at offset in this source equal bytes . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match. abstract fun rangeEquals(offset: Long , bytes: ByteString ): Boolean Returns true if byteCount bytes at offset in this source equal bytes at bytesOffset . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match. abstract fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean (js, jvm, native) read Removes up to sink.length bytes from this and copies them into sink . Returns the number of bytes read, or -1 if this source is exhausted. abstract fun read(sink: ByteArray ): Int Removes up to byteCount bytes from this and copies them into sink at offset . Returns the number of bytes read, or -1 if this source is exhausted. abstract fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int (js, jvm, native) readAll Removes all bytes from this and appends them to sink . Returns the total number of bytes written to sink which will be 0 if this is exhausted. abstract fun readAll(sink: Sink ): Long (js, jvm, native) readByte Removes a byte from this source and returns it. abstract fun readByte(): Byte (js, jvm, native) readByteArray Removes all bytes from this and returns them as a byte array. abstract fun readByteArray(): ByteArray Removes byteCount bytes from this and returns them as a byte array. abstract fun readByteArray(byteCount: Long ): ByteArray (js, jvm, native) readByteString Removes all bytes bytes from this and returns them as a byte string. abstract fun readByteString(): ByteString Removes byteCount bytes from this and returns them as a byte string. abstract fun readByteString(byteCount: Long ): ByteString (js, jvm, native) readDecimalLong Reads a long from this source in signed decimal form (i.e., as a string in base 10 with optional leading - ). This will iterate until a non-digit character is found. abstract fun readDecimalLong(): Long (js, jvm, native) readFully Removes exactly sink.length bytes from this and copies them into sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. abstract fun readFully(sink: ByteArray ): Unit Removes exactly byteCount bytes from this and appends them to sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. abstract fun readFully(sink: Buffer , byteCount: Long ): Unit (js, jvm, native) readHexadecimalUnsignedLong Reads a long form this source in hexadecimal form (i.e., as a string in base 16). This will iterate until a non-hexadecimal character is found. abstract fun readHexadecimalUnsignedLong(): Long (js, jvm, native) readInt Removes four bytes from this source and returns a big-endian int. abstract fun readInt(): Int (js, jvm, native) readIntLe Removes four bytes from this source and returns a little-endian int. abstract fun readIntLe(): Int (js, jvm, native) readLong Removes eight bytes from this source and returns a big-endian long. abstract fun readLong(): Long (js, jvm, native) readLongLe Removes eight bytes from this source and returns a little-endian long. abstract fun readLongLe(): Long (js, jvm, native) readShort Removes two bytes from this source and returns a big-endian short. abstract fun readShort(): Short (js, jvm, native) readShortLe Removes two bytes from this source and returns a little-endian short. abstract fun readShortLe(): Short (jvm) readString Removes all bytes from this, decodes them as charset , and returns the string. abstract fun readString(charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string. abstract fun readString(byteCount: Long , charset: Charset ): String (js, jvm, native) readUtf8 Removes all bytes from this, decodes them as UTF-8, and returns the string. Returns the empty string if this source is empty. abstract fun readUtf8(): String Removes byteCount bytes from this, decodes them as UTF-8, and returns the string. abstract fun readUtf8(byteCount: Long ): String (js, jvm, native) readUtf8CodePoint Removes and returns a single UTF-8 code point, reading between 1 and 4 bytes as necessary. abstract fun readUtf8CodePoint(): Int (js, jvm, native) readUtf8Line Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. abstract fun readUtf8Line(): String ? (js, jvm, native) readUtf8LineStrict Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. abstract fun readUtf8LineStrict(): String Like readUtf8LineStrict , except this allows the caller to specify the longest allowed match. Use this to protect against streams that may not include \"\\n\" or \"\\r\\n\" . abstract fun readUtf8LineStrict(limit: Long ): String (js, jvm, native) request Returns true when the buffer contains at least byteCount bytes, expanding it as necessary. Returns false if the source is exhausted before the requested bytes can be read. abstract fun request(byteCount: Long ): Boolean (js, jvm, native) require Returns when the buffer contains at least byteCount bytes. Throws an java.io.EOFException if the source is exhausted before the required bytes can be read. abstract fun require(byteCount: Long ): Unit select (native) abstract fun select(options: ERROR CLASS ): Int (js, jvm) Finds the first string in options that is a prefix of this buffer, consumes it from this buffer, and returns its index. If no byte string in options is a prefix of this buffer this returns -1 and no bytes are consumed. abstract fun select(options: Options ): Int (js, jvm, native) skip Reads and discards byteCount bytes from this source. Throws an java.io.EOFException if the source is exhausted before the requested bytes can be skipped. abstract fun skip(byteCount: Long ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-buffered-source/#extension-functions","text":"Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Extension Functions"},{"location":"2.x/okio/okio/-buffered-source/#inheritors","text":"Name Summary (js, jvm, native) Buffer A collection of bytes in memory. class Buffer : BufferedSource , BufferedSink","title":"Inheritors"},{"location":"2.x/okio/okio/-buffered-source/buffer/","text":"okio / okio / BufferedSource / buffer buffer (js, jvm, native) abstract val buffer: Buffer This source s internal buffer. (jvm) abstract fun ~~buffer~~(): Buffer Deprecated: moved to val: use getBuffer() instead Returns this source s internal buffer.","title":"Buffer"},{"location":"2.x/okio/okio/-buffered-source/buffer/#buffer","text":"(js, jvm, native) abstract val buffer: Buffer This source s internal buffer. (jvm) abstract fun ~~buffer~~(): Buffer Deprecated: moved to val: use getBuffer() instead Returns this source s internal buffer.","title":"buffer"},{"location":"2.x/okio/okio/-buffered-source/exhausted/","text":"okio / okio / BufferedSource / exhausted exhausted (js, jvm, native) abstract fun exhausted(): Boolean Returns true if there are no more bytes in this source. This will block until there are bytes to read or the source is definitely exhausted.","title":"Exhausted"},{"location":"2.x/okio/okio/-buffered-source/exhausted/#exhausted","text":"(js, jvm, native) abstract fun exhausted(): Boolean Returns true if there are no more bytes in this source. This will block until there are bytes to read or the source is definitely exhausted.","title":"exhausted"},{"location":"2.x/okio/okio/-buffered-source/index-of-element/","text":"okio / okio / BufferedSource / indexOfElement indexOfElement (js, jvm, native) abstract fun indexOfElement(targetBytes: ByteString ): Long Equivalent to indexOfElement(targetBytes, 0) . (js, jvm, native) abstract fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long Returns the first index in this buffer that is at or after fromIndex and that contains any of the bytes in targetBytes . This expands the buffer as necessary until a target byte is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. ByteString ANY_VOWEL = ByteString.encodeUtf8( AEOIUaeoiu ); Buffer buffer = new Buffer(); buffer.writeUtf8( Dr. Alan Grant ); assertEquals(4, buffer.indexOfElement(ANY_VOWEL)); // A in Alan . assertEquals(11, buffer.indexOfElement(ANY_VOWEL, 9)); // a in Grant .","title":"Index of element"},{"location":"2.x/okio/okio/-buffered-source/index-of-element/#indexofelement","text":"(js, jvm, native) abstract fun indexOfElement(targetBytes: ByteString ): Long Equivalent to indexOfElement(targetBytes, 0) . (js, jvm, native) abstract fun indexOfElement(targetBytes: ByteString , fromIndex: Long ): Long Returns the first index in this buffer that is at or after fromIndex and that contains any of the bytes in targetBytes . This expands the buffer as necessary until a target byte is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. ByteString ANY_VOWEL = ByteString.encodeUtf8( AEOIUaeoiu ); Buffer buffer = new Buffer(); buffer.writeUtf8( Dr. Alan Grant ); assertEquals(4, buffer.indexOfElement(ANY_VOWEL)); // A in Alan . assertEquals(11, buffer.indexOfElement(ANY_VOWEL, 9)); // a in Grant .","title":"indexOfElement"},{"location":"2.x/okio/okio/-buffered-source/index-of/","text":"okio / okio / BufferedSource / indexOf indexOf (js, jvm, native) abstract fun indexOf(b: Byte ): Long Equivalent to indexOf(b, 0) . (js, jvm, native) abstract fun indexOf(b: Byte , fromIndex: Long ): Long Returns the index of the first b in the buffer at or after fromIndex . This expands the buffer as necessary until b is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. Buffer buffer = new Buffer(); buffer.writeUtf8( Don t move! He can t see us if we don t move. ); byte m = m ; assertEquals(6, buffer.indexOf(m)); assertEquals(40, buffer.indexOf(m, 12)); (js, jvm, native) abstract fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long Returns the index of b if it is found in the range of fromIndex inclusive to toIndex exclusive. If b isn t found, or if fromIndex == toIndex , then -1 is returned. The scan terminates at either toIndex or the end of the buffer, whichever comes first. The maximum number of bytes scanned is toIndex-fromIndex . (js, jvm, native) abstract fun indexOf(bytes: ByteString ): Long Equivalent to indexOf(bytes, 0) . (js, jvm, native) abstract fun indexOf(bytes: ByteString , fromIndex: Long ): Long Returns the index of the first match for bytes in the buffer at or after fromIndex . This expands the buffer as necessary until bytes is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested bytes are found. ByteString MOVE = ByteString.encodeUtf8( move ); Buffer buffer = new Buffer(); buffer.writeUtf8( Don t move! He can t see us if we don t move. ); assertEquals(6, buffer.indexOf(MOVE)); assertEquals(40, buffer.indexOf(MOVE, 12));","title":"Index of"},{"location":"2.x/okio/okio/-buffered-source/index-of/#indexof","text":"(js, jvm, native) abstract fun indexOf(b: Byte ): Long Equivalent to indexOf(b, 0) . (js, jvm, native) abstract fun indexOf(b: Byte , fromIndex: Long ): Long Returns the index of the first b in the buffer at or after fromIndex . This expands the buffer as necessary until b is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested byte is found. Buffer buffer = new Buffer(); buffer.writeUtf8( Don t move! He can t see us if we don t move. ); byte m = m ; assertEquals(6, buffer.indexOf(m)); assertEquals(40, buffer.indexOf(m, 12)); (js, jvm, native) abstract fun indexOf(b: Byte , fromIndex: Long , toIndex: Long ): Long Returns the index of b if it is found in the range of fromIndex inclusive to toIndex exclusive. If b isn t found, or if fromIndex == toIndex , then -1 is returned. The scan terminates at either toIndex or the end of the buffer, whichever comes first. The maximum number of bytes scanned is toIndex-fromIndex . (js, jvm, native) abstract fun indexOf(bytes: ByteString ): Long Equivalent to indexOf(bytes, 0) . (js, jvm, native) abstract fun indexOf(bytes: ByteString , fromIndex: Long ): Long Returns the index of the first match for bytes in the buffer at or after fromIndex . This expands the buffer as necessary until bytes is found. This reads an unbounded number of bytes into the buffer. Returns -1 if the stream is exhausted before the requested bytes are found. ByteString MOVE = ByteString.encodeUtf8( move ); Buffer buffer = new Buffer(); buffer.writeUtf8( Don t move! He can t see us if we don t move. ); assertEquals(6, buffer.indexOf(MOVE)); assertEquals(40, buffer.indexOf(MOVE, 12));","title":"indexOf"},{"location":"2.x/okio/okio/-buffered-source/input-stream/","text":"okio / okio / BufferedSource / inputStream inputStream (jvm) abstract fun inputStream(): InputStream Returns an input stream that reads from this source.","title":"Input stream"},{"location":"2.x/okio/okio/-buffered-source/input-stream/#inputstream","text":"(jvm) abstract fun inputStream(): InputStream Returns an input stream that reads from this source.","title":"inputStream"},{"location":"2.x/okio/okio/-buffered-source/peek/","text":"okio / okio / BufferedSource / peek peek (js, jvm, native) abstract fun peek(): BufferedSource Returns a new BufferedSource that can read data from this BufferedSource without consuming it. The returned source becomes invalid once this source is next read or closed. For example, we can use peek() to lookahead and read the same data multiple times. val buffer = Buffer() buffer.writeUtf8( abcdefghi ) buffer.readUtf8(3) // returns abc , buffer contains defghi val peek = buffer.peek() peek.readUtf8(3) // returns def , buffer contains defghi peek.readUtf8(3) // returns ghi , buffer contains defghi buffer.readUtf8(3) // returns def , buffer contains ghi","title":"Peek"},{"location":"2.x/okio/okio/-buffered-source/peek/#peek","text":"(js, jvm, native) abstract fun peek(): BufferedSource Returns a new BufferedSource that can read data from this BufferedSource without consuming it. The returned source becomes invalid once this source is next read or closed. For example, we can use peek() to lookahead and read the same data multiple times. val buffer = Buffer() buffer.writeUtf8( abcdefghi ) buffer.readUtf8(3) // returns abc , buffer contains defghi val peek = buffer.peek() peek.readUtf8(3) // returns def , buffer contains defghi peek.readUtf8(3) // returns ghi , buffer contains defghi buffer.readUtf8(3) // returns def , buffer contains ghi","title":"peek"},{"location":"2.x/okio/okio/-buffered-source/range-equals/","text":"okio / okio / BufferedSource / rangeEquals rangeEquals (js, jvm, native) abstract fun rangeEquals(offset: Long , bytes: ByteString ): Boolean Returns true if the bytes at offset in this source equal bytes . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match. ByteString simonSays = ByteString.encodeUtf8( Simon says: ); Buffer standOnOneLeg = new Buffer().writeUtf8( Simon says: Stand on one leg. ); assertTrue(standOnOneLeg.rangeEquals(0, simonSays)); Buffer payMeMoney = new Buffer().writeUtf8( Pay me $1,000,000. ); assertFalse(payMeMoney.rangeEquals(0, simonSays)); (js, jvm, native) abstract fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean Returns true if byteCount bytes at offset in this source equal bytes at bytesOffset . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match.","title":"Range equals"},{"location":"2.x/okio/okio/-buffered-source/range-equals/#rangeequals","text":"(js, jvm, native) abstract fun rangeEquals(offset: Long , bytes: ByteString ): Boolean Returns true if the bytes at offset in this source equal bytes . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match. ByteString simonSays = ByteString.encodeUtf8( Simon says: ); Buffer standOnOneLeg = new Buffer().writeUtf8( Simon says: Stand on one leg. ); assertTrue(standOnOneLeg.rangeEquals(0, simonSays)); Buffer payMeMoney = new Buffer().writeUtf8( Pay me $1,000,000. ); assertFalse(payMeMoney.rangeEquals(0, simonSays)); (js, jvm, native) abstract fun rangeEquals(offset: Long , bytes: ByteString , bytesOffset: Int , byteCount: Int ): Boolean Returns true if byteCount bytes at offset in this source equal bytes at bytesOffset . This expands the buffer as necessary until a byte does not match, all bytes are matched, or if the stream is exhausted before enough bytes could determine a match.","title":"rangeEquals"},{"location":"2.x/okio/okio/-buffered-source/read-all/","text":"okio / okio / BufferedSource / readAll readAll (js, jvm, native) abstract fun readAll(sink: Sink ): Long Removes all bytes from this and appends them to sink . Returns the total number of bytes written to sink which will be 0 if this is exhausted.","title":"Read all"},{"location":"2.x/okio/okio/-buffered-source/read-all/#readall","text":"(js, jvm, native) abstract fun readAll(sink: Sink ): Long Removes all bytes from this and appends them to sink . Returns the total number of bytes written to sink which will be 0 if this is exhausted.","title":"readAll"},{"location":"2.x/okio/okio/-buffered-source/read-byte-array/","text":"okio / okio / BufferedSource / readByteArray readByteArray (js, jvm, native) abstract fun readByteArray(): ByteArray Removes all bytes from this and returns them as a byte array. (js, jvm, native) abstract fun readByteArray(byteCount: Long ): ByteArray Removes byteCount bytes from this and returns them as a byte array.","title":"Read byte array"},{"location":"2.x/okio/okio/-buffered-source/read-byte-array/#readbytearray","text":"(js, jvm, native) abstract fun readByteArray(): ByteArray Removes all bytes from this and returns them as a byte array. (js, jvm, native) abstract fun readByteArray(byteCount: Long ): ByteArray Removes byteCount bytes from this and returns them as a byte array.","title":"readByteArray"},{"location":"2.x/okio/okio/-buffered-source/read-byte-string/","text":"okio / okio / BufferedSource / readByteString readByteString (js, jvm, native) abstract fun readByteString(): ByteString Removes all bytes bytes from this and returns them as a byte string. (js, jvm, native) abstract fun readByteString(byteCount: Long ): ByteString Removes byteCount bytes from this and returns them as a byte string.","title":"Read byte string"},{"location":"2.x/okio/okio/-buffered-source/read-byte-string/#readbytestring","text":"(js, jvm, native) abstract fun readByteString(): ByteString Removes all bytes bytes from this and returns them as a byte string. (js, jvm, native) abstract fun readByteString(byteCount: Long ): ByteString Removes byteCount bytes from this and returns them as a byte string.","title":"readByteString"},{"location":"2.x/okio/okio/-buffered-source/read-byte/","text":"okio / okio / BufferedSource / readByte readByte (js, jvm, native) abstract fun readByte(): Byte Removes a byte from this source and returns it.","title":"Read byte"},{"location":"2.x/okio/okio/-buffered-source/read-byte/#readbyte","text":"(js, jvm, native) abstract fun readByte(): Byte Removes a byte from this source and returns it.","title":"readByte"},{"location":"2.x/okio/okio/-buffered-source/read-decimal-long/","text":"okio / okio / BufferedSource / readDecimalLong readDecimalLong (js, jvm, native) abstract fun readDecimalLong(): Long Reads a long from this source in signed decimal form (i.e., as a string in base 10 with optional leading - ). This will iterate until a non-digit character is found. Buffer buffer = new Buffer() .writeUtf8( 8675309 -123 00001 ); assertEquals(8675309L, buffer.readDecimalLong()); assertEquals( , buffer.readByte()); assertEquals(-123L, buffer.readDecimalLong()); assertEquals( , buffer.readByte()); assertEquals(1L, buffer.readDecimalLong()); Exceptions NumberFormatException - if the found digits do not fit into a long or a decimal number was not present.","title":"Read decimal long"},{"location":"2.x/okio/okio/-buffered-source/read-decimal-long/#readdecimallong","text":"(js, jvm, native) abstract fun readDecimalLong(): Long Reads a long from this source in signed decimal form (i.e., as a string in base 10 with optional leading - ). This will iterate until a non-digit character is found. Buffer buffer = new Buffer() .writeUtf8( 8675309 -123 00001 ); assertEquals(8675309L, buffer.readDecimalLong()); assertEquals( , buffer.readByte()); assertEquals(-123L, buffer.readDecimalLong()); assertEquals( , buffer.readByte()); assertEquals(1L, buffer.readDecimalLong());","title":"readDecimalLong"},{"location":"2.x/okio/okio/-buffered-source/read-decimal-long/#exceptions","text":"NumberFormatException - if the found digits do not fit into a long or a decimal number was not present.","title":"Exceptions"},{"location":"2.x/okio/okio/-buffered-source/read-fully/","text":"okio / okio / BufferedSource / readFully readFully (js, jvm, native) abstract fun readFully(sink: ByteArray ): Unit (js) Removes exactly sink.length bytes from this and copies them into sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. (jvm) Removes exactly sink.length bytes from this and copies them into sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. (js, jvm, native) abstract fun readFully(sink: Buffer , byteCount: Long ): Unit (js) Removes exactly byteCount bytes from this and appends them to sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. (jvm) Removes exactly byteCount bytes from this and appends them to sink . Throws an java.io.EOFException if the requested number of bytes cannot be read.","title":"Read fully"},{"location":"2.x/okio/okio/-buffered-source/read-fully/#readfully","text":"(js, jvm, native) abstract fun readFully(sink: ByteArray ): Unit (js) Removes exactly sink.length bytes from this and copies them into sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. (jvm) Removes exactly sink.length bytes from this and copies them into sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. (js, jvm, native) abstract fun readFully(sink: Buffer , byteCount: Long ): Unit (js) Removes exactly byteCount bytes from this and appends them to sink . Throws an java.io.EOFException if the requested number of bytes cannot be read. (jvm) Removes exactly byteCount bytes from this and appends them to sink . Throws an java.io.EOFException if the requested number of bytes cannot be read.","title":"readFully"},{"location":"2.x/okio/okio/-buffered-source/read-hexadecimal-unsigned-long/","text":"okio / okio / BufferedSource / readHexadecimalUnsignedLong readHexadecimalUnsignedLong (js, jvm, native) abstract fun readHexadecimalUnsignedLong(): Long Reads a long form this source in hexadecimal form (i.e., as a string in base 16). This will iterate until a non-hexadecimal character is found. Buffer buffer = new Buffer() .writeUtf8( ffff CAFEBABE 10 ); assertEquals(65535L, buffer.readHexadecimalUnsignedLong()); assertEquals( , buffer.readByte()); assertEquals(0xcafebabeL, buffer.readHexadecimalUnsignedLong()); assertEquals( , buffer.readByte()); assertEquals(0x10L, buffer.readHexadecimalUnsignedLong()); Exceptions NumberFormatException - if the found hexadecimal does not fit into a long or hexadecimal was not found.","title":"Read hexadecimal unsigned long"},{"location":"2.x/okio/okio/-buffered-source/read-hexadecimal-unsigned-long/#readhexadecimalunsignedlong","text":"(js, jvm, native) abstract fun readHexadecimalUnsignedLong(): Long Reads a long form this source in hexadecimal form (i.e., as a string in base 16). This will iterate until a non-hexadecimal character is found. Buffer buffer = new Buffer() .writeUtf8( ffff CAFEBABE 10 ); assertEquals(65535L, buffer.readHexadecimalUnsignedLong()); assertEquals( , buffer.readByte()); assertEquals(0xcafebabeL, buffer.readHexadecimalUnsignedLong()); assertEquals( , buffer.readByte()); assertEquals(0x10L, buffer.readHexadecimalUnsignedLong());","title":"readHexadecimalUnsignedLong"},{"location":"2.x/okio/okio/-buffered-source/read-hexadecimal-unsigned-long/#exceptions","text":"NumberFormatException - if the found hexadecimal does not fit into a long or hexadecimal was not found.","title":"Exceptions"},{"location":"2.x/okio/okio/-buffered-source/read-int-le/","text":"okio / okio / BufferedSource / readIntLe readIntLe (js, jvm, native) abstract fun readIntLe(): Int Removes four bytes from this source and returns a little-endian int. Buffer buffer = new Buffer() .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x7f) .writeByte(0x0f) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00); assertEquals(8, buffer.size()); assertEquals(2147483647, buffer.readIntLe()); assertEquals(4, buffer.size()); assertEquals(15, buffer.readIntLe()); assertEquals(0, buffer.size());","title":"Read int le"},{"location":"2.x/okio/okio/-buffered-source/read-int-le/#readintle","text":"(js, jvm, native) abstract fun readIntLe(): Int Removes four bytes from this source and returns a little-endian int. Buffer buffer = new Buffer() .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x7f) .writeByte(0x0f) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00); assertEquals(8, buffer.size()); assertEquals(2147483647, buffer.readIntLe()); assertEquals(4, buffer.size()); assertEquals(15, buffer.readIntLe()); assertEquals(0, buffer.size());","title":"readIntLe"},{"location":"2.x/okio/okio/-buffered-source/read-int/","text":"okio / okio / BufferedSource / readInt readInt (js, jvm, native) abstract fun readInt(): Int Removes four bytes from this source and returns a big-endian int. Buffer buffer = new Buffer() .writeByte(0x7f) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x0f); assertEquals(8, buffer.size()); assertEquals(2147483647, buffer.readInt()); assertEquals(4, buffer.size()); assertEquals(15, buffer.readInt()); assertEquals(0, buffer.size());","title":"Read int"},{"location":"2.x/okio/okio/-buffered-source/read-int/#readint","text":"(js, jvm, native) abstract fun readInt(): Int Removes four bytes from this source and returns a big-endian int. Buffer buffer = new Buffer() .writeByte(0x7f) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x0f); assertEquals(8, buffer.size()); assertEquals(2147483647, buffer.readInt()); assertEquals(4, buffer.size()); assertEquals(15, buffer.readInt()); assertEquals(0, buffer.size());","title":"readInt"},{"location":"2.x/okio/okio/-buffered-source/read-long-le/","text":"okio / okio / BufferedSource / readLongLe readLongLe (js, jvm, native) abstract fun readLongLe(): Long Removes eight bytes from this source and returns a little-endian long. Buffer buffer = new Buffer() .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x7f) .writeByte(0x0f) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00); assertEquals(16, buffer.size()); assertEquals(9223372036854775807L, buffer.readLongLe()); assertEquals(8, buffer.size()); assertEquals(15, buffer.readLongLe()); assertEquals(0, buffer.size());","title":"Read long le"},{"location":"2.x/okio/okio/-buffered-source/read-long-le/#readlongle","text":"(js, jvm, native) abstract fun readLongLe(): Long Removes eight bytes from this source and returns a little-endian long. Buffer buffer = new Buffer() .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x7f) .writeByte(0x0f) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00); assertEquals(16, buffer.size()); assertEquals(9223372036854775807L, buffer.readLongLe()); assertEquals(8, buffer.size()); assertEquals(15, buffer.readLongLe()); assertEquals(0, buffer.size());","title":"readLongLe"},{"location":"2.x/okio/okio/-buffered-source/read-long/","text":"okio / okio / BufferedSource / readLong readLong (js, jvm, native) abstract fun readLong(): Long Removes eight bytes from this source and returns a big-endian long. Buffer buffer = new Buffer() .writeByte(0x7f) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x0f); assertEquals(16, buffer.size()); assertEquals(9223372036854775807L, buffer.readLong()); assertEquals(8, buffer.size()); assertEquals(15, buffer.readLong()); assertEquals(0, buffer.size());","title":"Read long"},{"location":"2.x/okio/okio/-buffered-source/read-long/#readlong","text":"(js, jvm, native) abstract fun readLong(): Long Removes eight bytes from this source and returns a big-endian long. Buffer buffer = new Buffer() .writeByte(0x7f) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0xff) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x00) .writeByte(0x0f); assertEquals(16, buffer.size()); assertEquals(9223372036854775807L, buffer.readLong()); assertEquals(8, buffer.size()); assertEquals(15, buffer.readLong()); assertEquals(0, buffer.size());","title":"readLong"},{"location":"2.x/okio/okio/-buffered-source/read-short-le/","text":"okio / okio / BufferedSource / readShortLe readShortLe (js, jvm, native) abstract fun readShortLe(): Short Removes two bytes from this source and returns a little-endian short. Buffer buffer = new Buffer() .writeByte(0xff) .writeByte(0x7f) .writeByte(0x0f) .writeByte(0x00); assertEquals(4, buffer.size()); assertEquals(32767, buffer.readShortLe()); assertEquals(2, buffer.size()); assertEquals(15, buffer.readShortLe()); assertEquals(0, buffer.size());","title":"Read short le"},{"location":"2.x/okio/okio/-buffered-source/read-short-le/#readshortle","text":"(js, jvm, native) abstract fun readShortLe(): Short Removes two bytes from this source and returns a little-endian short. Buffer buffer = new Buffer() .writeByte(0xff) .writeByte(0x7f) .writeByte(0x0f) .writeByte(0x00); assertEquals(4, buffer.size()); assertEquals(32767, buffer.readShortLe()); assertEquals(2, buffer.size()); assertEquals(15, buffer.readShortLe()); assertEquals(0, buffer.size());","title":"readShortLe"},{"location":"2.x/okio/okio/-buffered-source/read-short/","text":"okio / okio / BufferedSource / readShort readShort (js, jvm, native) abstract fun readShort(): Short Removes two bytes from this source and returns a big-endian short. Buffer buffer = new Buffer() .writeByte(0x7f) .writeByte(0xff) .writeByte(0x00) .writeByte(0x0f); assertEquals(4, buffer.size()); assertEquals(32767, buffer.readShort()); assertEquals(2, buffer.size()); assertEquals(15, buffer.readShort()); assertEquals(0, buffer.size());","title":"Read short"},{"location":"2.x/okio/okio/-buffered-source/read-short/#readshort","text":"(js, jvm, native) abstract fun readShort(): Short Removes two bytes from this source and returns a big-endian short. Buffer buffer = new Buffer() .writeByte(0x7f) .writeByte(0xff) .writeByte(0x00) .writeByte(0x0f); assertEquals(4, buffer.size()); assertEquals(32767, buffer.readShort()); assertEquals(2, buffer.size()); assertEquals(15, buffer.readShort()); assertEquals(0, buffer.size());","title":"readShort"},{"location":"2.x/okio/okio/-buffered-source/read-string/","text":"okio / okio / BufferedSource / readString readString (jvm) abstract fun readString(charset: Charset ): String Removes all bytes from this, decodes them as charset , and returns the string. (jvm) abstract fun readString(byteCount: Long , charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string.","title":"Read string"},{"location":"2.x/okio/okio/-buffered-source/read-string/#readstring","text":"(jvm) abstract fun readString(charset: Charset ): String Removes all bytes from this, decodes them as charset , and returns the string. (jvm) abstract fun readString(byteCount: Long , charset: Charset ): String Removes byteCount bytes from this, decodes them as charset , and returns the string.","title":"readString"},{"location":"2.x/okio/okio/-buffered-source/read-utf8-code-point/","text":"okio / okio / BufferedSource / readUtf8CodePoint readUtf8CodePoint (js, jvm, native) abstract fun readUtf8CodePoint(): Int (js) Removes and returns a single UTF-8 code point, reading between 1 and 4 bytes as necessary. If this source is exhausted before a complete code point can be read, this throws an java.io.EOFException and consumes no input. If this source doesn t start with a properly-encoded UTF-8 code point, this method will remove 1 or more non-UTF-8 bytes and return the replacement character ( U+FFFD ). This covers encoding problems (the input is not properly-encoded UTF-8), characters out of range (beyond the 0x10ffff limit of Unicode), code points for UTF-16 surrogates (U+d800..U+dfff) and overlong encodings (such as 0xc080 for the NUL character in modified UTF-8). (jvm) Removes and returns a single UTF-8 code point, reading between 1 and 4 bytes as necessary. If this source is exhausted before a complete code point can be read, this throws an java.io.EOFException and consumes no input. If this source doesn t start with a properly-encoded UTF-8 code point, this method will remove 1 or more non-UTF-8 bytes and return the replacement character ( U+FFFD ). This covers encoding problems (the input is not properly-encoded UTF-8), characters out of range (beyond the 0x10ffff limit of Unicode), code points for UTF-16 surrogates (U+d800..U+dfff) and overlong encodings (such as 0xc080 for the NUL character in modified UTF-8).","title":"Read utf8 code point"},{"location":"2.x/okio/okio/-buffered-source/read-utf8-code-point/#readutf8codepoint","text":"(js, jvm, native) abstract fun readUtf8CodePoint(): Int (js) Removes and returns a single UTF-8 code point, reading between 1 and 4 bytes as necessary. If this source is exhausted before a complete code point can be read, this throws an java.io.EOFException and consumes no input. If this source doesn t start with a properly-encoded UTF-8 code point, this method will remove 1 or more non-UTF-8 bytes and return the replacement character ( U+FFFD ). This covers encoding problems (the input is not properly-encoded UTF-8), characters out of range (beyond the 0x10ffff limit of Unicode), code points for UTF-16 surrogates (U+d800..U+dfff) and overlong encodings (such as 0xc080 for the NUL character in modified UTF-8). (jvm) Removes and returns a single UTF-8 code point, reading between 1 and 4 bytes as necessary. If this source is exhausted before a complete code point can be read, this throws an java.io.EOFException and consumes no input. If this source doesn t start with a properly-encoded UTF-8 code point, this method will remove 1 or more non-UTF-8 bytes and return the replacement character ( U+FFFD ). This covers encoding problems (the input is not properly-encoded UTF-8), characters out of range (beyond the 0x10ffff limit of Unicode), code points for UTF-16 surrogates (U+d800..U+dfff) and overlong encodings (such as 0xc080 for the NUL character in modified UTF-8).","title":"readUtf8CodePoint"},{"location":"2.x/okio/okio/-buffered-source/read-utf8-line-strict/","text":"okio / okio / BufferedSource / readUtf8LineStrict readUtf8LineStrict (js, jvm, native) abstract fun readUtf8LineStrict(): String (js) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. On the end of the stream this method throws. Every call must consume either \\r\\n or \\n . If these characters are absent in the stream, an java.io.EOFException is thrown. Use this for machine-generated data where a missing line break implies truncated input. (jvm) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. On the end of the stream this method throws. Every call must consume either \\r\\n or \\n . If these characters are absent in the stream, an java.io.EOFException is thrown. Use this for machine-generated data where a missing line break implies truncated input. (js, jvm, native) abstract fun readUtf8LineStrict(limit: Long ): String Like readUtf8LineStrict , except this allows the caller to specify the longest allowed match. Use this to protect against streams that may not include \"\\n\" or \"\\r\\n\" . The returned string will have at most limit UTF-8 bytes, and the maximum number of bytes scanned is limit + 2 . If limit == 0 this will always throw an EOFException because no bytes will be scanned. This method is safe. No bytes are discarded if the match fails, and the caller is free to try another match: Buffer buffer = new Buffer(); buffer.writeUtf8( 12345\\r\\n ); // This will throw! There must be \\r\\n or \\n at the limit or before it. buffer.readUtf8LineStrict(4); // No bytes have been consumed so the caller can retry. assertEquals( 12345 , buffer.readUtf8LineStrict(5));","title":"Read utf8 line strict"},{"location":"2.x/okio/okio/-buffered-source/read-utf8-line-strict/#readutf8linestrict","text":"(js, jvm, native) abstract fun readUtf8LineStrict(): String (js) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. On the end of the stream this method throws. Every call must consume either \\r\\n or \\n . If these characters are absent in the stream, an java.io.EOFException is thrown. Use this for machine-generated data where a missing line break implies truncated input. (jvm) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. On the end of the stream this method throws. Every call must consume either \\r\\n or \\n . If these characters are absent in the stream, an java.io.EOFException is thrown. Use this for machine-generated data where a missing line break implies truncated input. (js, jvm, native) abstract fun readUtf8LineStrict(limit: Long ): String Like readUtf8LineStrict , except this allows the caller to specify the longest allowed match. Use this to protect against streams that may not include \"\\n\" or \"\\r\\n\" . The returned string will have at most limit UTF-8 bytes, and the maximum number of bytes scanned is limit + 2 . If limit == 0 this will always throw an EOFException because no bytes will be scanned. This method is safe. No bytes are discarded if the match fails, and the caller is free to try another match: Buffer buffer = new Buffer(); buffer.writeUtf8( 12345\\r\\n ); // This will throw! There must be \\r\\n or \\n at the limit or before it. buffer.readUtf8LineStrict(4); // No bytes have been consumed so the caller can retry. assertEquals( 12345 , buffer.readUtf8LineStrict(5));","title":"readUtf8LineStrict"},{"location":"2.x/okio/okio/-buffered-source/read-utf8-line/","text":"okio / okio / BufferedSource / readUtf8Line readUtf8Line (js, jvm, native) abstract fun readUtf8Line(): String ? (js) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. Buffer buffer = new Buffer() .writeUtf8( I m a hacker!\\n ) .writeUtf8( That s what I said: you re a nerd.\\n ) .writeUtf8( I prefer to be called a hacker!\\n ); assertEquals(81, buffer.size()); assertEquals( I m a hacker! , buffer.readUtf8Line()); assertEquals(67, buffer.size()); assertEquals( That s what I said: you re a nerd. , buffer.readUtf8Line()); assertEquals(32, buffer.size()); assertEquals( I prefer to be called a hacker! , buffer.readUtf8Line()); assertEquals(0, buffer.size()); assertEquals(null, buffer.readUtf8Line()); assertEquals(0, buffer.size()); On the end of the stream this method returns null, just like java.io.BufferedReader . If the source doesn t end with a line break then an implicit line break is assumed. Null is returned once the source is exhausted. Use this for human-generated data, where a trailing line break is optional. (jvm) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. Buffer buffer = new Buffer() .writeUtf8( I m a hacker!\\n ) .writeUtf8( That s what I said: you re a nerd.\\n ) .writeUtf8( I prefer to be called a hacker!\\n ); assertEquals(81, buffer.size()); assertEquals( I m a hacker! , buffer.readUtf8Line()); assertEquals(67, buffer.size()); assertEquals( That s what I said: you re a nerd. , buffer.readUtf8Line()); assertEquals(32, buffer.size()); assertEquals( I prefer to be called a hacker! , buffer.readUtf8Line()); assertEquals(0, buffer.size()); assertEquals(null, buffer.readUtf8Line()); assertEquals(0, buffer.size()); On the end of the stream this method returns null, just like java.io.BufferedReader . If the source doesn t end with a line break then an implicit line break is assumed. Null is returned once the source is exhausted. Use this for human-generated data, where a trailing line break is optional.","title":"Read utf8 line"},{"location":"2.x/okio/okio/-buffered-source/read-utf8-line/#readutf8line","text":"(js, jvm, native) abstract fun readUtf8Line(): String ? (js) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. Buffer buffer = new Buffer() .writeUtf8( I m a hacker!\\n ) .writeUtf8( That s what I said: you re a nerd.\\n ) .writeUtf8( I prefer to be called a hacker!\\n ); assertEquals(81, buffer.size()); assertEquals( I m a hacker! , buffer.readUtf8Line()); assertEquals(67, buffer.size()); assertEquals( That s what I said: you re a nerd. , buffer.readUtf8Line()); assertEquals(32, buffer.size()); assertEquals( I prefer to be called a hacker! , buffer.readUtf8Line()); assertEquals(0, buffer.size()); assertEquals(null, buffer.readUtf8Line()); assertEquals(0, buffer.size()); On the end of the stream this method returns null, just like java.io.BufferedReader . If the source doesn t end with a line break then an implicit line break is assumed. Null is returned once the source is exhausted. Use this for human-generated data, where a trailing line break is optional. (jvm) Removes and returns characters up to but not including the next line break. A line break is either \"\\n\" or \"\\r\\n\" ; these characters are not included in the result. Buffer buffer = new Buffer() .writeUtf8( I m a hacker!\\n ) .writeUtf8( That s what I said: you re a nerd.\\n ) .writeUtf8( I prefer to be called a hacker!\\n ); assertEquals(81, buffer.size()); assertEquals( I m a hacker! , buffer.readUtf8Line()); assertEquals(67, buffer.size()); assertEquals( That s what I said: you re a nerd. , buffer.readUtf8Line()); assertEquals(32, buffer.size()); assertEquals( I prefer to be called a hacker! , buffer.readUtf8Line()); assertEquals(0, buffer.size()); assertEquals(null, buffer.readUtf8Line()); assertEquals(0, buffer.size()); On the end of the stream this method returns null, just like java.io.BufferedReader . If the source doesn t end with a line break then an implicit line break is assumed. Null is returned once the source is exhausted. Use this for human-generated data, where a trailing line break is optional.","title":"readUtf8Line"},{"location":"2.x/okio/okio/-buffered-source/read-utf8/","text":"okio / okio / BufferedSource / readUtf8 readUtf8 (js, jvm, native) abstract fun readUtf8(): String Removes all bytes from this, decodes them as UTF-8, and returns the string. Returns the empty string if this source is empty. Buffer buffer = new Buffer() .writeUtf8( Uh uh uh! ) .writeByte( ) .writeUtf8( You didn t say the magic word! ); assertEquals( Uh uh uh! You didn t say the magic word! , buffer.readUtf8()); assertEquals(0, buffer.size()); assertEquals( , buffer.readUtf8()); assertEquals(0, buffer.size()); (js, jvm, native) abstract fun readUtf8(byteCount: Long ): String Removes byteCount bytes from this, decodes them as UTF-8, and returns the string. Buffer buffer = new Buffer() .writeUtf8( Uh uh uh! ) .writeByte( ) .writeUtf8( You didn t say the magic word! ); assertEquals(40, buffer.size()); assertEquals( Uh uh uh! You , buffer.readUtf8(14)); assertEquals(26, buffer.size()); assertEquals( didn t say the , buffer.readUtf8(14)); assertEquals(12, buffer.size()); assertEquals( magic word! , buffer.readUtf8(12)); assertEquals(0, buffer.size());","title":"Read utf8"},{"location":"2.x/okio/okio/-buffered-source/read-utf8/#readutf8","text":"(js, jvm, native) abstract fun readUtf8(): String Removes all bytes from this, decodes them as UTF-8, and returns the string. Returns the empty string if this source is empty. Buffer buffer = new Buffer() .writeUtf8( Uh uh uh! ) .writeByte( ) .writeUtf8( You didn t say the magic word! ); assertEquals( Uh uh uh! You didn t say the magic word! , buffer.readUtf8()); assertEquals(0, buffer.size()); assertEquals( , buffer.readUtf8()); assertEquals(0, buffer.size()); (js, jvm, native) abstract fun readUtf8(byteCount: Long ): String Removes byteCount bytes from this, decodes them as UTF-8, and returns the string. Buffer buffer = new Buffer() .writeUtf8( Uh uh uh! ) .writeByte( ) .writeUtf8( You didn t say the magic word! ); assertEquals(40, buffer.size()); assertEquals( Uh uh uh! You , buffer.readUtf8(14)); assertEquals(26, buffer.size()); assertEquals( didn t say the , buffer.readUtf8(14)); assertEquals(12, buffer.size()); assertEquals( magic word! , buffer.readUtf8(12)); assertEquals(0, buffer.size());","title":"readUtf8"},{"location":"2.x/okio/okio/-buffered-source/read/","text":"okio / okio / BufferedSource / read read (js, jvm, native) abstract fun read(sink: ByteArray ): Int Removes up to sink.length bytes from this and copies them into sink . Returns the number of bytes read, or -1 if this source is exhausted. (js, jvm, native) abstract fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int Removes up to byteCount bytes from this and copies them into sink at offset . Returns the number of bytes read, or -1 if this source is exhausted.","title":"Read"},{"location":"2.x/okio/okio/-buffered-source/read/#read","text":"(js, jvm, native) abstract fun read(sink: ByteArray ): Int Removes up to sink.length bytes from this and copies them into sink . Returns the number of bytes read, or -1 if this source is exhausted. (js, jvm, native) abstract fun read(sink: ByteArray , offset: Int , byteCount: Int ): Int Removes up to byteCount bytes from this and copies them into sink at offset . Returns the number of bytes read, or -1 if this source is exhausted.","title":"read"},{"location":"2.x/okio/okio/-buffered-source/request/","text":"okio / okio / BufferedSource / request request (js, jvm, native) abstract fun request(byteCount: Long ): Boolean Returns true when the buffer contains at least byteCount bytes, expanding it as necessary. Returns false if the source is exhausted before the requested bytes can be read.","title":"Request"},{"location":"2.x/okio/okio/-buffered-source/request/#request","text":"(js, jvm, native) abstract fun request(byteCount: Long ): Boolean Returns true when the buffer contains at least byteCount bytes, expanding it as necessary. Returns false if the source is exhausted before the requested bytes can be read.","title":"request"},{"location":"2.x/okio/okio/-buffered-source/require/","text":"okio / okio / BufferedSource / require require (js, jvm, native) abstract fun require(byteCount: Long ): Unit (js) Returns when the buffer contains at least byteCount bytes. Throws an java.io.EOFException if the source is exhausted before the required bytes can be read. (jvm) Returns when the buffer contains at least byteCount bytes. Throws an java.io.EOFException if the source is exhausted before the required bytes can be read.","title":"Require"},{"location":"2.x/okio/okio/-buffered-source/require/#require","text":"(js, jvm, native) abstract fun require(byteCount: Long ): Unit (js) Returns when the buffer contains at least byteCount bytes. Throws an java.io.EOFException if the source is exhausted before the required bytes can be read. (jvm) Returns when the buffer contains at least byteCount bytes. Throws an java.io.EOFException if the source is exhausted before the required bytes can be read.","title":"require"},{"location":"2.x/okio/okio/-buffered-source/select/","text":"okio / okio / BufferedSource / select select (js, jvm) abstract fun select(options: Options ): Int Finds the first string in options that is a prefix of this buffer, consumes it from this buffer, and returns its index. If no byte string in options is a prefix of this buffer this returns -1 and no bytes are consumed. This can be used as an alternative to readByteString or even readUtf8 if the set of expected values is known in advance. Options FIELDS = Options.of( ByteString.encodeUtf8( depth= ), ByteString.encodeUtf8( height= ), ByteString.encodeUtf8( width= )); Buffer buffer = new Buffer() .writeUtf8( width=640\\n ) .writeUtf8( height=480\\n ); assertEquals(2, buffer.select(FIELDS)); assertEquals(640, buffer.readDecimalLong()); assertEquals( \\n , buffer.readByte()); assertEquals(1, buffer.select(FIELDS)); assertEquals(480, buffer.readDecimalLong()); assertEquals( \\n , buffer.readByte()); (native) abstract fun select(options: ERROR CLASS ): Int","title":"Select"},{"location":"2.x/okio/okio/-buffered-source/select/#select","text":"(js, jvm) abstract fun select(options: Options ): Int Finds the first string in options that is a prefix of this buffer, consumes it from this buffer, and returns its index. If no byte string in options is a prefix of this buffer this returns -1 and no bytes are consumed. This can be used as an alternative to readByteString or even readUtf8 if the set of expected values is known in advance. Options FIELDS = Options.of( ByteString.encodeUtf8( depth= ), ByteString.encodeUtf8( height= ), ByteString.encodeUtf8( width= )); Buffer buffer = new Buffer() .writeUtf8( width=640\\n ) .writeUtf8( height=480\\n ); assertEquals(2, buffer.select(FIELDS)); assertEquals(640, buffer.readDecimalLong()); assertEquals( \\n , buffer.readByte()); assertEquals(1, buffer.select(FIELDS)); assertEquals(480, buffer.readDecimalLong()); assertEquals( \\n , buffer.readByte()); (native) abstract fun select(options: ERROR CLASS ): Int","title":"select"},{"location":"2.x/okio/okio/-buffered-source/skip/","text":"okio / okio / BufferedSource / skip skip (js, jvm, native) abstract fun skip(byteCount: Long ): Unit (js) Reads and discards byteCount bytes from this source. Throws an java.io.EOFException if the source is exhausted before the requested bytes can be skipped. (jvm) Reads and discards byteCount bytes from this source. Throws an java.io.EOFException if the source is exhausted before the requested bytes can be skipped.","title":"Skip"},{"location":"2.x/okio/okio/-buffered-source/skip/#skip","text":"(js, jvm, native) abstract fun skip(byteCount: Long ): Unit (js) Reads and discards byteCount bytes from this source. Throws an java.io.EOFException if the source is exhausted before the requested bytes can be skipped. (jvm) Reads and discards byteCount bytes from this source. Throws an java.io.EOFException if the source is exhausted before the requested bytes can be skipped.","title":"skip"},{"location":"2.x/okio/okio/-byte-string/","text":"okio / okio / ByteString ByteString (js, jvm, native) open class ByteString : Comparable ByteString An immutable sequence of bytes. Byte strings compare lexicographically as a sequence of unsigned bytes. That is, the byte string ff sorts after 00 . This is counter to the sort order of the corresponding bytes, where -1 sorts before 0 . Full disclosure: this class provides untrusted input and output streams with raw access to the underlying byte array. A hostile stream implementation could keep a reference to the mutable byte string, violating the immutable guarantee of this class. For this reason a byte string s immutability guarantee cannot be relied upon for security in applets and other environments that run both trusted and untrusted code in the same process. Properties Name Summary size Returns the number of bytes in this ByteString.(js, jvm) val size: Int (native) val size: ERROR CLASS Functions Name Summary (jvm) asByteBuffer Returns a ByteBuffer view of the bytes in this ByteString . open fun asByteBuffer(): ByteBuffer base64 Returns this byte string encoded as Base64 . In violation of the RFC, the returned string does not wrap lines at 76 columns.(js, jvm) fun base64(): String (native) open fun base64(): String base64Url Returns this byte string encoded as URL-safe Base64 .(js, jvm) fun base64Url(): String (native) open fun base64Url(): String compareTo (js, jvm) open fun compareTo(other: ByteString ): Int (native) open fun compareTo(other: ByteString ): ERROR CLASS endsWith (js, jvm) fun endsWith(suffix: ByteString ): Boolean (native) fun endsWith(suffix: ByteString ): ERROR CLASS (js, jvm) fun endsWith(suffix: ByteArray ): Boolean (native) fun endsWith(suffix: ByteArray ): ERROR CLASS equals (js, jvm) open fun equals(other: Any ?): Boolean (native) open fun equals(other: Any ?): ERROR CLASS (js, jvm, native) get Returns the byte at index . operator fun get(index: Int ): Byte (jvm) getByte fun ~~getByte~~(index: Int ): Byte hashCode (js, jvm) open fun hashCode(): Int (native) open fun hashCode(): ERROR CLASS hex Returns this byte string encoded in hexadecimal.(js, jvm) fun hex(): String (native) open fun hex(): String (jvm) hmacSha1 Returns the 160-bit SHA-1 HMAC of this byte string. open fun hmacSha1(key: ByteString ): ByteString (jvm) hmacSha256 Returns the 256-bit SHA-256 HMAC of this byte string. open fun hmacSha256(key: ByteString ): ByteString (jvm) hmacSha512 Returns the 512-bit SHA-512 HMAC of this byte string. open fun hmacSha512(key: ByteString ): ByteString indexOf (js, jvm) fun indexOf(other: ByteString , fromIndex: Int = 0): Int (native) fun indexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) fun indexOf(other: ByteArray , fromIndex: Int = 0): Int (native) open fun indexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS lastIndexOf (js, jvm) fun lastIndexOf(other: ByteString , fromIndex: Int = size): Int (native) fun lastIndexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) fun lastIndexOf(other: ByteArray , fromIndex: Int = size): Int (native) open fun lastIndexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS (jvm) md5 Returns the 128-bit MD5 hash of this byte string. open fun md5(): ByteString rangeEquals Returns true if the bytes of this in [offset..offset+byteCount) equal the bytes of other in [otherOffset..otherOffset+byteCount) . Returns false if either range is out of bounds.(js, jvm) fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (js, jvm) fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean (jvm) sha1 Returns the 160-bit SHA-1 hash of this byte string. open fun sha1(): ByteString (jvm) sha256 Returns the 256-bit SHA-256 hash of this byte string. open fun sha256(): ByteString (jvm) sha512 Returns the 512-bit SHA-512 hash of this byte string. open fun sha512(): ByteString (jvm) size fun ~~size~~(): Int startsWith (js, jvm) fun startsWith(prefix: ByteString ): Boolean (native) fun startsWith(prefix: ByteString ): ERROR CLASS (js, jvm) fun startsWith(prefix: ByteArray ): Boolean (native) fun startsWith(prefix: ByteArray ): ERROR CLASS (jvm) string Constructs a new String by decoding the bytes using charset . open fun string(charset: Charset ): String substring Returns a byte string that is a substring of this byte string, beginning at the specified beginIndex and ends at the specified endIndex . Returns this byte string if beginIndex is 0 and endIndex is the length of this byte string.(js, jvm) fun substring(beginIndex: Int = 0, endIndex: Int = size): ByteString (native) open fun substring(beginIndex: Int , endIndex: Int ): ByteString toAsciiLowercase Returns a byte string equal to this byte string, but with the bytes A through Z replaced with the corresponding byte in a through z . Returns this byte string if it contains no bytes in A through Z .(js, jvm) fun toAsciiLowercase(): ByteString (native) open fun toAsciiLowercase(): ByteString toAsciiUppercase Returns a byte string equal to this byte string, but with the bytes a through z replaced with the corresponding byte in A through Z . Returns this byte string if it contains no bytes in a through z .(js, jvm) fun toAsciiUppercase(): ByteString (native) open fun toAsciiUppercase(): ByteString toByteArray Returns a byte array containing a copy of the bytes in this ByteString .(js, jvm) fun toByteArray(): ByteArray (native) open fun toByteArray(): ERROR CLASS toString Returns a human-readable string that describes the contents of this byte string. Typically this is a string like [text=Hello] or [hex=0000ffff] .(js, jvm) open fun toString(): String (native) open fun toString(): ERROR CLASS utf8 Constructs a new String by decoding the bytes as UTF-8 .(js, jvm) fun utf8(): String (native) open fun utf8(): String (jvm) write Writes the contents of this byte string to out . open fun write(out: OutputStream ): Unit Companion Object Properties Name Summary (js, jvm, native) EMPTY A singleton empty ByteString . val EMPTY: ByteString Companion Object Functions Name Summary (js, jvm, native) decodeBase64 Decodes the Base64-encoded bytes and returns their value as a byte string. Returns null if this is not a Base64-encoded sequence of bytes. fun String .decodeBase64(): ByteString ? decodeHex Decodes the hex-encoded bytes and returns their value a byte string.(js, jvm) fun String .decodeHex(): ByteString (native) fun String .decodeHex(): ERROR CLASS (jvm) encode Returns a new ByteString containing the charset -encoded bytes of this String . fun String .encode(charset: Charset = Charsets.UTF_8): ByteString (jvm) encodeString fun ~~encodeString~~(string: String , charset: Charset ): ByteString (js, jvm, native) encodeUtf8 Returns a new byte string containing the UTF-8 bytes of this String . fun String .encodeUtf8(): ByteString of (jvm) fun ~~of~~(buffer: ByteBuffer ): ByteString (jvm) fun ~~of~~(array: ByteArray , offset: Int , byteCount: Int ): ByteString Returns a new byte string containing a clone of the bytes of data .(js, jvm) fun of(vararg data: Byte ): ByteString (native) fun of(vararg data: Byte ): ERROR CLASS (jvm) read fun ~~read~~(inputstream: InputStream , byteCount: Int ): ByteString (jvm) readByteString Reads count bytes from this InputStream and returns the result. fun InputStream .readByteString(byteCount: Int ): ByteString toByteString Returns a ByteString containing a copy of this ByteBuffer .(jvm) fun ByteBuffer .toByteString(): ByteString Returns a new ByteString containing a copy of byteCount bytes of this ByteArray starting at offset .(js, jvm) fun ByteArray .toByteString(offset: Int = 0, byteCount: Int = size): ByteString (native) fun ByteArray .toByteString(offset: Int , byteCount: Int ): ByteString","title":"Home"},{"location":"2.x/okio/okio/-byte-string/#bytestring","text":"(js, jvm, native) open class ByteString : Comparable ByteString An immutable sequence of bytes. Byte strings compare lexicographically as a sequence of unsigned bytes. That is, the byte string ff sorts after 00 . This is counter to the sort order of the corresponding bytes, where -1 sorts before 0 . Full disclosure: this class provides untrusted input and output streams with raw access to the underlying byte array. A hostile stream implementation could keep a reference to the mutable byte string, violating the immutable guarantee of this class. For this reason a byte string s immutability guarantee cannot be relied upon for security in applets and other environments that run both trusted and untrusted code in the same process.","title":"ByteString"},{"location":"2.x/okio/okio/-byte-string/#properties","text":"Name Summary size Returns the number of bytes in this ByteString.(js, jvm) val size: Int (native) val size: ERROR CLASS","title":"Properties"},{"location":"2.x/okio/okio/-byte-string/#functions","text":"Name Summary (jvm) asByteBuffer Returns a ByteBuffer view of the bytes in this ByteString . open fun asByteBuffer(): ByteBuffer base64 Returns this byte string encoded as Base64 . In violation of the RFC, the returned string does not wrap lines at 76 columns.(js, jvm) fun base64(): String (native) open fun base64(): String base64Url Returns this byte string encoded as URL-safe Base64 .(js, jvm) fun base64Url(): String (native) open fun base64Url(): String compareTo (js, jvm) open fun compareTo(other: ByteString ): Int (native) open fun compareTo(other: ByteString ): ERROR CLASS endsWith (js, jvm) fun endsWith(suffix: ByteString ): Boolean (native) fun endsWith(suffix: ByteString ): ERROR CLASS (js, jvm) fun endsWith(suffix: ByteArray ): Boolean (native) fun endsWith(suffix: ByteArray ): ERROR CLASS equals (js, jvm) open fun equals(other: Any ?): Boolean (native) open fun equals(other: Any ?): ERROR CLASS (js, jvm, native) get Returns the byte at index . operator fun get(index: Int ): Byte (jvm) getByte fun ~~getByte~~(index: Int ): Byte hashCode (js, jvm) open fun hashCode(): Int (native) open fun hashCode(): ERROR CLASS hex Returns this byte string encoded in hexadecimal.(js, jvm) fun hex(): String (native) open fun hex(): String (jvm) hmacSha1 Returns the 160-bit SHA-1 HMAC of this byte string. open fun hmacSha1(key: ByteString ): ByteString (jvm) hmacSha256 Returns the 256-bit SHA-256 HMAC of this byte string. open fun hmacSha256(key: ByteString ): ByteString (jvm) hmacSha512 Returns the 512-bit SHA-512 HMAC of this byte string. open fun hmacSha512(key: ByteString ): ByteString indexOf (js, jvm) fun indexOf(other: ByteString , fromIndex: Int = 0): Int (native) fun indexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) fun indexOf(other: ByteArray , fromIndex: Int = 0): Int (native) open fun indexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS lastIndexOf (js, jvm) fun lastIndexOf(other: ByteString , fromIndex: Int = size): Int (native) fun lastIndexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) fun lastIndexOf(other: ByteArray , fromIndex: Int = size): Int (native) open fun lastIndexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS (jvm) md5 Returns the 128-bit MD5 hash of this byte string. open fun md5(): ByteString rangeEquals Returns true if the bytes of this in [offset..offset+byteCount) equal the bytes of other in [otherOffset..otherOffset+byteCount) . Returns false if either range is out of bounds.(js, jvm) fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (js, jvm) fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean (jvm) sha1 Returns the 160-bit SHA-1 hash of this byte string. open fun sha1(): ByteString (jvm) sha256 Returns the 256-bit SHA-256 hash of this byte string. open fun sha256(): ByteString (jvm) sha512 Returns the 512-bit SHA-512 hash of this byte string. open fun sha512(): ByteString (jvm) size fun ~~size~~(): Int startsWith (js, jvm) fun startsWith(prefix: ByteString ): Boolean (native) fun startsWith(prefix: ByteString ): ERROR CLASS (js, jvm) fun startsWith(prefix: ByteArray ): Boolean (native) fun startsWith(prefix: ByteArray ): ERROR CLASS (jvm) string Constructs a new String by decoding the bytes using charset . open fun string(charset: Charset ): String substring Returns a byte string that is a substring of this byte string, beginning at the specified beginIndex and ends at the specified endIndex . Returns this byte string if beginIndex is 0 and endIndex is the length of this byte string.(js, jvm) fun substring(beginIndex: Int = 0, endIndex: Int = size): ByteString (native) open fun substring(beginIndex: Int , endIndex: Int ): ByteString toAsciiLowercase Returns a byte string equal to this byte string, but with the bytes A through Z replaced with the corresponding byte in a through z . Returns this byte string if it contains no bytes in A through Z .(js, jvm) fun toAsciiLowercase(): ByteString (native) open fun toAsciiLowercase(): ByteString toAsciiUppercase Returns a byte string equal to this byte string, but with the bytes a through z replaced with the corresponding byte in A through Z . Returns this byte string if it contains no bytes in a through z .(js, jvm) fun toAsciiUppercase(): ByteString (native) open fun toAsciiUppercase(): ByteString toByteArray Returns a byte array containing a copy of the bytes in this ByteString .(js, jvm) fun toByteArray(): ByteArray (native) open fun toByteArray(): ERROR CLASS toString Returns a human-readable string that describes the contents of this byte string. Typically this is a string like [text=Hello] or [hex=0000ffff] .(js, jvm) open fun toString(): String (native) open fun toString(): ERROR CLASS utf8 Constructs a new String by decoding the bytes as UTF-8 .(js, jvm) fun utf8(): String (native) open fun utf8(): String (jvm) write Writes the contents of this byte string to out . open fun write(out: OutputStream ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-byte-string/#companion-object-properties","text":"Name Summary (js, jvm, native) EMPTY A singleton empty ByteString . val EMPTY: ByteString","title":"Companion Object Properties"},{"location":"2.x/okio/okio/-byte-string/#companion-object-functions","text":"Name Summary (js, jvm, native) decodeBase64 Decodes the Base64-encoded bytes and returns their value as a byte string. Returns null if this is not a Base64-encoded sequence of bytes. fun String .decodeBase64(): ByteString ? decodeHex Decodes the hex-encoded bytes and returns their value a byte string.(js, jvm) fun String .decodeHex(): ByteString (native) fun String .decodeHex(): ERROR CLASS (jvm) encode Returns a new ByteString containing the charset -encoded bytes of this String . fun String .encode(charset: Charset = Charsets.UTF_8): ByteString (jvm) encodeString fun ~~encodeString~~(string: String , charset: Charset ): ByteString (js, jvm, native) encodeUtf8 Returns a new byte string containing the UTF-8 bytes of this String . fun String .encodeUtf8(): ByteString of (jvm) fun ~~of~~(buffer: ByteBuffer ): ByteString (jvm) fun ~~of~~(array: ByteArray , offset: Int , byteCount: Int ): ByteString Returns a new byte string containing a clone of the bytes of data .(js, jvm) fun of(vararg data: Byte ): ByteString (native) fun of(vararg data: Byte ): ERROR CLASS (jvm) read fun ~~read~~(inputstream: InputStream , byteCount: Int ): ByteString (jvm) readByteString Reads count bytes from this InputStream and returns the result. fun InputStream .readByteString(byteCount: Int ): ByteString toByteString Returns a ByteString containing a copy of this ByteBuffer .(jvm) fun ByteBuffer .toByteString(): ByteString Returns a new ByteString containing a copy of byteCount bytes of this ByteArray starting at offset .(js, jvm) fun ByteArray .toByteString(offset: Int = 0, byteCount: Int = size): ByteString (native) fun ByteArray .toByteString(offset: Int , byteCount: Int ): ByteString","title":"Companion Object Functions"},{"location":"2.x/okio/okio/-byte-string/-e-m-p-t-y/","text":"okio / okio / ByteString / EMPTY EMPTY (js, jvm, native) val EMPTY: ByteString A singleton empty ByteString .","title":" e m p t y"},{"location":"2.x/okio/okio/-byte-string/-e-m-p-t-y/#empty","text":"(js, jvm, native) val EMPTY: ByteString A singleton empty ByteString .","title":"EMPTY"},{"location":"2.x/okio/okio/-byte-string/as-byte-buffer/","text":"okio / okio / ByteString / asByteBuffer asByteBuffer (jvm) open fun asByteBuffer(): ByteBuffer Returns a ByteBuffer view of the bytes in this ByteString .","title":"As byte buffer"},{"location":"2.x/okio/okio/-byte-string/as-byte-buffer/#asbytebuffer","text":"(jvm) open fun asByteBuffer(): ByteBuffer Returns a ByteBuffer view of the bytes in this ByteString .","title":"asByteBuffer"},{"location":"2.x/okio/okio/-byte-string/base64-url/","text":"okio / okio / ByteString / base64Url base64Url (js, jvm) fun base64Url(): String (native) open fun base64Url(): String Returns this byte string encoded as URL-safe Base64 .","title":"Base64 url"},{"location":"2.x/okio/okio/-byte-string/base64-url/#base64url","text":"(js, jvm) fun base64Url(): String (native) open fun base64Url(): String Returns this byte string encoded as URL-safe Base64 .","title":"base64Url"},{"location":"2.x/okio/okio/-byte-string/base64/","text":"okio / okio / ByteString / base64 base64 (js, jvm) fun base64(): String (native) open fun base64(): String Returns this byte string encoded as Base64 . In violation of the RFC, the returned string does not wrap lines at 76 columns.","title":"Base64"},{"location":"2.x/okio/okio/-byte-string/base64/#base64","text":"(js, jvm) fun base64(): String (native) open fun base64(): String Returns this byte string encoded as Base64 . In violation of the RFC, the returned string does not wrap lines at 76 columns.","title":"base64"},{"location":"2.x/okio/okio/-byte-string/compare-to/","text":"okio / okio / ByteString / compareTo compareTo (js, jvm) open fun compareTo(other: ByteString ): Int (native) open fun compareTo(other: ByteString ): ERROR CLASS","title":"Compare to"},{"location":"2.x/okio/okio/-byte-string/compare-to/#compareto","text":"(js, jvm) open fun compareTo(other: ByteString ): Int (native) open fun compareTo(other: ByteString ): ERROR CLASS","title":"compareTo"},{"location":"2.x/okio/okio/-byte-string/decode-base64/","text":"okio / okio / ByteString / decodeBase64 decodeBase64 (js, jvm) @JvmStatic fun String .decodeBase64(): ByteString ? (native) fun String .decodeBase64(): ByteString ? Decodes the Base64-encoded bytes and returns their value as a byte string. Returns null if this is not a Base64-encoded sequence of bytes.","title":"Decode base64"},{"location":"2.x/okio/okio/-byte-string/decode-base64/#decodebase64","text":"(js, jvm) @JvmStatic fun String .decodeBase64(): ByteString ? (native) fun String .decodeBase64(): ByteString ? Decodes the Base64-encoded bytes and returns their value as a byte string. Returns null if this is not a Base64-encoded sequence of bytes.","title":"decodeBase64"},{"location":"2.x/okio/okio/-byte-string/decode-hex/","text":"okio / okio / ByteString / decodeHex decodeHex (js, jvm) @JvmStatic fun String .decodeHex(): ByteString (native) fun String .decodeHex(): ERROR CLASS Decodes the hex-encoded bytes and returns their value a byte string.","title":"Decode hex"},{"location":"2.x/okio/okio/-byte-string/decode-hex/#decodehex","text":"(js, jvm) @JvmStatic fun String .decodeHex(): ByteString (native) fun String .decodeHex(): ERROR CLASS Decodes the hex-encoded bytes and returns their value a byte string.","title":"decodeHex"},{"location":"2.x/okio/okio/-byte-string/encode-string/","text":"okio / okio / ByteString / encodeString encodeString (jvm) @JvmName(\"-deprecated_encodeString\") fun ~~encodeString~~(string: String , charset: Charset ): ByteString Deprecated: moved to extension function","title":"Encode string"},{"location":"2.x/okio/okio/-byte-string/encode-string/#encodestring","text":"(jvm) @JvmName(\"-deprecated_encodeString\") fun ~~encodeString~~(string: String , charset: Charset ): ByteString Deprecated: moved to extension function","title":"encodeString"},{"location":"2.x/okio/okio/-byte-string/encode-utf8/","text":"okio / okio / ByteString / encodeUtf8 encodeUtf8 (js, jvm) @JvmStatic fun String .encodeUtf8(): ByteString (native) fun String .encodeUtf8(): ByteString Returns a new byte string containing the UTF-8 bytes of this String .","title":"Encode utf8"},{"location":"2.x/okio/okio/-byte-string/encode-utf8/#encodeutf8","text":"(js, jvm) @JvmStatic fun String .encodeUtf8(): ByteString (native) fun String .encodeUtf8(): ByteString Returns a new byte string containing the UTF-8 bytes of this String .","title":"encodeUtf8"},{"location":"2.x/okio/okio/-byte-string/encode/","text":"okio / okio / ByteString / encode encode (jvm) @JvmStatic @JvmName(\"encodeString\") fun String .encode(charset: Charset = Charsets.UTF_8): ByteString Returns a new ByteString containing the charset -encoded bytes of this String .","title":"Encode"},{"location":"2.x/okio/okio/-byte-string/encode/#encode","text":"(jvm) @JvmStatic @JvmName(\"encodeString\") fun String .encode(charset: Charset = Charsets.UTF_8): ByteString Returns a new ByteString containing the charset -encoded bytes of this String .","title":"encode"},{"location":"2.x/okio/okio/-byte-string/ends-with/","text":"okio / okio / ByteString / endsWith endsWith (js, jvm) fun endsWith(suffix: ByteString ): Boolean (native) fun endsWith(suffix: ByteString ): ERROR CLASS (js, jvm) fun endsWith(suffix: ByteArray ): Boolean (native) fun endsWith(suffix: ByteArray ): ERROR CLASS","title":"Ends with"},{"location":"2.x/okio/okio/-byte-string/ends-with/#endswith","text":"(js, jvm) fun endsWith(suffix: ByteString ): Boolean (native) fun endsWith(suffix: ByteString ): ERROR CLASS (js, jvm) fun endsWith(suffix: ByteArray ): Boolean (native) fun endsWith(suffix: ByteArray ): ERROR CLASS","title":"endsWith"},{"location":"2.x/okio/okio/-byte-string/equals/","text":"okio / okio / ByteString / equals equals (js, jvm) open fun equals(other: Any ?): Boolean (native) open fun equals(other: Any ?): ERROR CLASS","title":"Equals"},{"location":"2.x/okio/okio/-byte-string/equals/#equals","text":"(js, jvm) open fun equals(other: Any ?): Boolean (native) open fun equals(other: Any ?): ERROR CLASS","title":"equals"},{"location":"2.x/okio/okio/-byte-string/get-byte/","text":"okio / okio / ByteString / getByte getByte (jvm) @JvmName(\"-deprecated_getByte\") fun ~~getByte~~(index: Int ): Byte Deprecated: moved to operator function","title":"Get byte"},{"location":"2.x/okio/okio/-byte-string/get-byte/#getbyte","text":"(jvm) @JvmName(\"-deprecated_getByte\") fun ~~getByte~~(index: Int ): Byte Deprecated: moved to operator function","title":"getByte"},{"location":"2.x/okio/okio/-byte-string/get/","text":"okio / okio / ByteString / get get (js, jvm) @JvmName(\"getByte\") operator fun get(index: Int ): Byte (native) operator fun get(index: Int ): Byte Returns the byte at index .","title":"Get"},{"location":"2.x/okio/okio/-byte-string/get/#get","text":"(js, jvm) @JvmName(\"getByte\") operator fun get(index: Int ): Byte (native) operator fun get(index: Int ): Byte Returns the byte at index .","title":"get"},{"location":"2.x/okio/okio/-byte-string/hash-code/","text":"okio / okio / ByteString / hashCode hashCode (js, jvm) open fun hashCode(): Int (native) open fun hashCode(): ERROR CLASS","title":"Hash code"},{"location":"2.x/okio/okio/-byte-string/hash-code/#hashcode","text":"(js, jvm) open fun hashCode(): Int (native) open fun hashCode(): ERROR CLASS","title":"hashCode"},{"location":"2.x/okio/okio/-byte-string/hex/","text":"okio / okio / ByteString / hex hex (js, jvm) fun hex(): String (native) open fun hex(): String Returns this byte string encoded in hexadecimal.","title":"Hex"},{"location":"2.x/okio/okio/-byte-string/hex/#hex","text":"(js, jvm) fun hex(): String (native) open fun hex(): String Returns this byte string encoded in hexadecimal.","title":"hex"},{"location":"2.x/okio/okio/-byte-string/hmac-sha1/","text":"okio / okio / ByteString / hmacSha1 hmacSha1 (jvm) open fun hmacSha1(key: ByteString ): ByteString Returns the 160-bit SHA-1 HMAC of this byte string.","title":"Hmac sha1"},{"location":"2.x/okio/okio/-byte-string/hmac-sha1/#hmacsha1","text":"(jvm) open fun hmacSha1(key: ByteString ): ByteString Returns the 160-bit SHA-1 HMAC of this byte string.","title":"hmacSha1"},{"location":"2.x/okio/okio/-byte-string/hmac-sha256/","text":"okio / okio / ByteString / hmacSha256 hmacSha256 (jvm) open fun hmacSha256(key: ByteString ): ByteString Returns the 256-bit SHA-256 HMAC of this byte string.","title":"Hmac sha256"},{"location":"2.x/okio/okio/-byte-string/hmac-sha256/#hmacsha256","text":"(jvm) open fun hmacSha256(key: ByteString ): ByteString Returns the 256-bit SHA-256 HMAC of this byte string.","title":"hmacSha256"},{"location":"2.x/okio/okio/-byte-string/hmac-sha512/","text":"okio / okio / ByteString / hmacSha512 hmacSha512 (jvm) open fun hmacSha512(key: ByteString ): ByteString Returns the 512-bit SHA-512 HMAC of this byte string.","title":"Hmac sha512"},{"location":"2.x/okio/okio/-byte-string/hmac-sha512/#hmacsha512","text":"(jvm) open fun hmacSha512(key: ByteString ): ByteString Returns the 512-bit SHA-512 HMAC of this byte string.","title":"hmacSha512"},{"location":"2.x/okio/okio/-byte-string/index-of/","text":"okio / okio / ByteString / indexOf indexOf (js, jvm) @JvmOverloads fun indexOf(other: ByteString , fromIndex: Int = 0): Int (native) fun indexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) @JvmOverloads fun indexOf(other: ByteArray , fromIndex: Int = 0): Int (native) open fun indexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS","title":"Index of"},{"location":"2.x/okio/okio/-byte-string/index-of/#indexof","text":"(js, jvm) @JvmOverloads fun indexOf(other: ByteString , fromIndex: Int = 0): Int (native) fun indexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) @JvmOverloads fun indexOf(other: ByteArray , fromIndex: Int = 0): Int (native) open fun indexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS","title":"indexOf"},{"location":"2.x/okio/okio/-byte-string/last-index-of/","text":"okio / okio / ByteString / lastIndexOf lastIndexOf (js, jvm) fun lastIndexOf(other: ByteString , fromIndex: Int = size): Int (native) fun lastIndexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) fun lastIndexOf(other: ByteArray , fromIndex: Int = size): Int (native) open fun lastIndexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS","title":"Last index of"},{"location":"2.x/okio/okio/-byte-string/last-index-of/#lastindexof","text":"(js, jvm) fun lastIndexOf(other: ByteString , fromIndex: Int = size): Int (native) fun lastIndexOf(other: ByteString , fromIndex: Int ): ERROR CLASS (js, jvm) fun lastIndexOf(other: ByteArray , fromIndex: Int = size): Int (native) open fun lastIndexOf(other: ByteArray , fromIndex: Int ): ERROR CLASS","title":"lastIndexOf"},{"location":"2.x/okio/okio/-byte-string/md5/","text":"okio / okio / ByteString / md5 md5 (jvm) open fun md5(): ByteString Returns the 128-bit MD5 hash of this byte string.","title":"Md5"},{"location":"2.x/okio/okio/-byte-string/md5/#md5","text":"(jvm) open fun md5(): ByteString Returns the 128-bit MD5 hash of this byte string.","title":"md5"},{"location":"2.x/okio/okio/-byte-string/of/","text":"okio / okio / ByteString / of of (js, jvm) @JvmStatic fun of(vararg data: Byte ): ByteString (native) fun of(vararg data: Byte ): ERROR CLASS Returns a new byte string containing a clone of the bytes of data . (jvm) @JvmName(\"-deprecated_of\") fun ~~of~~(buffer: ByteBuffer ): ByteString Deprecated: moved to extension function @JvmName(\"-deprecated_of\") fun ~~of~~(array: ByteArray , offset: Int , byteCount: Int ): ByteString Deprecated: moved to extension function","title":"Of"},{"location":"2.x/okio/okio/-byte-string/of/#of","text":"(js, jvm) @JvmStatic fun of(vararg data: Byte ): ByteString (native) fun of(vararg data: Byte ): ERROR CLASS Returns a new byte string containing a clone of the bytes of data . (jvm) @JvmName(\"-deprecated_of\") fun ~~of~~(buffer: ByteBuffer ): ByteString Deprecated: moved to extension function @JvmName(\"-deprecated_of\") fun ~~of~~(array: ByteArray , offset: Int , byteCount: Int ): ByteString Deprecated: moved to extension function","title":"of"},{"location":"2.x/okio/okio/-byte-string/range-equals/","text":"okio / okio / ByteString / rangeEquals rangeEquals (js, jvm) fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (js, jvm) fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean Returns true if the bytes of this in [offset..offset+byteCount) equal the bytes of other in [otherOffset..otherOffset+byteCount) . Returns false if either range is out of bounds.","title":"Range equals"},{"location":"2.x/okio/okio/-byte-string/range-equals/#rangeequals","text":"(js, jvm) fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteString , otherOffset: Int , byteCount: Int ): Boolean (js, jvm) fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean (native) open fun rangeEquals(offset: Int , other: ByteArray , otherOffset: Int , byteCount: Int ): Boolean Returns true if the bytes of this in [offset..offset+byteCount) equal the bytes of other in [otherOffset..otherOffset+byteCount) . Returns false if either range is out of bounds.","title":"rangeEquals"},{"location":"2.x/okio/okio/-byte-string/read-byte-string/","text":"okio / okio / ByteString / readByteString readByteString (jvm) @JvmStatic @JvmName(\"read\") fun InputStream .readByteString(byteCount: Int ): ByteString Reads count bytes from this InputStream and returns the result. Exceptions java.io.EOFException - if in has fewer than count bytes to read.","title":"Read byte string"},{"location":"2.x/okio/okio/-byte-string/read-byte-string/#readbytestring","text":"(jvm) @JvmStatic @JvmName(\"read\") fun InputStream .readByteString(byteCount: Int ): ByteString Reads count bytes from this InputStream and returns the result.","title":"readByteString"},{"location":"2.x/okio/okio/-byte-string/read-byte-string/#exceptions","text":"java.io.EOFException - if in has fewer than count bytes to read.","title":"Exceptions"},{"location":"2.x/okio/okio/-byte-string/read/","text":"okio / okio / ByteString / read read (jvm) @JvmName(\"-deprecated_read\") fun ~~read~~(inputstream: InputStream , byteCount: Int ): ByteString Deprecated: moved to extension function","title":"Read"},{"location":"2.x/okio/okio/-byte-string/read/#read","text":"(jvm) @JvmName(\"-deprecated_read\") fun ~~read~~(inputstream: InputStream , byteCount: Int ): ByteString Deprecated: moved to extension function","title":"read"},{"location":"2.x/okio/okio/-byte-string/sha1/","text":"okio / okio / ByteString / sha1 sha1 (jvm) open fun sha1(): ByteString Returns the 160-bit SHA-1 hash of this byte string.","title":"Sha1"},{"location":"2.x/okio/okio/-byte-string/sha1/#sha1","text":"(jvm) open fun sha1(): ByteString Returns the 160-bit SHA-1 hash of this byte string.","title":"sha1"},{"location":"2.x/okio/okio/-byte-string/sha256/","text":"okio / okio / ByteString / sha256 sha256 (jvm) open fun sha256(): ByteString Returns the 256-bit SHA-256 hash of this byte string.","title":"Sha256"},{"location":"2.x/okio/okio/-byte-string/sha256/#sha256","text":"(jvm) open fun sha256(): ByteString Returns the 256-bit SHA-256 hash of this byte string.","title":"sha256"},{"location":"2.x/okio/okio/-byte-string/sha512/","text":"okio / okio / ByteString / sha512 sha512 (jvm) open fun sha512(): ByteString Returns the 512-bit SHA-512 hash of this byte string.","title":"Sha512"},{"location":"2.x/okio/okio/-byte-string/sha512/#sha512","text":"(jvm) open fun sha512(): ByteString Returns the 512-bit SHA-512 hash of this byte string.","title":"sha512"},{"location":"2.x/okio/okio/-byte-string/size/","text":"okio / okio / ByteString / size size (js, jvm) val size: Int (native) val size: ERROR CLASS Returns the number of bytes in this ByteString. (jvm) @JvmName(\"-deprecated_size\") fun ~~size~~(): Int Deprecated: moved to val","title":"Size"},{"location":"2.x/okio/okio/-byte-string/size/#size","text":"(js, jvm) val size: Int (native) val size: ERROR CLASS Returns the number of bytes in this ByteString. (jvm) @JvmName(\"-deprecated_size\") fun ~~size~~(): Int Deprecated: moved to val","title":"size"},{"location":"2.x/okio/okio/-byte-string/starts-with/","text":"okio / okio / ByteString / startsWith startsWith (js, jvm) fun startsWith(prefix: ByteString ): Boolean (native) fun startsWith(prefix: ByteString ): ERROR CLASS (js, jvm) fun startsWith(prefix: ByteArray ): Boolean (native) fun startsWith(prefix: ByteArray ): ERROR CLASS","title":"Starts with"},{"location":"2.x/okio/okio/-byte-string/starts-with/#startswith","text":"(js, jvm) fun startsWith(prefix: ByteString ): Boolean (native) fun startsWith(prefix: ByteString ): ERROR CLASS (js, jvm) fun startsWith(prefix: ByteArray ): Boolean (native) fun startsWith(prefix: ByteArray ): ERROR CLASS","title":"startsWith"},{"location":"2.x/okio/okio/-byte-string/string/","text":"okio / okio / ByteString / string string (jvm) open fun string(charset: Charset ): String Constructs a new String by decoding the bytes using charset .","title":"String"},{"location":"2.x/okio/okio/-byte-string/string/#string","text":"(jvm) open fun string(charset: Charset ): String Constructs a new String by decoding the bytes using charset .","title":"string"},{"location":"2.x/okio/okio/-byte-string/substring/","text":"okio / okio / ByteString / substring substring (js, jvm) fun substring(beginIndex: Int = 0, endIndex: Int = size): ByteString (native) open fun substring(beginIndex: Int , endIndex: Int ): ByteString Returns a byte string that is a substring of this byte string, beginning at the specified beginIndex and ends at the specified endIndex . Returns this byte string if beginIndex is 0 and endIndex is the length of this byte string.","title":"Substring"},{"location":"2.x/okio/okio/-byte-string/substring/#substring","text":"(js, jvm) fun substring(beginIndex: Int = 0, endIndex: Int = size): ByteString (native) open fun substring(beginIndex: Int , endIndex: Int ): ByteString Returns a byte string that is a substring of this byte string, beginning at the specified beginIndex and ends at the specified endIndex . Returns this byte string if beginIndex is 0 and endIndex is the length of this byte string.","title":"substring"},{"location":"2.x/okio/okio/-byte-string/to-ascii-lowercase/","text":"okio / okio / ByteString / toAsciiLowercase toAsciiLowercase (js, jvm) fun toAsciiLowercase(): ByteString (native) open fun toAsciiLowercase(): ByteString Returns a byte string equal to this byte string, but with the bytes A through Z replaced with the corresponding byte in a through z . Returns this byte string if it contains no bytes in A through Z .","title":"To ascii lowercase"},{"location":"2.x/okio/okio/-byte-string/to-ascii-lowercase/#toasciilowercase","text":"(js, jvm) fun toAsciiLowercase(): ByteString (native) open fun toAsciiLowercase(): ByteString Returns a byte string equal to this byte string, but with the bytes A through Z replaced with the corresponding byte in a through z . Returns this byte string if it contains no bytes in A through Z .","title":"toAsciiLowercase"},{"location":"2.x/okio/okio/-byte-string/to-ascii-uppercase/","text":"okio / okio / ByteString / toAsciiUppercase toAsciiUppercase (js, jvm) fun toAsciiUppercase(): ByteString (native) open fun toAsciiUppercase(): ByteString Returns a byte string equal to this byte string, but with the bytes a through z replaced with the corresponding byte in A through Z . Returns this byte string if it contains no bytes in a through z .","title":"To ascii uppercase"},{"location":"2.x/okio/okio/-byte-string/to-ascii-uppercase/#toasciiuppercase","text":"(js, jvm) fun toAsciiUppercase(): ByteString (native) open fun toAsciiUppercase(): ByteString Returns a byte string equal to this byte string, but with the bytes a through z replaced with the corresponding byte in A through Z . Returns this byte string if it contains no bytes in a through z .","title":"toAsciiUppercase"},{"location":"2.x/okio/okio/-byte-string/to-byte-array/","text":"okio / okio / ByteString / toByteArray toByteArray (js, jvm) fun toByteArray(): ByteArray (native) open fun toByteArray(): ERROR CLASS Returns a byte array containing a copy of the bytes in this ByteString .","title":"To byte array"},{"location":"2.x/okio/okio/-byte-string/to-byte-array/#tobytearray","text":"(js, jvm) fun toByteArray(): ByteArray (native) open fun toByteArray(): ERROR CLASS Returns a byte array containing a copy of the bytes in this ByteString .","title":"toByteArray"},{"location":"2.x/okio/okio/-byte-string/to-byte-string/","text":"okio / okio / ByteString / toByteString toByteString (js, jvm) @JvmStatic fun ByteArray .toByteString(offset: Int = 0, byteCount: Int = size): ByteString (native) fun ByteArray .toByteString(offset: Int , byteCount: Int ): ByteString Returns a new ByteString containing a copy of byteCount bytes of this ByteArray starting at offset . (jvm) @JvmStatic @JvmName(\"of\") fun ByteBuffer .toByteString(): ByteString Returns a ByteString containing a copy of this ByteBuffer .","title":"To byte string"},{"location":"2.x/okio/okio/-byte-string/to-byte-string/#tobytestring","text":"(js, jvm) @JvmStatic fun ByteArray .toByteString(offset: Int = 0, byteCount: Int = size): ByteString (native) fun ByteArray .toByteString(offset: Int , byteCount: Int ): ByteString Returns a new ByteString containing a copy of byteCount bytes of this ByteArray starting at offset . (jvm) @JvmStatic @JvmName(\"of\") fun ByteBuffer .toByteString(): ByteString Returns a ByteString containing a copy of this ByteBuffer .","title":"toByteString"},{"location":"2.x/okio/okio/-byte-string/to-string/","text":"okio / okio / ByteString / toString toString (js, jvm) open fun toString(): String (native) open fun toString(): ERROR CLASS Returns a human-readable string that describes the contents of this byte string. Typically this is a string like [text=Hello] or [hex=0000ffff] .","title":"To string"},{"location":"2.x/okio/okio/-byte-string/to-string/#tostring","text":"(js, jvm) open fun toString(): String (native) open fun toString(): ERROR CLASS Returns a human-readable string that describes the contents of this byte string. Typically this is a string like [text=Hello] or [hex=0000ffff] .","title":"toString"},{"location":"2.x/okio/okio/-byte-string/utf8/","text":"okio / okio / ByteString / utf8 utf8 (js, jvm) fun utf8(): String (native) open fun utf8(): String Constructs a new String by decoding the bytes as UTF-8 .","title":"Utf8"},{"location":"2.x/okio/okio/-byte-string/utf8/#utf8","text":"(js, jvm) fun utf8(): String (native) open fun utf8(): String Constructs a new String by decoding the bytes as UTF-8 .","title":"utf8"},{"location":"2.x/okio/okio/-byte-string/write/","text":"okio / okio / ByteString / write write (jvm) open fun write(out: OutputStream ): Unit Writes the contents of this byte string to out .","title":"Write"},{"location":"2.x/okio/okio/-byte-string/write/#write","text":"(jvm) open fun write(out: OutputStream ): Unit Writes the contents of this byte string to out .","title":"write"},{"location":"2.x/okio/okio/-deflater-sink/","text":"okio / okio / DeflaterSink DeflaterSink (jvm) class DeflaterSink : Sink A sink that uses DEFLATE to compress data written to another source. Sync flush Aggressive flushing of this stream may result in reduced compression. Each call to flush immediately compresses all currently-buffered data; this early compression may be less effective than compression performed without flushing. This is equivalent to using Deflater with the sync flush option. This class does not offer any partial flush mechanism. For best performance, only call flush when application behavior requires it. Constructors Name Summary (jvm) init DeflaterSink(sink: Sink , deflater: Deflater ) Functions Name Summary (jvm) close fun close(): Unit (jvm) flush fun flush(): Unit (jvm) timeout fun timeout(): Timeout (jvm) toString fun toString(): String (jvm) write fun write(source: Buffer , byteCount: Long ): Unit Extension Functions Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Home"},{"location":"2.x/okio/okio/-deflater-sink/#deflatersink","text":"(jvm) class DeflaterSink : Sink A sink that uses DEFLATE to compress data written to another source.","title":"DeflaterSink"},{"location":"2.x/okio/okio/-deflater-sink/#sync-flush","text":"Aggressive flushing of this stream may result in reduced compression. Each call to flush immediately compresses all currently-buffered data; this early compression may be less effective than compression performed without flushing. This is equivalent to using Deflater with the sync flush option. This class does not offer any partial flush mechanism. For best performance, only call flush when application behavior requires it.","title":"Sync flush"},{"location":"2.x/okio/okio/-deflater-sink/#constructors","text":"Name Summary (jvm) init DeflaterSink(sink: Sink , deflater: Deflater )","title":"Constructors"},{"location":"2.x/okio/okio/-deflater-sink/#functions","text":"Name Summary (jvm) close fun close(): Unit (jvm) flush fun flush(): Unit (jvm) timeout fun timeout(): Timeout (jvm) toString fun toString(): String (jvm) write fun write(source: Buffer , byteCount: Long ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-deflater-sink/#extension-functions","text":"Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Extension Functions"},{"location":"2.x/okio/okio/-deflater-sink/-init-/","text":"okio / okio / DeflaterSink / init init (jvm) DeflaterSink(sink: Sink , deflater: Deflater )","title":" init "},{"location":"2.x/okio/okio/-deflater-sink/-init-/#init","text":"(jvm) DeflaterSink(sink: Sink , deflater: Deflater )","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-deflater-sink/close/","text":"okio / okio / DeflaterSink / close close (jvm) fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-deflater-sink/close/#close","text":"(jvm) fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-deflater-sink/flush/","text":"okio / okio / DeflaterSink / flush flush (jvm) fun flush(): Unit","title":"Flush"},{"location":"2.x/okio/okio/-deflater-sink/flush/#flush","text":"(jvm) fun flush(): Unit","title":"flush"},{"location":"2.x/okio/okio/-deflater-sink/timeout/","text":"okio / okio / DeflaterSink / timeout timeout (jvm) fun timeout(): Timeout","title":"Timeout"},{"location":"2.x/okio/okio/-deflater-sink/timeout/#timeout","text":"(jvm) fun timeout(): Timeout","title":"timeout"},{"location":"2.x/okio/okio/-deflater-sink/to-string/","text":"okio / okio / DeflaterSink / toString toString (jvm) fun toString(): String","title":"To string"},{"location":"2.x/okio/okio/-deflater-sink/to-string/#tostring","text":"(jvm) fun toString(): String","title":"toString"},{"location":"2.x/okio/okio/-deflater-sink/write/","text":"okio / okio / DeflaterSink / write write (jvm) fun write(source: Buffer , byteCount: Long ): Unit","title":"Write"},{"location":"2.x/okio/okio/-deflater-sink/write/#write","text":"(jvm) fun write(source: Buffer , byteCount: Long ): Unit","title":"write"},{"location":"2.x/okio/okio/-e-o-f-exception/","text":"okio / okio / EOFException EOFException (js, jvm, native) open class EOFException : IOException Constructors Name Summary init (js, jvm) init (message: String ? = null) (native) init (message: String ?)","title":"Home"},{"location":"2.x/okio/okio/-e-o-f-exception/#eofexception","text":"(js, jvm, native) open class EOFException : IOException","title":"EOFException"},{"location":"2.x/okio/okio/-e-o-f-exception/#constructors","text":"Name Summary init (js, jvm) init (message: String ? = null) (native) init (message: String ?)","title":"Constructors"},{"location":"2.x/okio/okio/-e-o-f-exception/-init-/","text":"okio / okio / EOFException / init init (js, jvm) init (message: String ? = null) (native) init (message: String ?)","title":" init "},{"location":"2.x/okio/okio/-e-o-f-exception/-init-/#init","text":"(js, jvm) init (message: String ? = null) (native) init (message: String ?)","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-forwarding-sink/","text":"okio / okio / ForwardingSink ForwardingSink (jvm) abstract class ForwardingSink : Sink A Sink which forwards calls to another. Useful for subclassing. Constructors Name Summary (jvm) init A Sink which forwards calls to another. Useful for subclassing. ForwardingSink(delegate: Sink ) Properties Name Summary (jvm) delegate Sink to which this instance is delegating. val delegate: Sink Functions Name Summary (jvm) close open fun close(): Unit (jvm) delegate fun ~~delegate~~(): Sink (jvm) flush open fun flush(): Unit (jvm) timeout open fun timeout(): Timeout (jvm) toString open fun toString(): String (jvm) write open fun write(source: Buffer , byteCount: Long ): Unit Extension Functions Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink Inheritors Name Summary (jvm) HashingSink A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. class HashingSink : ForwardingSink","title":"Home"},{"location":"2.x/okio/okio/-forwarding-sink/#forwardingsink","text":"(jvm) abstract class ForwardingSink : Sink A Sink which forwards calls to another. Useful for subclassing.","title":"ForwardingSink"},{"location":"2.x/okio/okio/-forwarding-sink/#constructors","text":"Name Summary (jvm) init A Sink which forwards calls to another. Useful for subclassing. ForwardingSink(delegate: Sink )","title":"Constructors"},{"location":"2.x/okio/okio/-forwarding-sink/#properties","text":"Name Summary (jvm) delegate Sink to which this instance is delegating. val delegate: Sink","title":"Properties"},{"location":"2.x/okio/okio/-forwarding-sink/#functions","text":"Name Summary (jvm) close open fun close(): Unit (jvm) delegate fun ~~delegate~~(): Sink (jvm) flush open fun flush(): Unit (jvm) timeout open fun timeout(): Timeout (jvm) toString open fun toString(): String (jvm) write open fun write(source: Buffer , byteCount: Long ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-forwarding-sink/#extension-functions","text":"Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Extension Functions"},{"location":"2.x/okio/okio/-forwarding-sink/#inheritors","text":"Name Summary (jvm) HashingSink A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. class HashingSink : ForwardingSink","title":"Inheritors"},{"location":"2.x/okio/okio/-forwarding-sink/-init-/","text":"okio / okio / ForwardingSink / init init (jvm) ForwardingSink(delegate: Sink ) A Sink which forwards calls to another. Useful for subclassing.","title":" init "},{"location":"2.x/okio/okio/-forwarding-sink/-init-/#init","text":"(jvm) ForwardingSink(delegate: Sink ) A Sink which forwards calls to another. Useful for subclassing.","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-forwarding-sink/close/","text":"okio / okio / ForwardingSink / close close (jvm) open fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-forwarding-sink/close/#close","text":"(jvm) open fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-forwarding-sink/delegate/","text":"okio / okio / ForwardingSink / delegate delegate (jvm) @JvmName(\"-deprecated_delegate\") fun ~~delegate~~(): Sink Deprecated: moved to val (jvm) val delegate: Sink Sink to which this instance is delegating.","title":"Delegate"},{"location":"2.x/okio/okio/-forwarding-sink/delegate/#delegate","text":"(jvm) @JvmName(\"-deprecated_delegate\") fun ~~delegate~~(): Sink Deprecated: moved to val (jvm) val delegate: Sink Sink to which this instance is delegating.","title":"delegate"},{"location":"2.x/okio/okio/-forwarding-sink/flush/","text":"okio / okio / ForwardingSink / flush flush (jvm) open fun flush(): Unit","title":"Flush"},{"location":"2.x/okio/okio/-forwarding-sink/flush/#flush","text":"(jvm) open fun flush(): Unit","title":"flush"},{"location":"2.x/okio/okio/-forwarding-sink/timeout/","text":"okio / okio / ForwardingSink / timeout timeout (jvm) open fun timeout(): Timeout","title":"Timeout"},{"location":"2.x/okio/okio/-forwarding-sink/timeout/#timeout","text":"(jvm) open fun timeout(): Timeout","title":"timeout"},{"location":"2.x/okio/okio/-forwarding-sink/to-string/","text":"okio / okio / ForwardingSink / toString toString (jvm) open fun toString(): String","title":"To string"},{"location":"2.x/okio/okio/-forwarding-sink/to-string/#tostring","text":"(jvm) open fun toString(): String","title":"toString"},{"location":"2.x/okio/okio/-forwarding-sink/write/","text":"okio / okio / ForwardingSink / write write (jvm) open fun write(source: Buffer , byteCount: Long ): Unit","title":"Write"},{"location":"2.x/okio/okio/-forwarding-sink/write/#write","text":"(jvm) open fun write(source: Buffer , byteCount: Long ): Unit","title":"write"},{"location":"2.x/okio/okio/-forwarding-source/","text":"okio / okio / ForwardingSource ForwardingSource (jvm) abstract class ForwardingSource : Source A Source which forwards calls to another. Useful for subclassing. Constructors Name Summary (jvm) init A Source which forwards calls to another. Useful for subclassing. ForwardingSource(delegate: Source ) Properties Name Summary (jvm) delegate Source to which this instance is delegating. val delegate: Source Functions Name Summary (jvm) close open fun close(): Unit (jvm) delegate fun ~~delegate~~(): Source (jvm) read open fun read(sink: Buffer , byteCount: Long ): Long (jvm) timeout open fun timeout(): Timeout (jvm) toString open fun toString(): String Extension Functions Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource Inheritors Name Summary (jvm) HashingSource A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. class HashingSource : ForwardingSource","title":"Home"},{"location":"2.x/okio/okio/-forwarding-source/#forwardingsource","text":"(jvm) abstract class ForwardingSource : Source A Source which forwards calls to another. Useful for subclassing.","title":"ForwardingSource"},{"location":"2.x/okio/okio/-forwarding-source/#constructors","text":"Name Summary (jvm) init A Source which forwards calls to another. Useful for subclassing. ForwardingSource(delegate: Source )","title":"Constructors"},{"location":"2.x/okio/okio/-forwarding-source/#properties","text":"Name Summary (jvm) delegate Source to which this instance is delegating. val delegate: Source","title":"Properties"},{"location":"2.x/okio/okio/-forwarding-source/#functions","text":"Name Summary (jvm) close open fun close(): Unit (jvm) delegate fun ~~delegate~~(): Source (jvm) read open fun read(sink: Buffer , byteCount: Long ): Long (jvm) timeout open fun timeout(): Timeout (jvm) toString open fun toString(): String","title":"Functions"},{"location":"2.x/okio/okio/-forwarding-source/#extension-functions","text":"Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Extension Functions"},{"location":"2.x/okio/okio/-forwarding-source/#inheritors","text":"Name Summary (jvm) HashingSource A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. class HashingSource : ForwardingSource","title":"Inheritors"},{"location":"2.x/okio/okio/-forwarding-source/-init-/","text":"okio / okio / ForwardingSource / init init (jvm) ForwardingSource(delegate: Source ) A Source which forwards calls to another. Useful for subclassing.","title":" init "},{"location":"2.x/okio/okio/-forwarding-source/-init-/#init","text":"(jvm) ForwardingSource(delegate: Source ) A Source which forwards calls to another. Useful for subclassing.","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-forwarding-source/close/","text":"okio / okio / ForwardingSource / close close (jvm) open fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-forwarding-source/close/#close","text":"(jvm) open fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-forwarding-source/delegate/","text":"okio / okio / ForwardingSource / delegate delegate (jvm) @JvmName(\"-deprecated_delegate\") fun ~~delegate~~(): Source Deprecated: moved to val (jvm) val delegate: Source Source to which this instance is delegating.","title":"Delegate"},{"location":"2.x/okio/okio/-forwarding-source/delegate/#delegate","text":"(jvm) @JvmName(\"-deprecated_delegate\") fun ~~delegate~~(): Source Deprecated: moved to val (jvm) val delegate: Source Source to which this instance is delegating.","title":"delegate"},{"location":"2.x/okio/okio/-forwarding-source/read/","text":"okio / okio / ForwardingSource / read read (jvm) open fun read(sink: Buffer , byteCount: Long ): Long","title":"Read"},{"location":"2.x/okio/okio/-forwarding-source/read/#read","text":"(jvm) open fun read(sink: Buffer , byteCount: Long ): Long","title":"read"},{"location":"2.x/okio/okio/-forwarding-source/timeout/","text":"okio / okio / ForwardingSource / timeout timeout (jvm) open fun timeout(): Timeout","title":"Timeout"},{"location":"2.x/okio/okio/-forwarding-source/timeout/#timeout","text":"(jvm) open fun timeout(): Timeout","title":"timeout"},{"location":"2.x/okio/okio/-forwarding-source/to-string/","text":"okio / okio / ForwardingSource / toString toString (jvm) open fun toString(): String","title":"To string"},{"location":"2.x/okio/okio/-forwarding-source/to-string/#tostring","text":"(jvm) open fun toString(): String","title":"toString"},{"location":"2.x/okio/okio/-forwarding-timeout/","text":"okio / okio / ForwardingTimeout ForwardingTimeout (jvm) open class ForwardingTimeout : Timeout A Timeout which forwards calls to another. Useful for subclassing. Constructors Name Summary (jvm) init A Timeout which forwards calls to another. Useful for subclassing. ForwardingTimeout(delegate: Timeout ) Properties Name Summary (jvm) delegate var delegate: Timeout Functions Name Summary (jvm) clearDeadline Clears the deadline. open fun clearDeadline(): Timeout (jvm) clearTimeout Clears the timeout. Operating system timeouts may still apply. open fun clearTimeout(): Timeout (jvm) deadlineNanoTime Returns the nano time when the deadline will be reached. open fun deadlineNanoTime(): Long Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations. open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout (jvm) hasDeadline Returns true if a deadline is enabled. open fun hasDeadline(): Boolean (jvm) setDelegate fun setDelegate(delegate: Timeout ): ForwardingTimeout (jvm) throwIfReached Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation. open fun throwIfReached(): Unit (jvm) timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. open fun timeout(timeout: Long , unit: TimeUnit ): Timeout (jvm) timeoutNanos Returns the timeout in nanoseconds, or 0 for no timeout. open fun timeoutNanos(): Long Inherited Functions Name Summary (jvm) deadline Set a deadline of now plus duration time. fun deadline(duration: Long , unit: TimeUnit ): Timeout (jvm) intersectWith Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values. fun intersectWith(other: Timeout , block: () - Unit ): Unit (jvm) waitUntilNotified Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . fun waitUntilNotified(monitor: Any ): Unit","title":"Home"},{"location":"2.x/okio/okio/-forwarding-timeout/#forwardingtimeout","text":"(jvm) open class ForwardingTimeout : Timeout A Timeout which forwards calls to another. Useful for subclassing.","title":"ForwardingTimeout"},{"location":"2.x/okio/okio/-forwarding-timeout/#constructors","text":"Name Summary (jvm) init A Timeout which forwards calls to another. Useful for subclassing. ForwardingTimeout(delegate: Timeout )","title":"Constructors"},{"location":"2.x/okio/okio/-forwarding-timeout/#properties","text":"Name Summary (jvm) delegate var delegate: Timeout","title":"Properties"},{"location":"2.x/okio/okio/-forwarding-timeout/#functions","text":"Name Summary (jvm) clearDeadline Clears the deadline. open fun clearDeadline(): Timeout (jvm) clearTimeout Clears the timeout. Operating system timeouts may still apply. open fun clearTimeout(): Timeout (jvm) deadlineNanoTime Returns the nano time when the deadline will be reached. open fun deadlineNanoTime(): Long Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations. open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout (jvm) hasDeadline Returns true if a deadline is enabled. open fun hasDeadline(): Boolean (jvm) setDelegate fun setDelegate(delegate: Timeout ): ForwardingTimeout (jvm) throwIfReached Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation. open fun throwIfReached(): Unit (jvm) timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. open fun timeout(timeout: Long , unit: TimeUnit ): Timeout (jvm) timeoutNanos Returns the timeout in nanoseconds, or 0 for no timeout. open fun timeoutNanos(): Long","title":"Functions"},{"location":"2.x/okio/okio/-forwarding-timeout/#inherited-functions","text":"Name Summary (jvm) deadline Set a deadline of now plus duration time. fun deadline(duration: Long , unit: TimeUnit ): Timeout (jvm) intersectWith Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values. fun intersectWith(other: Timeout , block: () - Unit ): Unit (jvm) waitUntilNotified Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . fun waitUntilNotified(monitor: Any ): Unit","title":"Inherited Functions"},{"location":"2.x/okio/okio/-forwarding-timeout/-init-/","text":"okio / okio / ForwardingTimeout / init init (jvm) ForwardingTimeout(delegate: Timeout ) A Timeout which forwards calls to another. Useful for subclassing.","title":" init "},{"location":"2.x/okio/okio/-forwarding-timeout/-init-/#init","text":"(jvm) ForwardingTimeout(delegate: Timeout ) A Timeout which forwards calls to another. Useful for subclassing.","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-forwarding-timeout/clear-deadline/","text":"okio / okio / ForwardingTimeout / clearDeadline clearDeadline (jvm) open fun clearDeadline(): Timeout Clears the deadline.","title":"Clear deadline"},{"location":"2.x/okio/okio/-forwarding-timeout/clear-deadline/#cleardeadline","text":"(jvm) open fun clearDeadline(): Timeout Clears the deadline.","title":"clearDeadline"},{"location":"2.x/okio/okio/-forwarding-timeout/clear-timeout/","text":"okio / okio / ForwardingTimeout / clearTimeout clearTimeout (jvm) open fun clearTimeout(): Timeout Clears the timeout. Operating system timeouts may still apply.","title":"Clear timeout"},{"location":"2.x/okio/okio/-forwarding-timeout/clear-timeout/#cleartimeout","text":"(jvm) open fun clearTimeout(): Timeout Clears the timeout. Operating system timeouts may still apply.","title":"clearTimeout"},{"location":"2.x/okio/okio/-forwarding-timeout/deadline-nano-time/","text":"okio / okio / ForwardingTimeout / deadlineNanoTime deadlineNanoTime (jvm) open fun deadlineNanoTime(): Long Returns the nano time when the deadline will be reached. Exceptions IllegalStateException - if no deadline is set.(jvm) open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations.","title":"Deadline nano time"},{"location":"2.x/okio/okio/-forwarding-timeout/deadline-nano-time/#deadlinenanotime","text":"(jvm) open fun deadlineNanoTime(): Long Returns the nano time when the deadline will be reached.","title":"deadlineNanoTime"},{"location":"2.x/okio/okio/-forwarding-timeout/deadline-nano-time/#exceptions","text":"IllegalStateException - if no deadline is set.(jvm) open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations.","title":"Exceptions"},{"location":"2.x/okio/okio/-forwarding-timeout/delegate/","text":"okio / okio / ForwardingTimeout / delegate delegate (jvm) var delegate: Timeout","title":"Delegate"},{"location":"2.x/okio/okio/-forwarding-timeout/delegate/#delegate","text":"(jvm) var delegate: Timeout","title":"delegate"},{"location":"2.x/okio/okio/-forwarding-timeout/has-deadline/","text":"okio / okio / ForwardingTimeout / hasDeadline hasDeadline (jvm) open fun hasDeadline(): Boolean Returns true if a deadline is enabled.","title":"Has deadline"},{"location":"2.x/okio/okio/-forwarding-timeout/has-deadline/#hasdeadline","text":"(jvm) open fun hasDeadline(): Boolean Returns true if a deadline is enabled.","title":"hasDeadline"},{"location":"2.x/okio/okio/-forwarding-timeout/set-delegate/","text":"okio / okio / ForwardingTimeout / setDelegate setDelegate (jvm) fun setDelegate(delegate: Timeout ): ForwardingTimeout","title":"Set delegate"},{"location":"2.x/okio/okio/-forwarding-timeout/set-delegate/#setdelegate","text":"(jvm) fun setDelegate(delegate: Timeout ): ForwardingTimeout","title":"setDelegate"},{"location":"2.x/okio/okio/-forwarding-timeout/throw-if-reached/","text":"okio / okio / ForwardingTimeout / throwIfReached throwIfReached (jvm) open fun throwIfReached(): Unit Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation.","title":"Throw if reached"},{"location":"2.x/okio/okio/-forwarding-timeout/throw-if-reached/#throwifreached","text":"(jvm) open fun throwIfReached(): Unit Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation.","title":"throwIfReached"},{"location":"2.x/okio/okio/-forwarding-timeout/timeout-nanos/","text":"okio / okio / ForwardingTimeout / timeoutNanos timeoutNanos (jvm) open fun timeoutNanos(): Long Returns the timeout in nanoseconds, or 0 for no timeout.","title":"Timeout nanos"},{"location":"2.x/okio/okio/-forwarding-timeout/timeout-nanos/#timeoutnanos","text":"(jvm) open fun timeoutNanos(): Long Returns the timeout in nanoseconds, or 0 for no timeout.","title":"timeoutNanos"},{"location":"2.x/okio/okio/-forwarding-timeout/timeout/","text":"okio / okio / ForwardingTimeout / timeout timeout (jvm) open fun timeout(timeout: Long , unit: TimeUnit ): Timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. If timeout == 0 , operations will run indefinitely. (Operating system timeouts may still apply.)","title":"Timeout"},{"location":"2.x/okio/okio/-forwarding-timeout/timeout/#timeout","text":"(jvm) open fun timeout(timeout: Long , unit: TimeUnit ): Timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. If timeout == 0 , operations will run indefinitely. (Operating system timeouts may still apply.)","title":"timeout"},{"location":"2.x/okio/okio/-gzip-sink/","text":"okio / okio / GzipSink GzipSink (jvm) class GzipSink : Sink A sink that uses GZIP to compress written data to another sink. Sync flush Aggressive flushing of this stream may result in reduced compression. Each call to flush immediately compresses all currently-buffered data; this early compression may be less effective than compression performed without flushing. This is equivalent to using Deflater with the sync flush option. This class does not offer any partial flush mechanism. For best performance, only call flush when application behavior requires it. Constructors Name Summary (jvm) init A sink that uses GZIP to compress written data to another sink. GzipSink(sink: Sink ) Properties Name Summary (jvm) deflater The deflater used to compress the body. val deflater: Deflater Functions Name Summary (jvm) close fun close(): Unit (jvm) deflater fun ~~deflater~~(): Deflater (jvm) flush fun flush(): Unit (jvm) timeout fun timeout(): Timeout (jvm) write fun write(source: Buffer , byteCount: Long ): Unit Extension Functions Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Home"},{"location":"2.x/okio/okio/-gzip-sink/#gzipsink","text":"(jvm) class GzipSink : Sink A sink that uses GZIP to compress written data to another sink.","title":"GzipSink"},{"location":"2.x/okio/okio/-gzip-sink/#sync-flush","text":"Aggressive flushing of this stream may result in reduced compression. Each call to flush immediately compresses all currently-buffered data; this early compression may be less effective than compression performed without flushing. This is equivalent to using Deflater with the sync flush option. This class does not offer any partial flush mechanism. For best performance, only call flush when application behavior requires it.","title":"Sync flush"},{"location":"2.x/okio/okio/-gzip-sink/#constructors","text":"Name Summary (jvm) init A sink that uses GZIP to compress written data to another sink. GzipSink(sink: Sink )","title":"Constructors"},{"location":"2.x/okio/okio/-gzip-sink/#properties","text":"Name Summary (jvm) deflater The deflater used to compress the body. val deflater: Deflater","title":"Properties"},{"location":"2.x/okio/okio/-gzip-sink/#functions","text":"Name Summary (jvm) close fun close(): Unit (jvm) deflater fun ~~deflater~~(): Deflater (jvm) flush fun flush(): Unit (jvm) timeout fun timeout(): Timeout (jvm) write fun write(source: Buffer , byteCount: Long ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-gzip-sink/#extension-functions","text":"Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Extension Functions"},{"location":"2.x/okio/okio/-gzip-sink/-init-/","text":"okio / okio / GzipSink / init init (jvm) GzipSink(sink: Sink ) A sink that uses GZIP to compress written data to another sink. Sync flush Aggressive flushing of this stream may result in reduced compression. Each call to flush immediately compresses all currently-buffered data; this early compression may be less effective than compression performed without flushing. This is equivalent to using Deflater with the sync flush option. This class does not offer any partial flush mechanism. For best performance, only call flush when application behavior requires it.","title":" init "},{"location":"2.x/okio/okio/-gzip-sink/-init-/#init","text":"(jvm) GzipSink(sink: Sink ) A sink that uses GZIP to compress written data to another sink.","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-gzip-sink/-init-/#sync-flush","text":"Aggressive flushing of this stream may result in reduced compression. Each call to flush immediately compresses all currently-buffered data; this early compression may be less effective than compression performed without flushing. This is equivalent to using Deflater with the sync flush option. This class does not offer any partial flush mechanism. For best performance, only call flush when application behavior requires it.","title":"Sync flush"},{"location":"2.x/okio/okio/-gzip-sink/close/","text":"okio / okio / GzipSink / close close (jvm) fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-gzip-sink/close/#close","text":"(jvm) fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-gzip-sink/deflater/","text":"okio / okio / GzipSink / deflater deflater (jvm) val deflater: Deflater The deflater used to compress the body. Getter The deflater used to compress the body. (jvm) @JvmName(\"-deprecated_deflater\") fun ~~deflater~~(): Deflater Deprecated: moved to val","title":"Deflater"},{"location":"2.x/okio/okio/-gzip-sink/deflater/#deflater","text":"(jvm) val deflater: Deflater The deflater used to compress the body. Getter The deflater used to compress the body. (jvm) @JvmName(\"-deprecated_deflater\") fun ~~deflater~~(): Deflater Deprecated: moved to val","title":"deflater"},{"location":"2.x/okio/okio/-gzip-sink/flush/","text":"okio / okio / GzipSink / flush flush (jvm) fun flush(): Unit","title":"Flush"},{"location":"2.x/okio/okio/-gzip-sink/flush/#flush","text":"(jvm) fun flush(): Unit","title":"flush"},{"location":"2.x/okio/okio/-gzip-sink/timeout/","text":"okio / okio / GzipSink / timeout timeout (jvm) fun timeout(): Timeout","title":"Timeout"},{"location":"2.x/okio/okio/-gzip-sink/timeout/#timeout","text":"(jvm) fun timeout(): Timeout","title":"timeout"},{"location":"2.x/okio/okio/-gzip-sink/write/","text":"okio / okio / GzipSink / write write (jvm) fun write(source: Buffer , byteCount: Long ): Unit","title":"Write"},{"location":"2.x/okio/okio/-gzip-sink/write/#write","text":"(jvm) fun write(source: Buffer , byteCount: Long ): Unit","title":"write"},{"location":"2.x/okio/okio/-gzip-source/","text":"okio / okio / GzipSource GzipSource (jvm) class GzipSource : Source A source that uses GZIP to decompress data read from another source. Constructors Name Summary (jvm) init A source that uses GZIP to decompress data read from another source. GzipSource(source: Source ) Functions Name Summary (jvm) close fun close(): Unit (jvm) read fun read(sink: Buffer , byteCount: Long ): Long (jvm) timeout fun timeout(): Timeout Extension Functions Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Home"},{"location":"2.x/okio/okio/-gzip-source/#gzipsource","text":"(jvm) class GzipSource : Source A source that uses GZIP to decompress data read from another source.","title":"GzipSource"},{"location":"2.x/okio/okio/-gzip-source/#constructors","text":"Name Summary (jvm) init A source that uses GZIP to decompress data read from another source. GzipSource(source: Source )","title":"Constructors"},{"location":"2.x/okio/okio/-gzip-source/#functions","text":"Name Summary (jvm) close fun close(): Unit (jvm) read fun read(sink: Buffer , byteCount: Long ): Long (jvm) timeout fun timeout(): Timeout","title":"Functions"},{"location":"2.x/okio/okio/-gzip-source/#extension-functions","text":"Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Extension Functions"},{"location":"2.x/okio/okio/-gzip-source/-init-/","text":"okio / okio / GzipSource / init init (jvm) GzipSource(source: Source ) A source that uses GZIP to decompress data read from another source.","title":" init "},{"location":"2.x/okio/okio/-gzip-source/-init-/#init","text":"(jvm) GzipSource(source: Source ) A source that uses GZIP to decompress data read from another source.","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-gzip-source/close/","text":"okio / okio / GzipSource / close close (jvm) fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-gzip-source/close/#close","text":"(jvm) fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-gzip-source/read/","text":"okio / okio / GzipSource / read read (jvm) fun read(sink: Buffer , byteCount: Long ): Long","title":"Read"},{"location":"2.x/okio/okio/-gzip-source/read/#read","text":"(jvm) fun read(sink: Buffer , byteCount: Long ): Long","title":"read"},{"location":"2.x/okio/okio/-gzip-source/timeout/","text":"okio / okio / GzipSource / timeout timeout (jvm) fun timeout(): Timeout","title":"Timeout"},{"location":"2.x/okio/okio/-gzip-source/timeout/#timeout","text":"(jvm) fun timeout(): Timeout","title":"timeout"},{"location":"2.x/okio/okio/-hashing-sink/","text":"okio / okio / HashingSink HashingSink (jvm) class HashingSink : ForwardingSink A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. In this example we use HashingSink with a BufferedSink to make writing to the sink easier. HashingSink hashingSink = HashingSink.sha256(s); BufferedSink bufferedSink = Okio.buffer(hashingSink); ... // Write to bufferedSink and either flush or close it. ByteString hash = hashingSink.hash(); Properties Name Summary (jvm) hash Returns the hash of the bytes accepted thus far and resets the internal state of this sink. val hash: ByteString Functions Name Summary (jvm) hash fun ~~hash~~(): ByteString (jvm) write fun write(source: Buffer , byteCount: Long ): Unit Companion Object Functions Name Summary (jvm) hmacSha1 Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes. fun hmacSha1(sink: Sink , key: ByteString ): HashingSink (jvm) hmacSha256 Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes. fun hmacSha256(sink: Sink , key: ByteString ): HashingSink (jvm) hmacSha512 Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes. fun hmacSha512(sink: Sink , key: ByteString ): HashingSink (jvm) md5 Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes. fun md5(sink: Sink ): HashingSink (jvm) sha1 Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes. fun sha1(sink: Sink ): HashingSink (jvm) sha256 Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes. fun sha256(sink: Sink ): HashingSink (jvm) sha512 Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes. fun sha512(sink: Sink ): HashingSink Extension Functions Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Home"},{"location":"2.x/okio/okio/-hashing-sink/#hashingsink","text":"(jvm) class HashingSink : ForwardingSink A sink that computes a hash of the full stream of bytes it has accepted. To use, create an instance with your preferred hash algorithm. Write all of the data to the sink and then call hash to compute the final hash value. In this example we use HashingSink with a BufferedSink to make writing to the sink easier. HashingSink hashingSink = HashingSink.sha256(s); BufferedSink bufferedSink = Okio.buffer(hashingSink); ... // Write to bufferedSink and either flush or close it. ByteString hash = hashingSink.hash();","title":"HashingSink"},{"location":"2.x/okio/okio/-hashing-sink/#properties","text":"Name Summary (jvm) hash Returns the hash of the bytes accepted thus far and resets the internal state of this sink. val hash: ByteString","title":"Properties"},{"location":"2.x/okio/okio/-hashing-sink/#functions","text":"Name Summary (jvm) hash fun ~~hash~~(): ByteString (jvm) write fun write(source: Buffer , byteCount: Long ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-hashing-sink/#companion-object-functions","text":"Name Summary (jvm) hmacSha1 Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes. fun hmacSha1(sink: Sink , key: ByteString ): HashingSink (jvm) hmacSha256 Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes. fun hmacSha256(sink: Sink , key: ByteString ): HashingSink (jvm) hmacSha512 Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes. fun hmacSha512(sink: Sink , key: ByteString ): HashingSink (jvm) md5 Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes. fun md5(sink: Sink ): HashingSink (jvm) sha1 Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes. fun sha1(sink: Sink ): HashingSink (jvm) sha256 Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes. fun sha256(sink: Sink ): HashingSink (jvm) sha512 Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes. fun sha512(sink: Sink ): HashingSink","title":"Companion Object Functions"},{"location":"2.x/okio/okio/-hashing-sink/#extension-functions","text":"Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Extension Functions"},{"location":"2.x/okio/okio/-hashing-sink/hash/","text":"okio / okio / HashingSink / hash hash (jvm) val hash: ByteString Returns the hash of the bytes accepted thus far and resets the internal state of this sink. Warning: This method is not idempotent. Each time this method is called its internal state is cleared. This starts a new hash with zero bytes accepted. (jvm) @JvmName(\"-deprecated_hash\") fun ~~hash~~(): ByteString Deprecated: moved to val","title":"Hash"},{"location":"2.x/okio/okio/-hashing-sink/hash/#hash","text":"(jvm) val hash: ByteString Returns the hash of the bytes accepted thus far and resets the internal state of this sink. Warning: This method is not idempotent. Each time this method is called its internal state is cleared. This starts a new hash with zero bytes accepted. (jvm) @JvmName(\"-deprecated_hash\") fun ~~hash~~(): ByteString Deprecated: moved to val","title":"hash"},{"location":"2.x/okio/okio/-hashing-sink/hmac-sha1/","text":"okio / okio / HashingSink / hmacSha1 hmacSha1 (jvm) @JvmStatic fun hmacSha1(sink: Sink , key: ByteString ): HashingSink Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes.","title":"Hmac sha1"},{"location":"2.x/okio/okio/-hashing-sink/hmac-sha1/#hmacsha1","text":"(jvm) @JvmStatic fun hmacSha1(sink: Sink , key: ByteString ): HashingSink Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes.","title":"hmacSha1"},{"location":"2.x/okio/okio/-hashing-sink/hmac-sha256/","text":"okio / okio / HashingSink / hmacSha256 hmacSha256 (jvm) @JvmStatic fun hmacSha256(sink: Sink , key: ByteString ): HashingSink Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes.","title":"Hmac sha256"},{"location":"2.x/okio/okio/-hashing-sink/hmac-sha256/#hmacsha256","text":"(jvm) @JvmStatic fun hmacSha256(sink: Sink , key: ByteString ): HashingSink Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes.","title":"hmacSha256"},{"location":"2.x/okio/okio/-hashing-sink/hmac-sha512/","text":"okio / okio / HashingSink / hmacSha512 hmacSha512 (jvm) @JvmStatic fun hmacSha512(sink: Sink , key: ByteString ): HashingSink Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes.","title":"Hmac sha512"},{"location":"2.x/okio/okio/-hashing-sink/hmac-sha512/#hmacsha512","text":"(jvm) @JvmStatic fun hmacSha512(sink: Sink , key: ByteString ): HashingSink Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes.","title":"hmacSha512"},{"location":"2.x/okio/okio/-hashing-sink/md5/","text":"okio / okio / HashingSink / md5 md5 (jvm) @JvmStatic fun md5(sink: Sink ): HashingSink Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes.","title":"Md5"},{"location":"2.x/okio/okio/-hashing-sink/md5/#md5","text":"(jvm) @JvmStatic fun md5(sink: Sink ): HashingSink Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes.","title":"md5"},{"location":"2.x/okio/okio/-hashing-sink/sha1/","text":"okio / okio / HashingSink / sha1 sha1 (jvm) @JvmStatic fun sha1(sink: Sink ): HashingSink Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes.","title":"Sha1"},{"location":"2.x/okio/okio/-hashing-sink/sha1/#sha1","text":"(jvm) @JvmStatic fun sha1(sink: Sink ): HashingSink Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes.","title":"sha1"},{"location":"2.x/okio/okio/-hashing-sink/sha256/","text":"okio / okio / HashingSink / sha256 sha256 (jvm) @JvmStatic fun sha256(sink: Sink ): HashingSink Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes.","title":"Sha256"},{"location":"2.x/okio/okio/-hashing-sink/sha256/#sha256","text":"(jvm) @JvmStatic fun sha256(sink: Sink ): HashingSink Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes.","title":"sha256"},{"location":"2.x/okio/okio/-hashing-sink/sha512/","text":"okio / okio / HashingSink / sha512 sha512 (jvm) @JvmStatic fun sha512(sink: Sink ): HashingSink Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes.","title":"Sha512"},{"location":"2.x/okio/okio/-hashing-sink/sha512/#sha512","text":"(jvm) @JvmStatic fun sha512(sink: Sink ): HashingSink Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes.","title":"sha512"},{"location":"2.x/okio/okio/-hashing-sink/write/","text":"okio / okio / HashingSink / write write (jvm) fun write(source: Buffer , byteCount: Long ): Unit","title":"Write"},{"location":"2.x/okio/okio/-hashing-sink/write/#write","text":"(jvm) fun write(source: Buffer , byteCount: Long ): Unit","title":"write"},{"location":"2.x/okio/okio/-hashing-source/","text":"okio / okio / HashingSource HashingSource (jvm) class HashingSource : ForwardingSource A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. In this example we use HashingSource with a BufferedSource to make reading from the source easier. HashingSource hashingSource = HashingSource.sha256(rawSource); BufferedSource bufferedSource = Okio.buffer(hashingSource); ... // Read all of bufferedSource. ByteString hash = hashingSource.hash(); Properties Name Summary (jvm) hash Returns the hash of the bytes supplied thus far and resets the internal state of this source. val hash: ByteString Functions Name Summary (jvm) hash fun ~~hash~~(): ByteString (jvm) read fun read(sink: Buffer , byteCount: Long ): Long Companion Object Functions Name Summary (jvm) hmacSha1 Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes. fun hmacSha1(source: Source , key: ByteString ): HashingSource (jvm) hmacSha256 Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes. fun hmacSha256(source: Source , key: ByteString ): HashingSource (jvm) hmacSha512 Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes. fun hmacSha512(source: Source , key: ByteString ): HashingSource (jvm) md5 Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes. fun md5(source: Source ): HashingSource (jvm) sha1 Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes. fun sha1(source: Source ): HashingSource (jvm) sha256 Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes. fun sha256(source: Source ): HashingSource (jvm) sha512 Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes. fun sha512(source: Source ): HashingSource Extension Functions Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Home"},{"location":"2.x/okio/okio/-hashing-source/#hashingsource","text":"(jvm) class HashingSource : ForwardingSource A source that computes a hash of the full stream of bytes it has supplied. To use, create an instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and then call hash to compute the final hash value. In this example we use HashingSource with a BufferedSource to make reading from the source easier. HashingSource hashingSource = HashingSource.sha256(rawSource); BufferedSource bufferedSource = Okio.buffer(hashingSource); ... // Read all of bufferedSource. ByteString hash = hashingSource.hash();","title":"HashingSource"},{"location":"2.x/okio/okio/-hashing-source/#properties","text":"Name Summary (jvm) hash Returns the hash of the bytes supplied thus far and resets the internal state of this source. val hash: ByteString","title":"Properties"},{"location":"2.x/okio/okio/-hashing-source/#functions","text":"Name Summary (jvm) hash fun ~~hash~~(): ByteString (jvm) read fun read(sink: Buffer , byteCount: Long ): Long","title":"Functions"},{"location":"2.x/okio/okio/-hashing-source/#companion-object-functions","text":"Name Summary (jvm) hmacSha1 Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes. fun hmacSha1(source: Source , key: ByteString ): HashingSource (jvm) hmacSha256 Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes. fun hmacSha256(source: Source , key: ByteString ): HashingSource (jvm) hmacSha512 Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes. fun hmacSha512(source: Source , key: ByteString ): HashingSource (jvm) md5 Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes. fun md5(source: Source ): HashingSource (jvm) sha1 Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes. fun sha1(source: Source ): HashingSource (jvm) sha256 Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes. fun sha256(source: Source ): HashingSource (jvm) sha512 Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes. fun sha512(source: Source ): HashingSource","title":"Companion Object Functions"},{"location":"2.x/okio/okio/-hashing-source/#extension-functions","text":"Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Extension Functions"},{"location":"2.x/okio/okio/-hashing-source/hash/","text":"okio / okio / HashingSource / hash hash (jvm) val hash: ByteString Returns the hash of the bytes supplied thus far and resets the internal state of this source. Warning: This method is not idempotent. Each time this method is called its internal state is cleared. This starts a new hash with zero bytes supplied. (jvm) @JvmName(\"-deprecated_hash\") fun ~~hash~~(): ByteString Deprecated: moved to val","title":"Hash"},{"location":"2.x/okio/okio/-hashing-source/hash/#hash","text":"(jvm) val hash: ByteString Returns the hash of the bytes supplied thus far and resets the internal state of this source. Warning: This method is not idempotent. Each time this method is called its internal state is cleared. This starts a new hash with zero bytes supplied. (jvm) @JvmName(\"-deprecated_hash\") fun ~~hash~~(): ByteString Deprecated: moved to val","title":"hash"},{"location":"2.x/okio/okio/-hashing-source/hmac-sha1/","text":"okio / okio / HashingSource / hmacSha1 hmacSha1 (jvm) @JvmStatic fun hmacSha1(source: Source , key: ByteString ): HashingSource Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes.","title":"Hmac sha1"},{"location":"2.x/okio/okio/-hashing-source/hmac-sha1/#hmacsha1","text":"(jvm) @JvmStatic fun hmacSha1(source: Source , key: ByteString ): HashingSource Returns a sink that uses the obsolete SHA-1 HMAC algorithm to produce 160-bit hashes.","title":"hmacSha1"},{"location":"2.x/okio/okio/-hashing-source/hmac-sha256/","text":"okio / okio / HashingSource / hmacSha256 hmacSha256 (jvm) @JvmStatic fun hmacSha256(source: Source , key: ByteString ): HashingSource Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes.","title":"Hmac sha256"},{"location":"2.x/okio/okio/-hashing-source/hmac-sha256/#hmacsha256","text":"(jvm) @JvmStatic fun hmacSha256(source: Source , key: ByteString ): HashingSource Returns a sink that uses the SHA-256 HMAC algorithm to produce 256-bit hashes.","title":"hmacSha256"},{"location":"2.x/okio/okio/-hashing-source/hmac-sha512/","text":"okio / okio / HashingSource / hmacSha512 hmacSha512 (jvm) @JvmStatic fun hmacSha512(source: Source , key: ByteString ): HashingSource Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes.","title":"Hmac sha512"},{"location":"2.x/okio/okio/-hashing-source/hmac-sha512/#hmacsha512","text":"(jvm) @JvmStatic fun hmacSha512(source: Source , key: ByteString ): HashingSource Returns a sink that uses the SHA-512 HMAC algorithm to produce 512-bit hashes.","title":"hmacSha512"},{"location":"2.x/okio/okio/-hashing-source/md5/","text":"okio / okio / HashingSource / md5 md5 (jvm) @JvmStatic fun md5(source: Source ): HashingSource Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes.","title":"Md5"},{"location":"2.x/okio/okio/-hashing-source/md5/#md5","text":"(jvm) @JvmStatic fun md5(source: Source ): HashingSource Returns a sink that uses the obsolete MD5 hash algorithm to produce 128-bit hashes.","title":"md5"},{"location":"2.x/okio/okio/-hashing-source/read/","text":"okio / okio / HashingSource / read read (jvm) fun read(sink: Buffer , byteCount: Long ): Long","title":"Read"},{"location":"2.x/okio/okio/-hashing-source/read/#read","text":"(jvm) fun read(sink: Buffer , byteCount: Long ): Long","title":"read"},{"location":"2.x/okio/okio/-hashing-source/sha1/","text":"okio / okio / HashingSource / sha1 sha1 (jvm) @JvmStatic fun sha1(source: Source ): HashingSource Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes.","title":"Sha1"},{"location":"2.x/okio/okio/-hashing-source/sha1/#sha1","text":"(jvm) @JvmStatic fun sha1(source: Source ): HashingSource Returns a sink that uses the obsolete SHA-1 hash algorithm to produce 160-bit hashes.","title":"sha1"},{"location":"2.x/okio/okio/-hashing-source/sha256/","text":"okio / okio / HashingSource / sha256 sha256 (jvm) @JvmStatic fun sha256(source: Source ): HashingSource Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes.","title":"Sha256"},{"location":"2.x/okio/okio/-hashing-source/sha256/#sha256","text":"(jvm) @JvmStatic fun sha256(source: Source ): HashingSource Returns a sink that uses the SHA-256 hash algorithm to produce 256-bit hashes.","title":"sha256"},{"location":"2.x/okio/okio/-hashing-source/sha512/","text":"okio / okio / HashingSource / sha512 sha512 (jvm) @JvmStatic fun sha512(source: Source ): HashingSource Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes.","title":"Sha512"},{"location":"2.x/okio/okio/-hashing-source/sha512/#sha512","text":"(jvm) @JvmStatic fun sha512(source: Source ): HashingSource Returns a sink that uses the SHA-512 hash algorithm to produce 512-bit hashes.","title":"sha512"},{"location":"2.x/okio/okio/-i-o-exception/","text":"okio / okio / IOException IOException (js, jvm) open class IOException : Exception (native) open class IOException : Exception Constructors Name Summary init (js, jvm) init (message: String ? = null) (native) init (message: String ?) Inheritors Name Summary (js, jvm, native) EOFException open class EOFException : IOException","title":"Home"},{"location":"2.x/okio/okio/-i-o-exception/#ioexception","text":"(js, jvm) open class IOException : Exception (native) open class IOException : Exception","title":"IOException"},{"location":"2.x/okio/okio/-i-o-exception/#constructors","text":"Name Summary init (js, jvm) init (message: String ? = null) (native) init (message: String ?)","title":"Constructors"},{"location":"2.x/okio/okio/-i-o-exception/#inheritors","text":"Name Summary (js, jvm, native) EOFException open class EOFException : IOException","title":"Inheritors"},{"location":"2.x/okio/okio/-i-o-exception/-init-/","text":"okio / okio / IOException / init init (js, jvm) init (message: String ? = null) (native) init (message: String ?)","title":" init "},{"location":"2.x/okio/okio/-i-o-exception/-init-/#init","text":"(js, jvm) init (message: String ? = null) (native) init (message: String ?)","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-inflater-source/","text":"okio / okio / InflaterSource InflaterSource (jvm) class InflaterSource : Source A source that uses DEFLATE to decompress data read from another source. Constructors Name Summary (jvm) init InflaterSource(source: Source , inflater: Inflater ) Functions Name Summary (jvm) close fun close(): Unit (jvm) read fun read(sink: Buffer , byteCount: Long ): Long (jvm) refill Refills the inflater with compressed data if it needs input. (And only if it needs input). Returns true if the inflater required input but the source was exhausted. fun refill(): Boolean (jvm) timeout fun timeout(): Timeout Extension Functions Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Home"},{"location":"2.x/okio/okio/-inflater-source/#inflatersource","text":"(jvm) class InflaterSource : Source A source that uses DEFLATE to decompress data read from another source.","title":"InflaterSource"},{"location":"2.x/okio/okio/-inflater-source/#constructors","text":"Name Summary (jvm) init InflaterSource(source: Source , inflater: Inflater )","title":"Constructors"},{"location":"2.x/okio/okio/-inflater-source/#functions","text":"Name Summary (jvm) close fun close(): Unit (jvm) read fun read(sink: Buffer , byteCount: Long ): Long (jvm) refill Refills the inflater with compressed data if it needs input. (And only if it needs input). Returns true if the inflater required input but the source was exhausted. fun refill(): Boolean (jvm) timeout fun timeout(): Timeout","title":"Functions"},{"location":"2.x/okio/okio/-inflater-source/#extension-functions","text":"Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Extension Functions"},{"location":"2.x/okio/okio/-inflater-source/-init-/","text":"okio / okio / InflaterSource / init init (jvm) InflaterSource(source: Source , inflater: Inflater )","title":" init "},{"location":"2.x/okio/okio/-inflater-source/-init-/#init","text":"(jvm) InflaterSource(source: Source , inflater: Inflater )","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-inflater-source/close/","text":"okio / okio / InflaterSource / close close (jvm) fun close(): Unit","title":"Close"},{"location":"2.x/okio/okio/-inflater-source/close/#close","text":"(jvm) fun close(): Unit","title":"close"},{"location":"2.x/okio/okio/-inflater-source/read/","text":"okio / okio / InflaterSource / read read (jvm) fun read(sink: Buffer , byteCount: Long ): Long","title":"Read"},{"location":"2.x/okio/okio/-inflater-source/read/#read","text":"(jvm) fun read(sink: Buffer , byteCount: Long ): Long","title":"read"},{"location":"2.x/okio/okio/-inflater-source/refill/","text":"okio / okio / InflaterSource / refill refill (jvm) fun refill(): Boolean Refills the inflater with compressed data if it needs input. (And only if it needs input). Returns true if the inflater required input but the source was exhausted.","title":"Refill"},{"location":"2.x/okio/okio/-inflater-source/refill/#refill","text":"(jvm) fun refill(): Boolean Refills the inflater with compressed data if it needs input. (And only if it needs input). Returns true if the inflater required input but the source was exhausted.","title":"refill"},{"location":"2.x/okio/okio/-inflater-source/timeout/","text":"okio / okio / InflaterSource / timeout timeout (jvm) fun timeout(): Timeout","title":"Timeout"},{"location":"2.x/okio/okio/-inflater-source/timeout/#timeout","text":"(jvm) fun timeout(): Timeout","title":"timeout"},{"location":"2.x/okio/okio/-options/","text":"okio / okio / Options Options (js) class Options : AbstractList ByteString , RandomAccess (jvm) class Options : AbstractList ByteString , RandomAccess An indexed set of values that may be read with BufferedSource.select . Properties Name Summary (js, jvm) size val size: Int Functions Name Summary (js, jvm) get fun get(index: Int ): ByteString Companion Object Functions Name Summary (js, jvm) of fun of(vararg byteStrings: ByteString ): Options","title":"Home"},{"location":"2.x/okio/okio/-options/#options","text":"(js) class Options : AbstractList ByteString , RandomAccess (jvm) class Options : AbstractList ByteString , RandomAccess An indexed set of values that may be read with BufferedSource.select .","title":"Options"},{"location":"2.x/okio/okio/-options/#properties","text":"Name Summary (js, jvm) size val size: Int","title":"Properties"},{"location":"2.x/okio/okio/-options/#functions","text":"Name Summary (js, jvm) get fun get(index: Int ): ByteString","title":"Functions"},{"location":"2.x/okio/okio/-options/#companion-object-functions","text":"Name Summary (js, jvm) of fun of(vararg byteStrings: ByteString ): Options","title":"Companion Object Functions"},{"location":"2.x/okio/okio/-options/get/","text":"okio / okio / Options / get get (js, jvm) fun get(index: Int ): ByteString","title":"Get"},{"location":"2.x/okio/okio/-options/get/#get","text":"(js, jvm) fun get(index: Int ): ByteString","title":"get"},{"location":"2.x/okio/okio/-options/of/","text":"okio / okio / Options / of of (js, jvm) @JvmStatic fun of(vararg byteStrings: ByteString ): Options","title":"Of"},{"location":"2.x/okio/okio/-options/of/#of","text":"(js, jvm) @JvmStatic fun of(vararg byteStrings: ByteString ): Options","title":"of"},{"location":"2.x/okio/okio/-options/size/","text":"okio / okio / Options / size size (js, jvm) val size: Int","title":"Size"},{"location":"2.x/okio/okio/-options/size/#size","text":"(js, jvm) val size: Int","title":"size"},{"location":"2.x/okio/okio/-pipe/","text":"okio / okio / Pipe Pipe (jvm) class Pipe A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. This class uses a buffer to decouple source and sink. This buffer has a user-specified maximum size. When a producer thread outruns its consumer the buffer fills up and eventually writes to the sink will block until the consumer has caught up. Symmetrically, if a consumer outruns its producer reads block until there is data to be read. Limits on the amount of time spent waiting for the other party can be configured with timeouts on the source and the sink. When the sink is closed, source reads will continue to complete normally until the buffer has been exhausted. At that point reads will return -1, indicating the end of the stream. But if the source is closed first, writes to the sink will immediately fail with an IOException . Constructors Name Summary (jvm) init A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. Pipe(maxBufferSize: Long ) Properties Name Summary (jvm) sink val sink: Sink (jvm) source val source: Source Functions Name Summary (jvm) fold Writes any buffered contents of this pipe to sink , then replace this pipe s source with sink . This pipe s source is closed and attempts to read it will throw an IllegalStateException . fun fold(sink: Sink ): Unit (jvm) sink fun ~~sink~~(): Sink (jvm) source fun ~~source~~(): Source","title":"Home"},{"location":"2.x/okio/okio/-pipe/#pipe","text":"(jvm) class Pipe A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. This class uses a buffer to decouple source and sink. This buffer has a user-specified maximum size. When a producer thread outruns its consumer the buffer fills up and eventually writes to the sink will block until the consumer has caught up. Symmetrically, if a consumer outruns its producer reads block until there is data to be read. Limits on the amount of time spent waiting for the other party can be configured with timeouts on the source and the sink. When the sink is closed, source reads will continue to complete normally until the buffer has been exhausted. At that point reads will return -1, indicating the end of the stream. But if the source is closed first, writes to the sink will immediately fail with an IOException .","title":"Pipe"},{"location":"2.x/okio/okio/-pipe/#constructors","text":"Name Summary (jvm) init A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. Pipe(maxBufferSize: Long )","title":"Constructors"},{"location":"2.x/okio/okio/-pipe/#properties","text":"Name Summary (jvm) sink val sink: Sink (jvm) source val source: Source","title":"Properties"},{"location":"2.x/okio/okio/-pipe/#functions","text":"Name Summary (jvm) fold Writes any buffered contents of this pipe to sink , then replace this pipe s source with sink . This pipe s source is closed and attempts to read it will throw an IllegalStateException . fun fold(sink: Sink ): Unit (jvm) sink fun ~~sink~~(): Sink (jvm) source fun ~~source~~(): Source","title":"Functions"},{"location":"2.x/okio/okio/-pipe/-init-/","text":"okio / okio / Pipe / init init (jvm) Pipe(maxBufferSize: Long ) A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. This class uses a buffer to decouple source and sink. This buffer has a user-specified maximum size. When a producer thread outruns its consumer the buffer fills up and eventually writes to the sink will block until the consumer has caught up. Symmetrically, if a consumer outruns its producer reads block until there is data to be read. Limits on the amount of time spent waiting for the other party can be configured with timeouts on the source and the sink. When the sink is closed, source reads will continue to complete normally until the buffer has been exhausted. At that point reads will return -1, indicating the end of the stream. But if the source is closed first, writes to the sink will immediately fail with an IOException .","title":" init "},{"location":"2.x/okio/okio/-pipe/-init-/#init","text":"(jvm) Pipe(maxBufferSize: Long ) A source and a sink that are attached. The sink s output is the source s input. Typically each is accessed by its own thread: a producer thread writes data to the sink and a consumer thread reads data from the source. This class uses a buffer to decouple source and sink. This buffer has a user-specified maximum size. When a producer thread outruns its consumer the buffer fills up and eventually writes to the sink will block until the consumer has caught up. Symmetrically, if a consumer outruns its producer reads block until there is data to be read. Limits on the amount of time spent waiting for the other party can be configured with timeouts on the source and the sink. When the sink is closed, source reads will continue to complete normally until the buffer has been exhausted. At that point reads will return -1, indicating the end of the stream. But if the source is closed first, writes to the sink will immediately fail with an IOException .","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-pipe/fold/","text":"okio / okio / Pipe / fold fold (jvm) fun fold(sink: Sink ): Unit Writes any buffered contents of this pipe to sink , then replace this pipe s source with sink . This pipe s source is closed and attempts to read it will throw an IllegalStateException . This method must not be called while concurrently accessing this pipe s source. It is safe, however, to call this while concurrently writing this pipe s sink.","title":"Fold"},{"location":"2.x/okio/okio/-pipe/fold/#fold","text":"(jvm) fun fold(sink: Sink ): Unit Writes any buffered contents of this pipe to sink , then replace this pipe s source with sink . This pipe s source is closed and attempts to read it will throw an IllegalStateException . This method must not be called while concurrently accessing this pipe s source. It is safe, however, to call this while concurrently writing this pipe s sink.","title":"fold"},{"location":"2.x/okio/okio/-pipe/sink/","text":"okio / okio / Pipe / sink sink (jvm) val sink: Sink @JvmName(\"-deprecated_sink\") fun ~~sink~~(): Sink Deprecated: moved to val","title":"Sink"},{"location":"2.x/okio/okio/-pipe/sink/#sink","text":"(jvm) val sink: Sink @JvmName(\"-deprecated_sink\") fun ~~sink~~(): Sink Deprecated: moved to val","title":"sink"},{"location":"2.x/okio/okio/-pipe/source/","text":"okio / okio / Pipe / source source (jvm) val source: Source @JvmName(\"-deprecated_source\") fun ~~source~~(): Source Deprecated: moved to val","title":"Source"},{"location":"2.x/okio/okio/-pipe/source/#source","text":"(jvm) val source: Source @JvmName(\"-deprecated_source\") fun ~~source~~(): Source Deprecated: moved to val","title":"source"},{"location":"2.x/okio/okio/-sink/","text":"okio / okio / Sink Sink (js, jvm, native) interface Sink (js) Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. Most application code shouldn t operate on a sink directly, but rather on a BufferedSink which is both more efficient and more convenient. Use buffer to wrap any sink with a buffer. Sinks are easy to test: just use a Buffer in your tests, and read from it to confirm it received the data that was expected. Comparison with OutputStream This interface is functionally equivalent to java.io.OutputStream . OutputStream requires multiple layers when emitted data is heterogeneous: a DataOutputStream for primitive values, a BufferedOutputStream for buffering, and OutputStreamWriter for charset encoding. This library uses BufferedSink for all of the above. Sink is also easier to layer: there is no write() method that is awkward to implement efficiently. Interop with OutputStream Use sink to adapt an OutputStream to a sink. Use outputStream() to adapt a sink to an OutputStream . (jvm) Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. Most application code shouldn t operate on a sink directly, but rather on a BufferedSink which is both more efficient and more convenient. Use buffer to wrap any sink with a buffer. Sinks are easy to test: just use a Buffer in your tests, and read from it to confirm it received the data that was expected. Comparison with OutputStream This interface is functionally equivalent to java.io.OutputStream . OutputStream requires multiple layers when emitted data is heterogeneous: a DataOutputStream for primitive values, a BufferedOutputStream for buffering, and OutputStreamWriter for charset encoding. This library uses BufferedSink for all of the above. Sink is also easier to layer: there is no write() method that is awkward to implement efficiently. Interop with OutputStream Use sink to adapt an OutputStream to a sink. Use outputStream() to adapt a sink to an OutputStream . Functions Name Summary (js, jvm, native) close Pushes all buffered bytes to their final destination and releases the resources held by this sink. It is an error to write a closed sink. It is safe to close a sink more than once. abstract fun close(): Unit (js, jvm, native) flush Pushes all buffered bytes to their final destination. abstract fun flush(): Unit (js, jvm, native) timeout Returns the timeout for this sink. abstract fun timeout(): Timeout (js, jvm, native) write Removes byteCount bytes from source and appends them to this. abstract fun write(source: Buffer , byteCount: Long ): Unit Extension Functions Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink Inheritors Name Summary (js, jvm, native) BufferedSink A sink that keeps a buffer internally so that callers can do small writes without a performance penalty. interface BufferedSink : Sink (jvm) DeflaterSink A sink that uses DEFLATE to compress data written to another source. class DeflaterSink : Sink (jvm) ForwardingSink A Sink which forwards calls to another. Useful for subclassing. abstract class ForwardingSink : Sink (jvm) GzipSink A sink that uses GZIP to compress written data to another sink. class GzipSink : Sink","title":"Home"},{"location":"2.x/okio/okio/-sink/#sink","text":"(js, jvm, native) interface Sink (js) Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. Most application code shouldn t operate on a sink directly, but rather on a BufferedSink which is both more efficient and more convenient. Use buffer to wrap any sink with a buffer. Sinks are easy to test: just use a Buffer in your tests, and read from it to confirm it received the data that was expected.","title":"Sink"},{"location":"2.x/okio/okio/-sink/#comparison-with-outputstream","text":"This interface is functionally equivalent to java.io.OutputStream . OutputStream requires multiple layers when emitted data is heterogeneous: a DataOutputStream for primitive values, a BufferedOutputStream for buffering, and OutputStreamWriter for charset encoding. This library uses BufferedSink for all of the above. Sink is also easier to layer: there is no write() method that is awkward to implement efficiently.","title":"Comparison with OutputStream"},{"location":"2.x/okio/okio/-sink/#interop-with-outputstream","text":"Use sink to adapt an OutputStream to a sink. Use outputStream() to adapt a sink to an OutputStream . (jvm) Receives a stream of bytes. Use this interface to write data wherever it s needed: to the network, storage, or a buffer in memory. Sinks may be layered to transform received data, such as to compress, encrypt, throttle, or add protocol framing. Most application code shouldn t operate on a sink directly, but rather on a BufferedSink which is both more efficient and more convenient. Use buffer to wrap any sink with a buffer. Sinks are easy to test: just use a Buffer in your tests, and read from it to confirm it received the data that was expected.","title":"Interop with OutputStream"},{"location":"2.x/okio/okio/-sink/#comparison-with-outputstream_1","text":"This interface is functionally equivalent to java.io.OutputStream . OutputStream requires multiple layers when emitted data is heterogeneous: a DataOutputStream for primitive values, a BufferedOutputStream for buffering, and OutputStreamWriter for charset encoding. This library uses BufferedSink for all of the above. Sink is also easier to layer: there is no write() method that is awkward to implement efficiently.","title":"Comparison with OutputStream"},{"location":"2.x/okio/okio/-sink/#interop-with-outputstream_1","text":"Use sink to adapt an OutputStream to a sink. Use outputStream() to adapt a sink to an OutputStream .","title":"Interop with OutputStream"},{"location":"2.x/okio/okio/-sink/#functions","text":"Name Summary (js, jvm, native) close Pushes all buffered bytes to their final destination and releases the resources held by this sink. It is an error to write a closed sink. It is safe to close a sink more than once. abstract fun close(): Unit (js, jvm, native) flush Pushes all buffered bytes to their final destination. abstract fun flush(): Unit (js, jvm, native) timeout Returns the timeout for this sink. abstract fun timeout(): Timeout (js, jvm, native) write Removes byteCount bytes from source and appends them to this. abstract fun write(source: Buffer , byteCount: Long ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-sink/#extension-functions","text":"Name Summary (jvm) deflate Returns an DeflaterSink that DEFLATE-compresses data to this Sink while writing. fun Sink .deflate(deflater: Deflater = Deflater()): DeflaterSink (jvm) gzip Returns a GzipSink that gzip-compresses to this Sink while writing. fun Sink .gzip(): GzipSink","title":"Extension Functions"},{"location":"2.x/okio/okio/-sink/#inheritors","text":"Name Summary (js, jvm, native) BufferedSink A sink that keeps a buffer internally so that callers can do small writes without a performance penalty. interface BufferedSink : Sink (jvm) DeflaterSink A sink that uses DEFLATE to compress data written to another source. class DeflaterSink : Sink (jvm) ForwardingSink A Sink which forwards calls to another. Useful for subclassing. abstract class ForwardingSink : Sink (jvm) GzipSink A sink that uses GZIP to compress written data to another sink. class GzipSink : Sink","title":"Inheritors"},{"location":"2.x/okio/okio/-sink/close/","text":"okio / okio / Sink / close close (js, jvm, native) abstract fun close(): Unit Pushes all buffered bytes to their final destination and releases the resources held by this sink. It is an error to write a closed sink. It is safe to close a sink more than once.","title":"Close"},{"location":"2.x/okio/okio/-sink/close/#close","text":"(js, jvm, native) abstract fun close(): Unit Pushes all buffered bytes to their final destination and releases the resources held by this sink. It is an error to write a closed sink. It is safe to close a sink more than once.","title":"close"},{"location":"2.x/okio/okio/-sink/flush/","text":"okio / okio / Sink / flush flush (js, jvm, native) abstract fun flush(): Unit Pushes all buffered bytes to their final destination.","title":"Flush"},{"location":"2.x/okio/okio/-sink/flush/#flush","text":"(js, jvm, native) abstract fun flush(): Unit Pushes all buffered bytes to their final destination.","title":"flush"},{"location":"2.x/okio/okio/-sink/timeout/","text":"okio / okio / Sink / timeout timeout (js, jvm, native) abstract fun timeout(): Timeout Returns the timeout for this sink.","title":"Timeout"},{"location":"2.x/okio/okio/-sink/timeout/#timeout","text":"(js, jvm, native) abstract fun timeout(): Timeout Returns the timeout for this sink.","title":"timeout"},{"location":"2.x/okio/okio/-sink/write/","text":"okio / okio / Sink / write write (js, jvm, native) abstract fun write(source: Buffer , byteCount: Long ): Unit Removes byteCount bytes from source and appends them to this.","title":"Write"},{"location":"2.x/okio/okio/-sink/write/#write","text":"(js, jvm, native) abstract fun write(source: Buffer , byteCount: Long ): Unit Removes byteCount bytes from source and appends them to this.","title":"write"},{"location":"2.x/okio/okio/-source/","text":"okio / okio / Source Source (js, jvm, native) interface Source (js) Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. Most applications shouldn t operate on a source directly, but rather on a BufferedSource which is both more efficient and more convenient. Use buffer to wrap any source with a buffer. Sources are easy to test: just use a Buffer in your tests, and fill it with the data your application is to read. Comparison with InputStream This interface is functionally equivalent to java.io.InputStream . InputStream requires multiple layers when consumed data is heterogeneous: a DataInputStream for primitive values, a BufferedInputStream for buffering, and InputStreamReader for strings. This library uses BufferedSource for all of the above. Source avoids the impossible-to-implement available() method. Instead callers specify how many bytes they require . Source omits the unsafe-to-compose mark and reset state that s tracked by InputStream ; instead, callers just buffer what they need. When implementing a source, you don t need to worry about the read() method that is awkward to implement efficiently and returns one of 257 possible values. And source has a stronger skip method: BufferedSource.skip won t return prematurely. Interop with InputStream Use source to adapt an InputStream to a source. Use BufferedSource.inputStream to adapt a source to an InputStream . (jvm) Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. Most applications shouldn t operate on a source directly, but rather on a BufferedSource which is both more efficient and more convenient. Use buffer to wrap any source with a buffer. Sources are easy to test: just use a Buffer in your tests, and fill it with the data your application is to read. Comparison with InputStream This interface is functionally equivalent to java.io.InputStream . InputStream requires multiple layers when consumed data is heterogeneous: a DataInputStream for primitive values, a BufferedInputStream for buffering, and InputStreamReader for strings. This library uses BufferedSource for all of the above. Source avoids the impossible-to-implement available() method. Instead callers specify how many bytes they require . Source omits the unsafe-to-compose mark and reset state that s tracked by InputStream ; instead, callers just buffer what they need. When implementing a source, you don t need to worry about the read() method that is awkward to implement efficiently and returns one of 257 possible values. And source has a stronger skip method: BufferedSource.skip won t return prematurely. Interop with InputStream Use source to adapt an InputStream to a source. Use BufferedSource.inputStream to adapt a source to an InputStream . Functions Name Summary (js, jvm, native) close Closes this source and releases the resources held by this source. It is an error to read a closed source. It is safe to close a source more than once. abstract fun close(): Unit (js, jvm, native) read Removes at least 1, and up to byteCount bytes from this and appends them to sink . Returns the number of bytes read, or -1 if this source is exhausted. abstract fun read(sink: Buffer , byteCount: Long ): Long (js, jvm, native) timeout Returns the timeout for this source. abstract fun timeout(): Timeout Extension Functions Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource Inheritors Name Summary (js, jvm, native) BufferedSource A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input. interface BufferedSource : Source (jvm) ForwardingSource A Source which forwards calls to another. Useful for subclassing. abstract class ForwardingSource : Source (jvm) GzipSource A source that uses GZIP to decompress data read from another source. class GzipSource : Source (jvm) InflaterSource A source that uses DEFLATE to decompress data read from another source. class InflaterSource : Source","title":"Home"},{"location":"2.x/okio/okio/-source/#source","text":"(js, jvm, native) interface Source (js) Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. Most applications shouldn t operate on a source directly, but rather on a BufferedSource which is both more efficient and more convenient. Use buffer to wrap any source with a buffer. Sources are easy to test: just use a Buffer in your tests, and fill it with the data your application is to read.","title":"Source"},{"location":"2.x/okio/okio/-source/#comparison-with-inputstream","text":"This interface is functionally equivalent to java.io.InputStream . InputStream requires multiple layers when consumed data is heterogeneous: a DataInputStream for primitive values, a BufferedInputStream for buffering, and InputStreamReader for strings. This library uses BufferedSource for all of the above. Source avoids the impossible-to-implement available() method. Instead callers specify how many bytes they require . Source omits the unsafe-to-compose mark and reset state that s tracked by InputStream ; instead, callers just buffer what they need. When implementing a source, you don t need to worry about the read() method that is awkward to implement efficiently and returns one of 257 possible values. And source has a stronger skip method: BufferedSource.skip won t return prematurely.","title":"Comparison with InputStream"},{"location":"2.x/okio/okio/-source/#interop-with-inputstream","text":"Use source to adapt an InputStream to a source. Use BufferedSource.inputStream to adapt a source to an InputStream . (jvm) Supplies a stream of bytes. Use this interface to read data from wherever it s located: from the network, storage, or a buffer in memory. Sources may be layered to transform supplied data, such as to decompress, decrypt, or remove protocol framing. Most applications shouldn t operate on a source directly, but rather on a BufferedSource which is both more efficient and more convenient. Use buffer to wrap any source with a buffer. Sources are easy to test: just use a Buffer in your tests, and fill it with the data your application is to read.","title":"Interop with InputStream"},{"location":"2.x/okio/okio/-source/#comparison-with-inputstream_1","text":"This interface is functionally equivalent to java.io.InputStream . InputStream requires multiple layers when consumed data is heterogeneous: a DataInputStream for primitive values, a BufferedInputStream for buffering, and InputStreamReader for strings. This library uses BufferedSource for all of the above. Source avoids the impossible-to-implement available() method. Instead callers specify how many bytes they require . Source omits the unsafe-to-compose mark and reset state that s tracked by InputStream ; instead, callers just buffer what they need. When implementing a source, you don t need to worry about the read() method that is awkward to implement efficiently and returns one of 257 possible values. And source has a stronger skip method: BufferedSource.skip won t return prematurely.","title":"Comparison with InputStream"},{"location":"2.x/okio/okio/-source/#interop-with-inputstream_1","text":"Use source to adapt an InputStream to a source. Use BufferedSource.inputStream to adapt a source to an InputStream .","title":"Interop with InputStream"},{"location":"2.x/okio/okio/-source/#functions","text":"Name Summary (js, jvm, native) close Closes this source and releases the resources held by this source. It is an error to read a closed source. It is safe to close a source more than once. abstract fun close(): Unit (js, jvm, native) read Removes at least 1, and up to byteCount bytes from this and appends them to sink . Returns the number of bytes read, or -1 if this source is exhausted. abstract fun read(sink: Buffer , byteCount: Long ): Long (js, jvm, native) timeout Returns the timeout for this source. abstract fun timeout(): Timeout","title":"Functions"},{"location":"2.x/okio/okio/-source/#extension-functions","text":"Name Summary (jvm) gzip Returns a GzipSource that gzip-decompresses this Source while reading. fun Source .gzip(): GzipSource (jvm) inflate Returns an InflaterSource that DEFLATE-decompresses this Source while reading. fun Source .inflate(inflater: Inflater = Inflater()): InflaterSource","title":"Extension Functions"},{"location":"2.x/okio/okio/-source/#inheritors","text":"Name Summary (js, jvm, native) BufferedSource A source that keeps a buffer internally so that callers can do small reads without a performance penalty. It also allows clients to read ahead, buffering as much as necessary before consuming input. interface BufferedSource : Source (jvm) ForwardingSource A Source which forwards calls to another. Useful for subclassing. abstract class ForwardingSource : Source (jvm) GzipSource A source that uses GZIP to decompress data read from another source. class GzipSource : Source (jvm) InflaterSource A source that uses DEFLATE to decompress data read from another source. class InflaterSource : Source","title":"Inheritors"},{"location":"2.x/okio/okio/-source/close/","text":"okio / okio / Source / close close (js, jvm, native) abstract fun close(): Unit Closes this source and releases the resources held by this source. It is an error to read a closed source. It is safe to close a source more than once.","title":"Close"},{"location":"2.x/okio/okio/-source/close/#close","text":"(js, jvm, native) abstract fun close(): Unit Closes this source and releases the resources held by this source. It is an error to read a closed source. It is safe to close a source more than once.","title":"close"},{"location":"2.x/okio/okio/-source/read/","text":"okio / okio / Source / read read (js, jvm, native) abstract fun read(sink: Buffer , byteCount: Long ): Long Removes at least 1, and up to byteCount bytes from this and appends them to sink . Returns the number of bytes read, or -1 if this source is exhausted.","title":"Read"},{"location":"2.x/okio/okio/-source/read/#read","text":"(js, jvm, native) abstract fun read(sink: Buffer , byteCount: Long ): Long Removes at least 1, and up to byteCount bytes from this and appends them to sink . Returns the number of bytes read, or -1 if this source is exhausted.","title":"read"},{"location":"2.x/okio/okio/-source/timeout/","text":"okio / okio / Source / timeout timeout (js, jvm, native) abstract fun timeout(): Timeout Returns the timeout for this source.","title":"Timeout"},{"location":"2.x/okio/okio/-source/timeout/#timeout","text":"(js, jvm, native) abstract fun timeout(): Timeout Returns the timeout for this source.","title":"timeout"},{"location":"2.x/okio/okio/-throttler/","text":"okio / okio / Throttler Throttler (jvm) class Throttler Enables limiting of Source and Sink throughput. Attach to this throttler via source and sink and set the desired throughput via bytesPerSecond . Multiple Sources and Sinks can be attached to a single Throttler and they will be throttled as a group, where their combined throughput will not exceed the desired throughput. The same Source or Sink can be attached to multiple Throttlers and its throughput will not exceed the desired throughput of any of the Throttlers. This class has these tuning parameters: bytesPerSecond : Maximum sustained throughput. Use 0 for no limit. waitByteCount : When the requested byte count is greater than this many bytes and isn t immediately available, only wait until we can allocate at least this many bytes. Use this to set the ideal byte count during sustained throughput. maxByteCount : Maximum number of bytes to allocate on any call. This is also the number of bytes that will be returned before any waiting. Constructors Name Summary (jvm) init Throttler() Functions Name Summary (jvm) bytesPerSecond Sets the rate at which bytes will be allocated. Use 0 for no limit. fun bytesPerSecond(bytesPerSecond: Long , waitByteCount: Long = this.waitByteCount, maxByteCount: Long = this.maxByteCount): Unit (jvm) sink Create a Sink which honors this Throttler. fun sink(sink: Sink ): Sink (jvm) source Create a Source which honors this Throttler. fun source(source: Source ): Source","title":"Home"},{"location":"2.x/okio/okio/-throttler/#throttler","text":"(jvm) class Throttler Enables limiting of Source and Sink throughput. Attach to this throttler via source and sink and set the desired throughput via bytesPerSecond . Multiple Sources and Sinks can be attached to a single Throttler and they will be throttled as a group, where their combined throughput will not exceed the desired throughput. The same Source or Sink can be attached to multiple Throttlers and its throughput will not exceed the desired throughput of any of the Throttlers. This class has these tuning parameters: bytesPerSecond : Maximum sustained throughput. Use 0 for no limit. waitByteCount : When the requested byte count is greater than this many bytes and isn t immediately available, only wait until we can allocate at least this many bytes. Use this to set the ideal byte count during sustained throughput. maxByteCount : Maximum number of bytes to allocate on any call. This is also the number of bytes that will be returned before any waiting.","title":"Throttler"},{"location":"2.x/okio/okio/-throttler/#constructors","text":"Name Summary (jvm) init Throttler()","title":"Constructors"},{"location":"2.x/okio/okio/-throttler/#functions","text":"Name Summary (jvm) bytesPerSecond Sets the rate at which bytes will be allocated. Use 0 for no limit. fun bytesPerSecond(bytesPerSecond: Long , waitByteCount: Long = this.waitByteCount, maxByteCount: Long = this.maxByteCount): Unit (jvm) sink Create a Sink which honors this Throttler. fun sink(sink: Sink ): Sink (jvm) source Create a Source which honors this Throttler. fun source(source: Source ): Source","title":"Functions"},{"location":"2.x/okio/okio/-throttler/-init-/","text":"okio / okio / Throttler / init init (jvm) Throttler()","title":" init "},{"location":"2.x/okio/okio/-throttler/-init-/#init","text":"(jvm) Throttler()","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-throttler/bytes-per-second/","text":"okio / okio / Throttler / bytesPerSecond bytesPerSecond (jvm) @JvmOverloads fun bytesPerSecond(bytesPerSecond: Long , waitByteCount: Long = this.waitByteCount, maxByteCount: Long = this.maxByteCount): Unit Sets the rate at which bytes will be allocated. Use 0 for no limit.","title":"Bytes per second"},{"location":"2.x/okio/okio/-throttler/bytes-per-second/#bytespersecond","text":"(jvm) @JvmOverloads fun bytesPerSecond(bytesPerSecond: Long , waitByteCount: Long = this.waitByteCount, maxByteCount: Long = this.maxByteCount): Unit Sets the rate at which bytes will be allocated. Use 0 for no limit.","title":"bytesPerSecond"},{"location":"2.x/okio/okio/-throttler/sink/","text":"okio / okio / Throttler / sink sink (jvm) fun sink(sink: Sink ): Sink Create a Sink which honors this Throttler.","title":"Sink"},{"location":"2.x/okio/okio/-throttler/sink/#sink","text":"(jvm) fun sink(sink: Sink ): Sink Create a Sink which honors this Throttler.","title":"sink"},{"location":"2.x/okio/okio/-throttler/source/","text":"okio / okio / Throttler / source source (jvm) fun source(source: Source ): Source Create a Source which honors this Throttler.","title":"Source"},{"location":"2.x/okio/okio/-throttler/source/#source","text":"(jvm) fun source(source: Source ): Source Create a Source which honors this Throttler.","title":"source"},{"location":"2.x/okio/okio/-timeout/","text":"okio / okio / Timeout Timeout (js, jvm, native) open class Timeout A policy on how much time to spend on a task before giving up. When a task times out, it is left in an unspecified state and should be abandoned. For example, if reading from a source times out, that source should be closed and the read should be retried later. If writing to a sink times out, the same rules apply: close the sink and retry later. Timeouts and Deadlines This class offers two complementary controls to define a timeout policy. Timeouts specify the maximum time to wait for a single operation to complete. Timeouts are typically used to detect problems like network partitions. For example, if a remote peer doesn t return any data for ten seconds, we may assume that the peer is unavailable. Deadlines specify the maximum time to spend on a job, composed of one or more operations. Use deadlines to set an upper bound on the time invested on a job. For example, a battery-conscious app may limit how much time it spends pre-loading content. Constructors Name Summary (js, jvm, native) init init () Functions Name Summary (jvm) clearDeadline Clears the deadline. open fun clearDeadline(): Timeout (jvm) clearTimeout Clears the timeout. Operating system timeouts may still apply. open fun clearTimeout(): Timeout (jvm) deadline Set a deadline of now plus duration time. fun deadline(duration: Long , unit: TimeUnit ): Timeout (jvm) deadlineNanoTime Returns the nano time when the deadline will be reached. open fun deadlineNanoTime(): Long Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations. open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout (jvm) hasDeadline Returns true if a deadline is enabled. open fun hasDeadline(): Boolean (jvm) intersectWith Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values. fun intersectWith(other: Timeout , block: () - Unit ): Unit (jvm) throwIfReached Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation. open fun throwIfReached(): Unit (jvm) timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. open fun timeout(timeout: Long , unit: TimeUnit ): Timeout (jvm) timeoutNanos Returns the timeout in nanoseconds, or 0 for no timeout. open fun timeoutNanos(): Long (jvm) waitUntilNotified Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . fun waitUntilNotified(monitor: Any ): Unit Companion Object Properties Name Summary (js, jvm, native) NONE An empty timeout that neither tracks nor detects timeouts. Use this when timeouts aren t necessary, such as in implementations whose operations do not block. val NONE: Timeout Companion Object Functions Name Summary (jvm) minTimeout fun minTimeout(aNanos: Long , bNanos: Long ): Long Inheritors Name Summary (jvm) AsyncTimeout This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. open class AsyncTimeout : Timeout (jvm) ForwardingTimeout A Timeout which forwards calls to another. Useful for subclassing. open class ForwardingTimeout : Timeout","title":"Home"},{"location":"2.x/okio/okio/-timeout/#timeout","text":"(js, jvm, native) open class Timeout A policy on how much time to spend on a task before giving up. When a task times out, it is left in an unspecified state and should be abandoned. For example, if reading from a source times out, that source should be closed and the read should be retried later. If writing to a sink times out, the same rules apply: close the sink and retry later.","title":"Timeout"},{"location":"2.x/okio/okio/-timeout/#timeouts-and-deadlines","text":"This class offers two complementary controls to define a timeout policy. Timeouts specify the maximum time to wait for a single operation to complete. Timeouts are typically used to detect problems like network partitions. For example, if a remote peer doesn t return any data for ten seconds, we may assume that the peer is unavailable. Deadlines specify the maximum time to spend on a job, composed of one or more operations. Use deadlines to set an upper bound on the time invested on a job. For example, a battery-conscious app may limit how much time it spends pre-loading content.","title":"Timeouts and Deadlines"},{"location":"2.x/okio/okio/-timeout/#constructors","text":"Name Summary (js, jvm, native) init init ()","title":"Constructors"},{"location":"2.x/okio/okio/-timeout/#functions","text":"Name Summary (jvm) clearDeadline Clears the deadline. open fun clearDeadline(): Timeout (jvm) clearTimeout Clears the timeout. Operating system timeouts may still apply. open fun clearTimeout(): Timeout (jvm) deadline Set a deadline of now plus duration time. fun deadline(duration: Long , unit: TimeUnit ): Timeout (jvm) deadlineNanoTime Returns the nano time when the deadline will be reached. open fun deadlineNanoTime(): Long Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations. open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout (jvm) hasDeadline Returns true if a deadline is enabled. open fun hasDeadline(): Boolean (jvm) intersectWith Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values. fun intersectWith(other: Timeout , block: () - Unit ): Unit (jvm) throwIfReached Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation. open fun throwIfReached(): Unit (jvm) timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. open fun timeout(timeout: Long , unit: TimeUnit ): Timeout (jvm) timeoutNanos Returns the timeout in nanoseconds, or 0 for no timeout. open fun timeoutNanos(): Long (jvm) waitUntilNotified Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . fun waitUntilNotified(monitor: Any ): Unit","title":"Functions"},{"location":"2.x/okio/okio/-timeout/#companion-object-properties","text":"Name Summary (js, jvm, native) NONE An empty timeout that neither tracks nor detects timeouts. Use this when timeouts aren t necessary, such as in implementations whose operations do not block. val NONE: Timeout","title":"Companion Object Properties"},{"location":"2.x/okio/okio/-timeout/#companion-object-functions","text":"Name Summary (jvm) minTimeout fun minTimeout(aNanos: Long , bNanos: Long ): Long","title":"Companion Object Functions"},{"location":"2.x/okio/okio/-timeout/#inheritors","text":"Name Summary (jvm) AsyncTimeout This timeout uses a background thread to take action exactly when the timeout occurs. Use this to implement timeouts where they aren t supported natively, such as to sockets that are blocked on writing. open class AsyncTimeout : Timeout (jvm) ForwardingTimeout A Timeout which forwards calls to another. Useful for subclassing. open class ForwardingTimeout : Timeout","title":"Inheritors"},{"location":"2.x/okio/okio/-timeout/-init-/","text":"okio / okio / Timeout / init init (js, jvm, native) init ()","title":" init "},{"location":"2.x/okio/okio/-timeout/-init-/#init","text":"(js, jvm, native) init ()","title":"&lt;init&gt;"},{"location":"2.x/okio/okio/-timeout/-n-o-n-e/","text":"okio / okio / Timeout / NONE NONE (js, jvm, native) val NONE: Timeout An empty timeout that neither tracks nor detects timeouts. Use this when timeouts aren t necessary, such as in implementations whose operations do not block.","title":" n o n e"},{"location":"2.x/okio/okio/-timeout/-n-o-n-e/#none","text":"(js, jvm, native) val NONE: Timeout An empty timeout that neither tracks nor detects timeouts. Use this when timeouts aren t necessary, such as in implementations whose operations do not block.","title":"NONE"},{"location":"2.x/okio/okio/-timeout/clear-deadline/","text":"okio / okio / Timeout / clearDeadline clearDeadline (jvm) open fun clearDeadline(): Timeout Clears the deadline.","title":"Clear deadline"},{"location":"2.x/okio/okio/-timeout/clear-deadline/#cleardeadline","text":"(jvm) open fun clearDeadline(): Timeout Clears the deadline.","title":"clearDeadline"},{"location":"2.x/okio/okio/-timeout/clear-timeout/","text":"okio / okio / Timeout / clearTimeout clearTimeout (jvm) open fun clearTimeout(): Timeout Clears the timeout. Operating system timeouts may still apply.","title":"Clear timeout"},{"location":"2.x/okio/okio/-timeout/clear-timeout/#cleartimeout","text":"(jvm) open fun clearTimeout(): Timeout Clears the timeout. Operating system timeouts may still apply.","title":"clearTimeout"},{"location":"2.x/okio/okio/-timeout/deadline-nano-time/","text":"okio / okio / Timeout / deadlineNanoTime deadlineNanoTime (jvm) open fun deadlineNanoTime(): Long Returns the nano time when the deadline will be reached. Exceptions IllegalStateException - if no deadline is set.(jvm) open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations.","title":"Deadline nano time"},{"location":"2.x/okio/okio/-timeout/deadline-nano-time/#deadlinenanotime","text":"(jvm) open fun deadlineNanoTime(): Long Returns the nano time when the deadline will be reached.","title":"deadlineNanoTime"},{"location":"2.x/okio/okio/-timeout/deadline-nano-time/#exceptions","text":"IllegalStateException - if no deadline is set.(jvm) open fun deadlineNanoTime(deadlineNanoTime: Long ): Timeout Sets the nano time when the deadline will be reached. All operations must complete before this time. Use a deadline to set a maximum bound on the time spent on a sequence of operations.","title":"Exceptions"},{"location":"2.x/okio/okio/-timeout/deadline/","text":"okio / okio / Timeout / deadline deadline (jvm) fun deadline(duration: Long , unit: TimeUnit ): Timeout Set a deadline of now plus duration time.","title":"Deadline"},{"location":"2.x/okio/okio/-timeout/deadline/#deadline","text":"(jvm) fun deadline(duration: Long , unit: TimeUnit ): Timeout Set a deadline of now plus duration time.","title":"deadline"},{"location":"2.x/okio/okio/-timeout/has-deadline/","text":"okio / okio / Timeout / hasDeadline hasDeadline (jvm) open fun hasDeadline(): Boolean Returns true if a deadline is enabled.","title":"Has deadline"},{"location":"2.x/okio/okio/-timeout/has-deadline/#hasdeadline","text":"(jvm) open fun hasDeadline(): Boolean Returns true if a deadline is enabled.","title":"hasDeadline"},{"location":"2.x/okio/okio/-timeout/intersect-with/","text":"okio / okio / Timeout / intersectWith intersectWith (jvm) inline fun intersectWith(other: Timeout , block: () - Unit ): Unit Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values.","title":"Intersect with"},{"location":"2.x/okio/okio/-timeout/intersect-with/#intersectwith","text":"(jvm) inline fun intersectWith(other: Timeout , block: () - Unit ): Unit Applies the minimum intersection between this timeout and other , run block , then finally rollback this timeout s values.","title":"intersectWith"},{"location":"2.x/okio/okio/-timeout/min-timeout/","text":"okio / okio / Timeout / minTimeout minTimeout (jvm) fun minTimeout(aNanos: Long , bNanos: Long ): Long","title":"Min timeout"},{"location":"2.x/okio/okio/-timeout/min-timeout/#mintimeout","text":"(jvm) fun minTimeout(aNanos: Long , bNanos: Long ): Long","title":"minTimeout"},{"location":"2.x/okio/okio/-timeout/throw-if-reached/","text":"okio / okio / Timeout / throwIfReached throwIfReached (jvm) open fun throwIfReached(): Unit Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation.","title":"Throw if reached"},{"location":"2.x/okio/okio/-timeout/throw-if-reached/#throwifreached","text":"(jvm) open fun throwIfReached(): Unit Throws an InterruptedIOException if the deadline has been reached or if the current thread has been interrupted. This method doesn t detect timeouts; that should be implemented to asynchronously abort an in-progress operation.","title":"throwIfReached"},{"location":"2.x/okio/okio/-timeout/timeout-nanos/","text":"okio / okio / Timeout / timeoutNanos timeoutNanos (jvm) open fun timeoutNanos(): Long Returns the timeout in nanoseconds, or 0 for no timeout.","title":"Timeout nanos"},{"location":"2.x/okio/okio/-timeout/timeout-nanos/#timeoutnanos","text":"(jvm) open fun timeoutNanos(): Long Returns the timeout in nanoseconds, or 0 for no timeout.","title":"timeoutNanos"},{"location":"2.x/okio/okio/-timeout/timeout/","text":"okio / okio / Timeout / timeout timeout (jvm) open fun timeout(timeout: Long , unit: TimeUnit ): Timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. If timeout == 0 , operations will run indefinitely. (Operating system timeouts may still apply.)","title":"Timeout"},{"location":"2.x/okio/okio/-timeout/timeout/#timeout","text":"(jvm) open fun timeout(timeout: Long , unit: TimeUnit ): Timeout Wait at most timeout time before aborting an operation. Using a per-operation timeout means that as long as forward progress is being made, no sequence of operations will fail. If timeout == 0 , operations will run indefinitely. (Operating system timeouts may still apply.)","title":"timeout"},{"location":"2.x/okio/okio/-timeout/wait-until-notified/","text":"okio / okio / Timeout / waitUntilNotified waitUntilNotified (jvm) fun waitUntilNotified(monitor: Any ): Unit Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . Here s a sample class that uses waitUntilNotified() to await a specific state. Note that the call is made within a loop to avoid unnecessary waiting and to mitigate spurious notifications. class Dice { Random random = new Random(); int latestTotal; public synchronized void roll() { latestTotal = 2 + random.nextInt(6) + random.nextInt(6); System.out.println( Rolled + latestTotal); notifyAll(); } public void rollAtFixedRate(int period, TimeUnit timeUnit) { Executors.newScheduledThreadPool(0).scheduleAtFixedRate(new Runnable() { public void run() { roll(); } }, 0, period, timeUnit); } public synchronized void awaitTotal(Timeout timeout, int total) throws InterruptedIOException { while (latestTotal != total) { timeout.waitUntilNotified(this); } } }","title":"Wait until notified"},{"location":"2.x/okio/okio/-timeout/wait-until-notified/#waituntilnotified","text":"(jvm) fun waitUntilNotified(monitor: Any ): Unit Waits on monitor until it is notified. Throws InterruptedIOException if either the thread is interrupted or if this timeout elapses before monitor is notified. The caller must be synchronized on monitor . Here s a sample class that uses waitUntilNotified() to await a specific state. Note that the call is made within a loop to avoid unnecessary waiting and to mitigate spurious notifications. class Dice { Random random = new Random(); int latestTotal; public synchronized void roll() { latestTotal = 2 + random.nextInt(6) + random.nextInt(6); System.out.println( Rolled + latestTotal); notifyAll(); } public void rollAtFixedRate(int period, TimeUnit timeUnit) { Executors.newScheduledThreadPool(0).scheduleAtFixedRate(new Runnable() { public void run() { roll(); } }, 0, period, timeUnit); } public synchronized void awaitTotal(Timeout timeout, int total) throws InterruptedIOException { while (latestTotal != total) { timeout.waitUntilNotified(this); } } }","title":"waitUntilNotified"},{"location":"2.x/okio/okio/java.io.-file/","text":"okio / okio / java.io.File Extensions for java.io.File Name Summary (jvm) appendingSink Returns a sink that writes to file . fun File .appendingSink(): Sink (jvm) sink Returns a sink that writes to file . fun File .sink(append: Boolean = false): Sink (jvm) source Returns a source that reads from file . fun File .source(): Source","title":"Home"},{"location":"2.x/okio/okio/java.io.-file/#extensions-for-javaiofile","text":"Name Summary (jvm) appendingSink Returns a sink that writes to file . fun File .appendingSink(): Sink (jvm) sink Returns a sink that writes to file . fun File .sink(append: Boolean = false): Sink (jvm) source Returns a source that reads from file . fun File .source(): Source","title":"Extensions for java.io.File"},{"location":"2.x/okio/okio/java.io.-file/appending-sink/","text":"okio / okio / java.io.File / appendingSink appendingSink (jvm) fun File .appendingSink(): Sink Returns a sink that writes to file .","title":"Appending sink"},{"location":"2.x/okio/okio/java.io.-file/appending-sink/#appendingsink","text":"(jvm) fun File .appendingSink(): Sink Returns a sink that writes to file .","title":"appendingSink"},{"location":"2.x/okio/okio/java.io.-file/sink/","text":"okio / okio / java.io.File / sink sink (jvm) @JvmOverloads fun File .sink(append: Boolean = false): Sink Returns a sink that writes to file .","title":"Sink"},{"location":"2.x/okio/okio/java.io.-file/sink/#sink","text":"(jvm) @JvmOverloads fun File .sink(append: Boolean = false): Sink Returns a sink that writes to file .","title":"sink"},{"location":"2.x/okio/okio/java.io.-file/source/","text":"okio / okio / java.io.File / source source (jvm) fun File .source(): Source Returns a source that reads from file .","title":"Source"},{"location":"2.x/okio/okio/java.io.-file/source/#source","text":"(jvm) fun File .source(): Source Returns a source that reads from file .","title":"source"},{"location":"2.x/okio/okio/java.io.-input-stream/","text":"okio / okio / java.io.InputStream Extensions for java.io.InputStream Name Summary (jvm) source Returns a source that reads from in . fun InputStream .source(): Source","title":"Home"},{"location":"2.x/okio/okio/java.io.-input-stream/#extensions-for-javaioinputstream","text":"Name Summary (jvm) source Returns a source that reads from in . fun InputStream .source(): Source","title":"Extensions for java.io.InputStream"},{"location":"2.x/okio/okio/java.io.-input-stream/source/","text":"okio / okio / java.io.InputStream / source source (jvm) fun InputStream .source(): Source Returns a source that reads from in .","title":"Source"},{"location":"2.x/okio/okio/java.io.-input-stream/source/#source","text":"(jvm) fun InputStream .source(): Source Returns a source that reads from in .","title":"source"},{"location":"2.x/okio/okio/java.io.-output-stream/","text":"okio / okio / java.io.OutputStream Extensions for java.io.OutputStream Name Summary (jvm) sink Returns a sink that writes to out . fun OutputStream .sink(): Sink","title":"Home"},{"location":"2.x/okio/okio/java.io.-output-stream/#extensions-for-javaiooutputstream","text":"Name Summary (jvm) sink Returns a sink that writes to out . fun OutputStream .sink(): Sink","title":"Extensions for java.io.OutputStream"},{"location":"2.x/okio/okio/java.io.-output-stream/sink/","text":"okio / okio / java.io.OutputStream / sink sink (jvm) fun OutputStream .sink(): Sink Returns a sink that writes to out .","title":"Sink"},{"location":"2.x/okio/okio/java.io.-output-stream/sink/#sink","text":"(jvm) fun OutputStream .sink(): Sink Returns a sink that writes to out .","title":"sink"},{"location":"2.x/okio/okio/java.net.-socket/","text":"okio / okio / java.net.Socket Extensions for java.net.Socket Name Summary (jvm) sink Returns a sink that writes to socket . Prefer this over sink because this method honors timeouts. When the socket write times out, the socket is asynchronously closed by a watchdog thread. fun Socket .sink(): Sink (jvm) source Returns a source that reads from socket . Prefer this over source because this method honors timeouts. When the socket read times out, the socket is asynchronously closed by a watchdog thread. fun Socket .source(): Source","title":"Home"},{"location":"2.x/okio/okio/java.net.-socket/#extensions-for-javanetsocket","text":"Name Summary (jvm) sink Returns a sink that writes to socket . Prefer this over sink because this method honors timeouts. When the socket write times out, the socket is asynchronously closed by a watchdog thread. fun Socket .sink(): Sink (jvm) source Returns a source that reads from socket . Prefer this over source because this method honors timeouts. When the socket read times out, the socket is asynchronously closed by a watchdog thread. fun Socket .source(): Source","title":"Extensions for java.net.Socket"},{"location":"2.x/okio/okio/java.net.-socket/sink/","text":"okio / okio / java.net.Socket / sink sink (jvm) fun Socket .sink(): Sink Returns a sink that writes to socket . Prefer this over sink because this method honors timeouts. When the socket write times out, the socket is asynchronously closed by a watchdog thread.","title":"Sink"},{"location":"2.x/okio/okio/java.net.-socket/sink/#sink","text":"(jvm) fun Socket .sink(): Sink Returns a sink that writes to socket . Prefer this over sink because this method honors timeouts. When the socket write times out, the socket is asynchronously closed by a watchdog thread.","title":"sink"},{"location":"2.x/okio/okio/java.net.-socket/source/","text":"okio / okio / java.net.Socket / source source (jvm) fun Socket .source(): Source Returns a source that reads from socket . Prefer this over source because this method honors timeouts. When the socket read times out, the socket is asynchronously closed by a watchdog thread.","title":"Source"},{"location":"2.x/okio/okio/java.net.-socket/source/#source","text":"(jvm) fun Socket .source(): Source Returns a source that reads from socket . Prefer this over source because this method honors timeouts. When the socket read times out, the socket is asynchronously closed by a watchdog thread.","title":"source"},{"location":"2.x/okio/okio/java.nio.file.-path/","text":"okio / okio / java.nio.file.Path Extensions for java.nio.file.Path Name Summary (jvm) sink Returns a source that reads from path . fun Path.sink(vararg options: OpenOption): Sink (jvm) source Returns a sink that writes to path . fun Path.source(vararg options: OpenOption): Source","title":"Home"},{"location":"2.x/okio/okio/java.nio.file.-path/#extensions-for-javaniofilepath","text":"Name Summary (jvm) sink Returns a source that reads from path . fun Path.sink(vararg options: OpenOption): Sink (jvm) source Returns a sink that writes to path . fun Path.source(vararg options: OpenOption): Source","title":"Extensions for java.nio.file.Path"},{"location":"2.x/okio/okio/java.nio.file.-path/sink/","text":"okio / okio / java.nio.file.Path / sink sink (jvm) @IgnoreJRERequirement fun Path.sink(vararg options: OpenOption): Sink Returns a source that reads from path .","title":"Sink"},{"location":"2.x/okio/okio/java.nio.file.-path/sink/#sink","text":"(jvm) @IgnoreJRERequirement fun Path.sink(vararg options: OpenOption): Sink Returns a source that reads from path .","title":"sink"},{"location":"2.x/okio/okio/java.nio.file.-path/source/","text":"okio / okio / java.nio.file.Path / source source (jvm) @IgnoreJRERequirement fun Path.source(vararg options: OpenOption): Source Returns a sink that writes to path .","title":"Source"},{"location":"2.x/okio/okio/java.nio.file.-path/source/#source","text":"(jvm) @IgnoreJRERequirement fun Path.source(vararg options: OpenOption): Source Returns a sink that writes to path .","title":"source"},{"location":"2.x/okio/okio/kotlin.-string/","text":"okio / okio / kotlin.String Extensions for kotlin.String Name Summary (js, jvm) utf8Size Returns the number of bytes used to encode the slice of string as UTF-8 when using BufferedSink.writeUtf8 . fun String .utf8Size(beginIndex: Int = 0, endIndex: Int = length): Long","title":"Home"},{"location":"2.x/okio/okio/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary (js, jvm) utf8Size Returns the number of bytes used to encode the slice of string as UTF-8 when using BufferedSink.writeUtf8 . fun String .utf8Size(beginIndex: Int = 0, endIndex: Int = length): Long","title":"Extensions for kotlin.String"},{"location":"2.x/okio/okio/kotlin.-string/utf8-size/","text":"okio / okio / kotlin.String / utf8Size utf8Size (js) @JvmOverloads @JvmName(\"size\") fun String .utf8Size(beginIndex: Int = 0, endIndex: Int = length): Long (jvm) @JvmOverloads @JvmName(\"size\") fun String .utf8Size(beginIndex: Int = 0, endIndex: Int = length): Long Returns the number of bytes used to encode the slice of string as UTF-8 when using BufferedSink.writeUtf8 .","title":"Utf8 size"},{"location":"2.x/okio/okio/kotlin.-string/utf8-size/#utf8size","text":"(js) @JvmOverloads @JvmName(\"size\") fun String .utf8Size(beginIndex: Int = 0, endIndex: Int = length): Long (jvm) @JvmOverloads @JvmName(\"size\") fun String .utf8Size(beginIndex: Int = 0, endIndex: Int = length): Long Returns the number of bytes used to encode the slice of string as UTF-8 when using BufferedSink.writeUtf8 .","title":"utf8Size"}]}